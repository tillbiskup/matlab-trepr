function [parameters,warnings] = trEPRinfoFileParse(filename,varargin)
% TREPRINFOFILEPARSE Parse Info files of trEPR spectra and return a
% structure containing all parameters.
%
% Usage
%   parameters = trEPRinfoFileParse(filename)
%   [parameters,warning] = trEPRinfoFileParse(filename)
%   [parameters,warning] = trEPRinfoFileParse(filename,command)
%
% filename   - string
%              Valid filename (of a trEPR Info file)
% command    - string (OPTIONAL)
%              Additional command controlling what to do with the parsed
%              data.
%              'map' - Map the parsed fields to the trEPR toolbox structure
%                      and return a structure with these mapped fields
%                      instead of the original parsed fields of the Info
%                      file.
%
% parameters - struct
%              structure containing parameters from the trEPR Info file
%
%              In case of the optional 'map' command, structure containing
%              the parameters from the trEPR Info file mapped onto their
%              couterparts of the trEPR data structure.
%
% warnings   - cell array of strings
%              empty if there are no warnings
%
% See also: TREPRINFOFILECREATE, TREPRINFOFILEWRITE

% Copyright (c) 2012-15, Till Biskup
% 2015-03-25

% If called without parameter, do something useful: display help
if ~nargin && ~nargout
    help trEPRinfoFileParse
    return;
end

% Parse input arguments using the inputParser functionality
p = inputParser;   % Create an instance of the inputParser class.
p.FunctionName = mfilename; % Function name to be included in error messages
p.KeepUnmatched = true; % Enable errors on unmatched arguments
p.StructExpand = true; % Enable passing arguments in a structure

p.addRequired('filename', @(x)ischar(x));
p.addOptional('command','',@(x)ischar(x));
p.parse(filename,varargin{:});

warnings = cell(0);

% Define identifierString for Info File format
identifierString = 'trEPR Info file';

try
    parameters = struct();

    % If there is no filename specified, return
    if isempty(filename)
        warnings{end+1} = struct(...
            'identifier','trEPRinfoFileParse:nofile',...
            'message','No filename or file does not exist'...
            );
        return;
    end
    % If filename does not exist, try to add extension
    if  ~exist(filename,'file')
        [fpath,fname,~] = fileparts(filename);
        if exist(fullfile(fpath,[fname '.meta']),'file')
            filename = fullfile(fpath,[fname '.info']);
        else
            parameters = struct();
            warnings{end+1} = struct(...
                'identifier','trEPRinfoFileParse:nofile',...
                'message','No filename or file does not exist'...
                );
            return;
        end
    end
    
    [parameters,format] = commonInfofileLoad(filename);
    
    if p.Results.command
        switch lower(p.Results.command)
            case 'map'
                if commonVersionLessThan(format.version,'0.1.5')
                    parameters = mapToDataStructure(parameters);
                else
                    dataset = trEPRdataStructure('structure');
                    parameters = trEPRdatasetMapInfo(...
                        dataset,parameters,format);
                    % For now: Remove a few fields that might confuse the
                    % toolbox, as commonDatasetMapInfo returns a full
                    % dataset and trEPRinfoFileParse is expected not to do.
                    fields2remove = {...
                        'data','axes','calculated','history','format',...
                        'characteristics','file','display','calculation'};
                    parameters = rmfield(parameters,fields2remove);
                end
            otherwise
                disp(['trEPRinfoFileParse() : Unknown command "'...
                    p.Results.command '"']);
        end
    end
catch exception
    throw(exception);
end

end


% MAPTODATASTRUCTURE Internal function mapping the parameters read to the
%                    trEPR toolbox data structure.
%
% parameter     - struct
%                 Structure containing the parsed contents of the Info file
%
% dataStructure - Structure containing the fields of the trEPR toolbox data
%                 structure with mapped information from the input
%
function dataStructure = mapToDataStructure(parameters)
try
    dataStructure = struct();
    
    % Cell array correlating struct fieldnames read from the metafile and
    % from the toolbox data structure.
    % The first entry contains the fieldname generated while parsing the
    % metafile, the second entry contains the corresponding field name of
    % the toolbox data structure struct. The third parameter, 
    % finally, tells the program how to parse the corresponding entry.
    % Here, "numeric" means that the numbers of the field should be treated
    % as numbers, "copy" means to just copy the field unaltered, and
    % "valueunit" splits the field in a numeric value and a string
    % containing the unit.
    matching = {...
        % GENERAL
        'general.filename','file.name','copy';...
        'general.operator','parameters.operator','copy';...
        'general.label','label','copy';...
        'general.purpose','parameters.purpose','copyascell';
        'general.spectrometer','parameters.spectrometer.name','copy';...
        'general.software','parameters.spectrometer.software','copy';...
        'general.runs','parameters.runs','numeric';...
        'general.shotRepetitionRate','parameters.shotRepetitionRate','valueunit';...
        % SAMPLE
        'sample.name','sample.name','copy';...
        'sample.description','sample.description','copyascell';...
        'sample.buffer','sample.buffer','copyascell';...
        'sample.preparation','sample.preparation','copyascell';...
        'sample.tube','sample.tube','copy';...
        % TRANSIENT
        'transient.points','parameters.transient.points','numeric';...
        'transient.length','parameters.transient.length','valueunit';...
        'transient.triggerPosition','parameters.transient.triggerPosition','numeric';...
        % MAGNETIC FIELD
        'magneticField.start','parameters.field.start','valueunit';...
        'magneticField.stop','parameters.field.stop','valueunit';...
        'magneticField.step','parameters.field.step','valueunit';...
        'magneticField.sequence','parameters.field.sequence','copy';...
        'magneticField.controller','parameters.field.model','copy';...
        'magneticField.powerSupply','parameters.field.powersupply','copy';...
        % BACKGROUND
        'background.field','parameters.background.field','valueunit';...
        'background.occurrence','parameters.background.occurrence','copy';...
        'background.polarisation','parameters.background.polarisation','copy';...
        % BRIGDE
        'bridge.model','parameters.bridge.model','copy';...
        'bridge.attenuation','parameters.bridge.attenuation','valueunit';...
        'bridge.power','parameters.bridge.power','valueunit';...
        'bridge.detection','parameters.bridge.detection','copy';...
        'bridge.frequencyCounter','parameters.bridge.calibration.model','copy';...
        'bridge.mwFrequency','parameters.bridge.MWfrequency','valueunit';...
        % VIDEO AMPLIFIER
        'videoAmplifier.bandwidth','parameters.bridge.bandwidth','valueunit';...
        'videoAmplifier.amplification','parameters.bridge.amplification','valueunit';...
        % RECORDER
        'recorder.model','parameters.recorder.model','copy';...
        'recorder.averages','parameters.recorder.averages','numeric';...
        'recorder.sensitivity','parameters.recorder.sensitivity','valueunit';...
        'recorder.bandwidth','parameters.recorder.bandwidth','valueunit';...
        'recorder.timeBase','parameters.recorder.timeBase','valueunit';...
        'recorder.coupling','parameters.recorder.coupling','copy';...
        'recorder.impedance','parameters.recorder.impedance','valueunit';...
        'recorder.pretrigger','parameters.recorder.pretrigger','valueunit';...
        % PROBEHEAD
        'probehead.type','parameters.probehead.type','copy';...
        'probehead.model','parameters.probehead.model','copy';...
        'probehead.coupling','parameters.probehead.coupling','copy';...
        % PUMP
        'pump.type','parameters.laser.type','copy';...
        'pump.model','parameters.laser.model','copy';...
        'pump.wavelength','parameters.laser.wavelength','valueunit';...
        'pump.repetitionRate','parameters.laser.repetitionRate','valueunit';
        'pump.power','parameters.laser.power','valueunit';...
        'pump.tunableType','parameters.laser.tunable.type','copy';...
        'pump.tunableModel','parameters.laser.tunable.model','copy';...
        'pump.tunableDye','parameters.laser.tunable.dye','copy';...
        'pump.tunablePosition','parameters.laser.tunable.position','copy';...
        % TEMPERATURE
        'temperature.temperature','parameters.temperature','valueunit';...
        'temperature.controller','parameters.temperature.model','copy';...
        'temperature.cryostat','parameters.temperature.cryostat','copy';...
        'temperature.cryogen','parameters.temperature.cryogen','copy';...
        % FIELD CALIBRATION
        'fieldCalibration.gaussmeter','parameters.field.calibration.model','copy';...
        'fieldCalibration.method','parameters.field.calibration.method','copy';...
        'fieldCalibration.standard','parameters.field.calibration.standard','copy';...
        'fieldCalibration.signalField','parameters.field.calibration.signalField','valueunit';...
        'fieldCalibration.mwFrequency','parameters.field.calibration.MWfrequency','valueunit';...
        'fieldCalibration.deviation','parameters.field.calibration.deviation','valueunit';...
        'fieldCalibration.start','parameters.field.calibration.start','valueunit';...
        'fieldCalibration.end','parameters.field.calibration.end','valueunit';...
        % FREQUENCY CALIBRATION
        'frequencyCalibration.start','parameters.bridge.calibration.start','valueunit';...
        'frequencyCalibration.end','parameters.bridge.calibration.end','valueunit';...
        % COMMENT
        'comment','comment','copy';...
        };
    
    for k=1:length(matching)
        % For debugging: Print current field name:
        % fprintf('%s\n',matching{k,1});
        if ~isempty(getCascadedField(parameters,matching{k,1}))
            switch matching{k,3}
                case 'numeric'
                    if ischar(getCascadedField(parameters,matching{k,1}))
                        dataStructure = setCascadedField(dataStructure,...
                            matching{k,2},...
                            num2str(getCascadedField(parameters,matching{k,1})));
                    else
                        dataStructure = setCascadedField(dataStructure,...
                            matching{k,2},...
                            getCascadedField(parameters,matching{k,1}));
                    end
                case 'valueunit'
                    if ~isempty(getCascadedField(parameters,matching{k,1}))
                        if isnumeric(getCascadedField(parameters,matching{k,1}))
                            dataStructure = setCascadedField(dataStructure,...
                                [matching{k,2} '.value'],...
                                getCascadedField(parameters,matching{k,1}));
                            dataStructure = setCascadedField(dataStructure,...
                                [matching{k,2} '.unit'],'');
                        else
                            parts = regexp(...
                                getCascadedField(parameters,matching{k,1}),...
                                ' ','split','once');
                            if length(parts) < 2
                                if isnumeric(parts{1})
                                    dataStructure = setCascadedField(dataStructure,...
                                        [matching{k,2} '.value'],...
                                        str2num(parts{1})); %#ok<ST2NM>
                                    dataStructure = setCascadedField(dataStructure,...
                                        [matching{k,2} '.unit'],...
                                        '');
                                else
                                    dataStructure = setCascadedField(dataStructure,...
                                        [matching{k,2} '.value'],...
                                        []);
                                    dataStructure = setCascadedField(dataStructure,...
                                        [matching{k,2} '.unit'],...
                                        parts{1});
                                end
                            else
                                dataStructure = setCascadedField(dataStructure,...
                                    [matching{k,2} '.value'],...
                                    str2num(parts{1})); %#ok<ST2NM>
                                dataStructure = setCascadedField(dataStructure,...
                                    [matching{k,2} '.unit'],...
                                    parts{2});
                            end
                        end
                    else
                        dataStructure = setCascadedField(dataStructure,...
                            [matching{k,2} '.value'],...
                            []);
                        dataStructure = setCascadedField(dataStructure,...
                            [matching{k,2} '.unit'],...
                            '');
                    end
                case 'copy'
                    dataStructure = setCascadedField(dataStructure,...
                        matching{k,2},...
                        getCascadedField(parameters,matching{k,1}));
                case 'copyascell'
                    dataStructure = setCascadedField(dataStructure,...
                        matching{k,2},...
                        cellstr(getCascadedField(parameters,matching{k,1})));
            end
        end
    end
    
    % Handle the special case of date and time that get combined in one
    % field
    dataStructure.parameters.date.start = [...
        parameters.general.date ' ' parameters.general.timeStart];
    dataStructure.parameters.date.end = [...
        parameters.general.date ' ' parameters.general.timeEnd];
    
catch exception
    throw(exception);
end

end

% --- Get field of cascaded struct
function value = getCascadedField (struct, fieldName)
    try
        % Get number of "." in fieldName
        nDots = strfind(fieldName,'.');
        if isempty(nDots)
            if isfield(struct,fieldName)
                value = struct.(fieldName);
            else
                value = '';
            end
        else
            if ~isfield(struct,fieldName(1:nDots(1)-1))
                value = '';
                return;
            end
            struct = struct.(fieldName(1:nDots(1)-1));
            value = getCascadedField(...
                struct,...
                fieldName(nDots(1)+1:end));
        end
    catch exception
        disp(fieldName);
        disp(struct);
        throw(exception);
    end 
end

% --- Set field of cascaded struct
function struct = setCascadedField (struct, fieldName, value)
    % Get number of "." in fieldName
    nDots = strfind(fieldName,'.');
    if isempty(nDots)
        struct.(fieldName) = value;
    else
        if ~isfield(struct,fieldName(1:nDots(1)-1))
            struct.(fieldName(1:nDots(1)-1)) = [];
        end
        innerstruct = struct.(fieldName(1:nDots(1)-1));
        innerstruct = setCascadedField(...
            innerstruct,...
            fieldName(nDots(1)+1:end),...
            value);
        struct.(fieldName(1:nDots(1)-1)) = innerstruct;
    end
end
