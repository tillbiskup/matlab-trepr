function [fileContents,warnings] = trEPRinfoFileCreate(parameters,varargin)
% TREPRINFOFILECREATE Create Info files of trEPR spectra. To write the
% returned cell array, use trEPRinfoFileWrite
%
% Usage
%   [fileContents] = trEPRinfoFileCreate(parameters)
%   [fileContents,warnings] = trEPRinfoFileCreate(filename,parameters)
%
% parameters   - struct
%                structure containing parameters to write to the trEPR Info
%                file
%
%                Either a structure as read with trEPRinfoFileParse or the
%                parameters structure of a trEPR toolbox dataset
%
% fileContents - cell array of strings
%                Contents of the info file
% warnings     - cell array of strings
%                empty if there are no warnings
%
% See also: TREPRINFOFILEPARSE, TREPRINFOFILEWRITE

% (c) 2012-13, Till Biskup
% 2013-02-15

% If called without parameter, do something useful: display help
if ~nargin && ~nargout
    help trEPRinfoFileCreate
    return;
end

% Parse input arguments using the inputParser functionality
p = inputParser;   % Create an instance of the inputParser class.
p.FunctionName = mfilename; % Function name to be included in error messages
p.KeepUnmatched = true; % Enable errors on unmatched arguments
p.StructExpand = true; % Enable passing arguments in a structure

p.addRequired('parameters', @(x)isstruct(x));
%p.addOptional('command','',@(x)ischar(x));
p.parse(parameters,varargin{:});

warnings = cell(0);

% Define identifierString for Info File format
identifierString = 'trEPR Info file - v. 0.1.4 (2012-06-06)';

% Define length of parameter field
fieldNameLength = 24;

% Define precision of floats
precision = 16;

try
    % Assemble file contents in cell array
    fileContents = cell(0);
    
    % First line of file contents is the identifier string
    fileContents{1} = identifierString;
    % Second line of file is an empty line
    fileContents{2} = '';

    % Block names are defined in a cell array.
    blockNames = {...
        'GENERAL' ...
        'SAMPLE' ...
        'TRANSIENT' ...
        'MAGNETIC FIELD' ...
        'BACKGROUND' ...
        'BRIDGE' ...
        'VIDEO AMPLIFIER' ...
        'RECORDER' ...
        'PROBEHEAD' ...
        'PUMP' ...
        'TEMPERATURE' ...
        'FIELD CALIBRATION' ...
        'FREQUENCY CALIBRATION' ...
        'COMMENT' ...
        };
    for k=1:length(blockNames)
        blocks.(lower(strrep(blockNames{k},' ',''))) = blockNames{k};
    end
    
    parametersFieldNames = fieldnames(parameters);
    
    if any(strcmpi(parametersFieldNames,'parameters'))
        parameters = mapToDataStructure(parameters);
        parametersFieldNames = fieldnames(parameters);
    end
    
    for k=1:length(parametersFieldNames)
        if isstruct(parameters.(parametersFieldNames{k}))
            if ~isempty(fieldnames(parameters.(parametersFieldNames{k})))
                fileContents{end+1} = blocks.(parametersFieldNames{k}); %#ok<AGROW>
                blockFieldNames = ...
                    fieldnames(parameters.(parametersFieldNames{k}));
                for m=1:length(blockFieldNames)
                    blockFieldName = lower(...
                        regexprep([blockFieldNames{m} ':'],'([A-Z])',' $1'));
                    blockFieldName(1) = upper(blockFieldName(1));
                    blockFieldName(end+1:fieldNameLength)=' ';
                    if iscell(parameters.(parametersFieldNames{k}).(blockFieldNames{m})) && ...
                            ~isempty(parameters.(parametersFieldNames{k}).(blockFieldNames{m}))
                        fileContents{end+1} = sprintf('%s%s',...
                            blockFieldName,...
                            num2str(...
                            parameters.(parametersFieldNames{k}).(blockFieldNames{m}){1}),...
                            precision); %#ok<AGROW>
                        if length(parameters.(parametersFieldNames{k}).(blockFieldNames{m})) > 1
                            fileContents = [ fileContents ...
                                cellfun(@(x)sprintf(' %s',x),...
                                parameters.(parametersFieldNames{k}).(blockFieldNames{m})(2:end),...
                                'UniformOutput',false)
                                ]; %#ok<AGROW>
                        end
                    else
                        fileContents{end+1} = sprintf('%s%s',...
                            blockFieldName,...
                            num2str(...
                            parameters.(parametersFieldNames{k}).(blockFieldNames{m})),...
                            precision); %#ok<AGROW>
                    end
                end
                fileContents{end+1} = ''; %#ok<AGROW>
            end
        else
            fileContents{end+1} = blocks.(parametersFieldNames{k}); %#ok<AGROW>
            fileContents = ...
                [fileContents parameters.(parametersFieldNames{k})]; %#ok<AGROW>
            fileContents{end+1} = ''; %#ok<AGROW>
        end
    end
    
catch exception
    throw(exception);
end

end


% MAPTODATASTRUCTURE Internal function mapping the parameters read to the
%                    trEPR toolbox data structure.
%
% parameter     - struct
%                 Structure containing the parsed contents of the Info file
%
% dataStructure - Structure containing the fields of the trEPR toolbox data
%                 structure with mapped information from the input
%
function dataStructure = mapToDataStructure(parameters)
try
    dataStructure = struct();
    
    % Cell array correlating struct fieldnames read from the metafile and
    % from the toolbox data structure.
    % The first entry contains the fieldname generated while parsing the
    % metafile, the second entry contains the corresponding field name of
    % the toolbox data structure struct. The third parameter, 
    % finally, tells the program how to parse the corresponding entry.
    % Here, "numeric" means that the numbers of the field should be treated
    % as numbers, "copy" means to just copy the field unaltered, and
    % "valueunit" splits the field in a numeric value and a string
    % containing the unit.
    matching = {...
        % GENERAL
        'general.filename','file.name','copy';...
        'general.start','parameters.date.start','copy';...
        'general.end','parameters.date.end','copy';...
        'general.operator','parameters.operator','copy';...
        'general.label','label','copy';...
        'general.purpose','parameters.purpose','copy';...
        'general.spectrometer','parameters.spectrometer.name','copy';...
        'general.software','parameters.spectrometer.software','copy';...
        'general.runs','parameters.runs','numeric';...
        'general.shotRepetitionRate','parameters.shotRepetitionRate','valueunit';...
        % SAMPLE
        'sample.name','sample.name','copy';...
        'sample.description','sample.description','copy';...
        'sample.buffer','sample.buffer','copy';...
        'sample.preparation','sample.preparation','copy';...
        'sample.tube','sample.tube','copy';...
        % TRANSIENT
        'transient.points','parameters.transient.points','numeric';...
        'transient.length','parameters.transient.length','valueunit';...
        'transient.triggerPosition','parameters.transient.triggerPosition','numeric';...
        % MAGNETIC FIELD
        'magneticfield.start','parameters.field.start','valueunit';...
        'magneticfield.stop','parameters.field.stop','valueunit';...
        'magneticfield.step','parameters.field.step','valueunit';...
        'magneticfield.sequence','parameters.field.sequence','copy';...
        'magneticfield.controller','parameters.field.model','copy';...
        'magneticfield.powerSupply','parameters.field.powersupply','copy';...
        % BACKGROUND
        'background.field','parameters.background.field','valueunit';...
        'background.occurrence','parameters.background.occurrence','copy';...
        'background.polarisation','parameters.background.polarisation','copy';...
        % BRIGDE
        'bridge.model','parameters.bridge.model','copy';...
        'bridge.attenuation','parameters.bridge.attenuation','valueunit';...
        'bridge.power','parameters.bridge.power','valueunit';...
        'bridge.detection','parameters.bridge.detection','copy';...
        'bridge.frequencyCounter','parameters.bridge.calibration.model','copy';...
        'bridge.mwFrequency','parameters.bridge.MWfrequency','valueunit';...
        % VIDEO AMPLIFIER
        'videoamplifier.bandwidth','parameters.bridge.bandwidth','valueunit';...
        'videoamplifier.amplification','parameters.bridge.amplification','valueunit';...
        % RECORDER
        'recorder.model','parameters.recorder.model','copy';...
        'recorder.averages','parameters.recorder.averages','numeric';...
        'recorder.sensitivity','parameters.recorder.sensitivity','valueunit';...
        'recorder.bandwidth','parameters.recorder.bandwidth','valueunit';...
        'recorder.timeBase','parameters.recorder.timeBase','valueunit';...
        'recorder.coupling','parameters.recorder.coupling','copy';...
        'recorder.impedance','parameters.recorder.impedance','valueunit';...
        'recorder.pretrigger','parameters.recorder.pretrigger','valueunit';...
        % PROBEHEAD
        'probehead.type','parameters.probehead.type','copy';...
        'probehead.model','parameters.probehead.model','copy';...
        'probehead.coupling','parameters.probehead.coupling','copy';...
        % PUMP
        'pump.type','parameters.laser.type','copy';...
        'pump.model','parameters.laser.model','copy';...
        'pump.wavelength','parameters.laser.wavelength','valueunit';...
        'pump.repetitionRate','parameters.laser.repetitionRate','valueunit';
        'pump.power','parameters.laser.power','valueunit';...
        'pump.tunableType','parameters.laser.tunable.type','copy';...
        'pump.tunableModel','parameters.laser.tunable.model','copy';...
        'pump.tunableDye','parameters.laser.tunable.dye','copy';...
        'pump.tunablePosition','parameters.laser.tunable.position','copy';...
        % TEMPERATURE
        'temperature.temperature','parameters.temperature','valueunit';...
        'temperature.controller','parameters.temperature.model','copy';...
        'temperature.cryostat','parameters.temperature.cryostat','copy';...
        'temperature.cryogen','parameters.temperature.cryogen','copy';...
        % FIELD CALIBRATION
        'fieldcalibration.gaussmeter','parameters.field.calibration.model','copy';...
        'fieldcalibration.method','parameters.field.calibration.method','copy';...
        'fieldcalibration.standard','parameters.field.calibration.standard','copy';...
        'fieldcalibration.signalField','parameters.field.calibration.signalField','valueunit';...
        'fieldcalibration.mwFrequency','parameters.field.calibration.MWfrequency','valueunit';...
        'fieldcalibration.deviation','parameters.field.calibration.deviation','valueunit';...
        'fieldcalibration.start','parameters.field.calibration.start','valueunit';...
        'fieldcalibration.end','parameters.field.calibration.end','valueunit';...
        % FREQUENCY CALIBRATION
        'frequencycalibration.start','parameters.bridge.calibration.start','valueunit';...
        'frequencycalibration.end','parameters.bridge.calibration.end','valueunit';...
        % COMMENT
        'comment','comment','copy';...
        };
    
    for k=1:length(matching)
        switch matching{k,3}
            case 'numeric'
                dataStructure = setCascadedField(dataStructure,...
                    matching{k,1},...
                    num2str(getCascadedField(parameters,matching{k,2}),...
                    precision));
            case 'valueunit'
                dataStructure = setCascadedField(dataStructure,...
                    matching{k,1},...
                    sprintf('%s %s',...
                    num2str(getCascadedField(parameters,[matching{k,2} '.value']),precision),...
                    getCascadedField(parameters,[matching{k,2} '.unit'])...
                    ));
            case 'copy'
                dataStructure = setCascadedField(dataStructure,...
                    matching{k,1},...
                    getCascadedField(parameters,matching{k,2}));
        end
    end
    
    % Reorder dataStructure.general
    perm = [1, length(fieldnames(dataStructure.general))-2:...
        length(fieldnames(dataStructure.general)),...
        2:length(fieldnames(dataStructure.general))-3];
    dataStructure.general = orderfields(dataStructure.general,perm);
catch exception
    throw(exception);
end

end

% --- Get field of cascaded struct
function value = getCascadedField (struct, fieldName)
    try
        % Get number of "." in fieldName
        nDots = strfind(fieldName,'.');
        if isempty(nDots)
            if isfield(struct,fieldName)
                value = struct.(fieldName);
            else
                value = '';
            end
        else
            struct = struct.(fieldName(1:nDots(1)-1));
            value = getCascadedField(...
                struct,...
                fieldName(nDots(1)+1:end));
        end
    catch exception
        disp(fieldName);
        disp(struct);
        throw(exception);
    end 
end

% --- Set field of cascaded struct
function struct = setCascadedField (struct, fieldName, value)
    % Get number of "." in fieldName
    nDots = strfind(fieldName,'.');
    if isempty(nDots)
        struct.(fieldName) = value;
    else
        if ~isfield(struct,fieldName(1:nDots(1)-1))
            struct.(fieldName(1:nDots(1)-1)) = [];
        end
        innerstruct = struct.(fieldName(1:nDots(1)-1));
        innerstruct = setCascadedField(...
            innerstruct,...
            fieldName(nDots(1)+1:end),...
            value);
        struct.(fieldName(1:nDots(1)-1)) = innerstruct;
    end
end