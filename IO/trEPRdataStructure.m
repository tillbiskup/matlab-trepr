function varargout = trEPRdataStructure(varargin)
% TREPRDATASTRUCTURE Return data structure for trEPR toolbox data, or test
% compliance of given structure with the data structure of the toolbox.
%
% Usage
%   structure = trEPRdataStructure;
%   structure = trEPRdataStructure(<command>)
%   [?,?] = trEPRfsc2MetaLoad(<command>,structure)
%
% <command> - string
%             one of 'structure', 'model' or 'check'
%             'structure' - return (empty) trEPR toolbox data structure
%             'model' -     return trEPR toolbox data structure with field
%                           types as values
%             'check' -     check given structure for compliance with the
%                           toolbox data structure
%
% structure - struct
%             either empty trEPR toolbox data structure or 
%             trEPR toolbox data structure with field types as values
%

% (c) 2011, Till Biskup
% 2011-10-31

% If called without parameter, do something useful: display help
if ~nargin && ~nargout
    help trEPRdataStructure
    return;
end

% Create empty trEPR toolbox data structure
dataStructure = struct();
dataStructure.data = [];
dataStructure.axes = struct(...
    'x',struct(...
        'values',[], ...
        'measure','', ...
        'unit','' ...
        ), ...
    'y',struct(...
        'values',[], ...
        'calibratedValues',[], ...
        'measure','', ...
        'unit','' ...
        ), ...
    'z',struct(...
        'values',[], ...
        'measure','', ...
        'unit','' ...
        ) ...
    );
dataStructure.parameters = struct(...
    'runs',[],...
    'operator','',...
    'field',struct(...
        'start',[],...
        'stop',[],...
        'step',[],...
        'unit','',...
        'calibration',struct(...
            'values',[],...
            'unit','',...
            'model',''...
            )...
        ),...
    'recorder',struct(...
        'sensitivity',struct(...
            'value',[],...
            'unit',''...
            ),...
        'averages',[],...
        'timeBase',struct(...
            'value',[],...
            'unit',''...
            ),...
        'bandwidth',struct(...
            'value',[],...
            'unit',''...
            ),...
        'coupling','',...
        'impedance',struct(...
            'value',[],...
            'unit',''...
            ),...
        'model',''...
        ),...
    'transient',struct(...
        'points',[],...
        'triggerPosition',[],...
        'length',[],...
        'unit',''...
        ),...
    'bridge',struct(...
        'MWfrequency',struct(...
            'value',[],...
            'unit',''...
            ),...
        'attenuation',struct(...
            'value',[],...
            'unit',''...
            ),...
        'bandwidth',struct(...
            'value',[],...
            'unit',''...
            ),...
        'amplification',struct(...
            'value',[],...
            'unit',''...
            ),...
        'calibration',struct(...
            'values',[],...
            'unit','',...
            'model',''...
            ),...
        'power',struct(...
            'value',[],...
            'unit',''...
            ),...
        'model',''...
        ),...
    'laser',struct(...
        'wavelength',struct(...
            'value',[],...
            'unit',''...
            ),...
        'repetitionRate',struct(...
            'value',[],...
            'unit',''...
            ),...
        'power',struct(...
            'value',[],...
            'unit',''...
            ),...
        'model','',...
        'opoDye',''...
        ),...
    'temperature',struct(...
        'value',[],...
        'unit',''...
        )...
    );
dataStructure.header = cell(0);
dataStructure.info = struct();
dataStructure.file = struct(...
    'name','', ...
    'type','' ...
    );
dataStructure.version = '1.1';


% Create trEPR toolbox data model (structure with field types as values)
dataModel = struct();
dataModel.data = 'ismatrix';
dataModel.axes = struct(...
    'x',struct(...
        'values','isvector', ...
        'measure','ischar', ...
        'unit','ischar' ...
        ), ...
    'y',struct(...
        'values','isvector', ...
        'calibratedValues','isscalar', ...
        'measure','ischar', ...
        'unit','ischar' ...
        ), ...
    'z',struct(...
        'values','isvector', ...
        'measure','ischar', ...
        'unit','ischar' ...
        ) ...
    );
dataModel.parameters = struct(...
    'runs','isscalar',...
    'operator','',...
    'field',struct(...
        'start','isscalar',...
        'stop','isscalar',...
        'step','isscalar',...
        'unit','',...
        'calibration',struct(...
            'values','isvector',...
            'unit','ischar',...
            'model','ischar'...
            )...
        ),...
    'recorder',struct(...
        'sensitivity',struct(...
            'value','isscalar',...
            'unit','ischar'...
            ),...
        'averages','isscalar',...
        'timeBase',struct(...
            'value','isscalar',...
            'unit','ischar'...
            ),...
        'bandwidth',struct(...
            'value','isscalar',...
            'unit','ischar'...
            ),...
        'coupling','',...
        'impedance',struct(...
            'value','isscalar',...
            'unit','ischar'...
            ),...
        'model','ischar'...
        ),...
    'transient',struct(...
        'points','isscalar',...
        'triggerPosition','isscalar',...
        'length','isscalar',...
        'unit','ischar'...
        ),...
    'bridge',struct(...
        'MWfrequency',struct(...
            'value','isscalar',...
            'unit','ischar'...
            ),...
        'attenuation',struct(...
            'value','isscalar',...
            'unit','ischar'...
            ),...
        'bandwidth',struct(...
            'value','isscalar',...
            'unit','ischar'...
            ),...
        'amplification',struct(...
            'value','isscalar',...
            'unit','ischar'...
            ),...
        'calibration',struct(...
            'values','isvector',...
            'unit','ischar',...
            'model','ischar'...
            ),...
        'power',struct(...
            'value','isscalar',...
            'unit','ischar'...
            ),...
        'model','ischar'...
        ),...
    'laser',struct(...
        'wavelength',struct(...
            'value','isscalar',...
            'unit','ischar'...
            ),...
        'repetitionRate',struct(...
            'value','isscalar',...
            'unit','ischar'...
            ),...
        'power',struct(...
            'value','isscalar',...
            'unit','ischar'...
            ),...
        'model','ischar',...
        'opoDye','ischar'...
        ),...
    'temperature',struct(...
        'value','isscalar',...
        'unit','ischar'...
        )...
    );
dataModel.header = 'iscell';
dataModel.info = 'ischaruct';
dataModel.file = struct(...
    'name','ischar', ...
    'type','ischar' ...
    );
dataModel.version = 'ischar';

if nargin && ischar(varargin{1})
    switch varargin{1}
        case 'structure'
            if nargout
                varargout{1} = dataStructure;
            end
        case 'model'
            if nargout
                varargout{1} = dataModel;
            end
        otherwise
            fprintf('Commad ''%s'' unknown\n',varargin{1});
    end
else
    if nargout
        varargout{1} = dataStructure;
    end
end

end