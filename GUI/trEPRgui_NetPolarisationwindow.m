function varargout = trEPRgui_NetPolarisationwindow(varargin)
% TREPRGUI_NETPOLARISATIONWINDOW Provide user with controls to analyse the
% net polarisation of a given 2D dataset.
%
% Normally, this window is called from within the trEPRgui window.
%
% See also TREPRGUI

% Copyright (c) 2013-14, Till Biskup
% 2014-08-10

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%  Construct the components
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% Make GUI effectively a singleton
singleton = findobj('Tag',mfilename);
if (singleton)
    figure(singleton);
    varargout{1} = singleton;
    return;
end

defaultBackground = [.9 .9 .9];

% Try to get main GUI position
mainGUIHandle = trEPRguiGetWindowHandle();
if ishandle(mainGUIHandle)
    mainGUIPosition = get(mainGUIHandle,'Position');
    guiPosition = [mainGUIPosition(1)+20,mainGUIPosition(2)+100,950,550];
else
    guiPosition = [40,170,950,550];
end

%  Construct the components
hMainFigure = figure('Tag',mfilename,...
    'Visible','off',...
    'Name','trEPR GUI : Net Polarisation Analysis Window',...
    'Color',defaultBackground,...
    'Units','Pixels',...
    'Position',guiPosition,...
    'Resize','off',...
    'NumberTitle','off', ...
    'KeyPressFcn',@keypress_Callback,...
    'Menu','none','Toolbar','none');

mainPanelWidth = 260;
mainPanelHeight = 420;
panel_size = 240;
guiSize = get(hMainFigure,'Position');
guiSize = guiSize([3,4]);

axes(...         % the axes for plotting selected plot
    'Tag','axis',...
	'Parent', hMainFigure, ...
    'FontUnit','Pixel','Fontsize',14,...
    'Units', 'Pixels', ...
    'Position',[80 70 570 450]);

% Create button group, toggle buttons for switching btw. panels
hButtonGroup = uibuttongroup('Tag','mainButtonGroup',...
    'BackgroundColor',defaultBackground,...
    'BorderType','none',...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position', [guiSize(1)-mainPanelWidth-20 guiSize(2)-50 mainPanelWidth 30],...
    'Visible','on',...
    'SelectionChangeFcn',{@tbg_Callback});
tb1 = uicontrol('Tag','analyse_togglebutton',...
    'Style','Toggle',...
	'Parent', hButtonGroup, ...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'String','Analysis',...
    'TooltipString','Analyse net polarisation',...
    'pos',[0 0 (mainPanelWidth)/3 30],...
    'Enable','on'...
    );
tb2 = uicontrol('Tag','display_togglebutton',...
    'Style','Toggle',...
	'Parent', hButtonGroup, ...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'String','Display',...
    'TooltipString','Control display settings and export figure',...
    'pos',[mainPanelWidth/3 0 (mainPanelWidth)/3 30],...
    'Enable','on'...
    );
tb3 = uicontrol('Tag','settings_togglebutton',...
    'Style','Toggle',...
	'Parent', hButtonGroup, ...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'String','Settings',...
    'TooltipString','Change settings of the GUI',...
    'pos',[mainPanelWidth/3*2 0 (mainPanelWidth)/3 30],...
    'Enable','on'...
    );

% Create (switchable and overlaying) main panels
pp1 = uipanel('Tag','dataset_panel',...
    'parent',hMainFigure,...
    'Title','Analysis',...
    'FontUnit','Pixel','Fontsize',12,...
    'FontWeight','bold',...
    'BackgroundColor',defaultBackground,...
    'Visible','on',...
    'Units','pixels',...
    'Position',[guiSize(1)-mainPanelWidth-20 70 mainPanelWidth mainPanelHeight]);

pp2 = uipanel('Tag','accumulate_panel',...
    'parent',hMainFigure,...
    'Title','Display',...
    'FontUnit','Pixel','Fontsize',12,...
    'FontWeight','bold',...
    'BackgroundColor',defaultBackground,...
    'Visible','off',...
    'Units','pixels',...
    'Position',[guiSize(1)-mainPanelWidth-20 70 mainPanelWidth mainPanelHeight]);

pp3 = uipanel('Tag','settings_panel',...
    'parent',hMainFigure,...
    'Title','Settings',...
    'FontUnit','Pixel','Fontsize',12,...
    'FontWeight','bold',...
    'BackgroundColor',defaultBackground,...
    'Visible','off',...
    'Units','pixels',...
    'Position',[guiSize(1)-mainPanelWidth-20 70 mainPanelWidth mainPanelHeight]);

% elements for pp1

pp1_p1 = uipanel('Tag','pretrigpol_panel',...
    'Parent',pp1,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10 mainPanelHeight-200 panel_size 180],...
    'Title','Pretrigger statistics'...
    );
uicontrol('Tag','pretrigpol_min_text',...
    'Style','text',...
    'Parent',pp1_p1,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10 130 65 20],...
    'String','Min'...
    );
uicontrol('Tag','pretrigpol_min_edit',...
    'Style','edit',...
    'Parent',pp1_p1,...
    'BackgroundColor',[1 1 1],...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[80 130 (mainPanelWidth-110)/3*2 25],...
    'String','1',...
    'Enable','inactive'...
    );
uicontrol('Tag','pretrigpol_min_unit_edit',...
    'Style','edit',...
    'Parent',pp1_p1,...
    'BackgroundColor',[1 1 1],...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[80+(mainPanelWidth-110)/3*2 130 (mainPanelWidth-110)/3 25],...
    'String','a.u.',...
    'Enable','inactive'...
    );
uicontrol('Tag','pretrigpol_max_text',...
    'Style','text',...
    'Parent',pp1_p1,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10 100 65 20],...
    'String','Max'...
    );
uicontrol('Tag','pretrigpol_max_edit',...
    'Style','edit',...
    'Parent',pp1_p1,...
    'BackgroundColor',[1 1 1],...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[80 100 (mainPanelWidth-110)/3*2 25],...
    'String','1',...
    'Enable','inactive'...
    );
uicontrol('Tag','pretrigpol_max_unit_edit',...
    'Style','edit',...
    'Parent',pp1_p1,...
    'BackgroundColor',[1 1 1],...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[80+(mainPanelWidth-110)/3*2 100 (mainPanelWidth-110)/3 25],...
    'String','a.u.',...
    'Enable','inactive'...
    );
uicontrol('Tag','pretrigpol_delta_text',...
    'Style','text',...
    'Parent',pp1_p1,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10 70 65 20],...
    'String','Delta'...
    );
uicontrol('Tag','pretrigpol_delta_edit',...
    'Style','edit',...
    'Parent',pp1_p1,...
    'BackgroundColor',[1 1 1],...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[80 70 (mainPanelWidth-110)/3*2 25],...
    'String','1',...
    'Enable','inactive'...
    );
uicontrol('Tag','pretrigpol_delta_unit_edit',...
    'Style','edit',...
    'Parent',pp1_p1,...
    'BackgroundColor',[1 1 1],...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[80+(mainPanelWidth-110)/3*2 70 (mainPanelWidth-110)/3 25],...
    'String','a.u.',...
    'Enable','inactive'...
    );
uicontrol('Tag','pretrigpol_avg_text',...
    'Style','text',...
    'Parent',pp1_p1,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10 40 65 20],...
    'String','Average'...
    );
uicontrol('Tag','pretrigpol_avg_edit',...
    'Style','edit',...
    'Parent',pp1_p1,...
    'BackgroundColor',[1 1 1],...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[80 40 (mainPanelWidth-110)/3*2 25],...
    'String','1',...
    'Enable','inactive'...
    );
uicontrol('Tag','pretrigpol_avg_unit_edit',...
    'Style','edit',...
    'Parent',pp1_p1,...
    'BackgroundColor',[1 1 1],...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[80+(mainPanelWidth-110)/3*2 40 (mainPanelWidth-110)/3 25],...
    'String','a.u.',...
    'Enable','inactive'...
    );
uicontrol('Tag','pretrigpol_stdev_text',...
    'Style','text',...
    'Parent',pp1_p1,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10 10 65 20],...
    'String','Std. dev.'...
    );
uicontrol('Tag','pretrigpol_stdev_edit',...
    'Style','edit',...
    'Parent',pp1_p1,...
    'BackgroundColor',[1 1 1],...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[80 10 (mainPanelWidth-110)/3*2 25],...
    'String','1',...
    'Enable','inactive'...
    );
uicontrol('Tag','pretrigpol_stdev_unit_edit',...
    'Style','edit',...
    'Parent',pp1_p1,...
    'BackgroundColor',[1 1 1],...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[80+(mainPanelWidth-110)/3*2 10 (mainPanelWidth-110)/3 25],...
    'String','a.u.',...
    'Enable','inactive'...
    );

pp1_p2 = uipanel('Tag','netpol_panel',...
    'Parent',pp1,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10 mainPanelHeight-360 panel_size 150],...
    'Title','Net polarisation'...
    );
uicontrol('Tag','netpol_min_text',...
    'Style','text',...
    'Parent',pp1_p2,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'FontAngle','oblique',...
    'Units','Pixels',...
    'Position',[10 100 65 20],...
    'String','Minimum'...
    );
uicontrol('Tag','netpol_min_edit',...
    'Style','edit',...
    'Parent',pp1_p2,...
    'BackgroundColor',[1 1 1],...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[80 100 (mainPanelWidth-110)/3*2 25],...
    'String','0',...
    'Enable','inactive'...
    );
uicontrol('Tag','netpol_min_unit_edit',...
    'Style','edit',...
    'Parent',pp1_p2,...
    'BackgroundColor',[1 1 1],...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[80+(mainPanelWidth-110)/3*2 100 (mainPanelWidth-110)/3 25],...
    'String','a.u.',...
    'Enable','inactive'...
    );
uicontrol('Tag','netpol_minpos_text',...
    'Style','text',...
    'Parent',pp1_p2,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10 70 65 20],...
    'String','Position'...
    );
uicontrol('Tag','netpol_minpos_edit',...
    'Style','edit',...
    'Parent',pp1_p2,...
    'BackgroundColor',[1 1 1],...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[80 70 (mainPanelWidth-110)/3*2 25],...
    'String','0',...
    'Enable','inactive'...
    );
uicontrol('Tag','netpol_minpos_unit_edit',...
    'Style','edit',...
    'Parent',pp1_p2,...
    'BackgroundColor',[1 1 1],...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[80+(mainPanelWidth-110)/3*2 70 (mainPanelWidth-110)/3 25],...
    'String','s',...
    'Enable','inactive'...
    );
uicontrol('Tag','netpol_max_text',...
    'Style','text',...
    'Parent',pp1_p2,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'FontAngle','oblique',...
    'Units','Pixels',...
    'Position',[10 40 65 20],...
    'String','Maximum'...
    );
uicontrol('Tag','netpol_max_edit',...
    'Style','edit',...
    'Parent',pp1_p2,...
    'BackgroundColor',[1 1 1],...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[80 40 (mainPanelWidth-110)/3*2 25],...
    'String','0',...
    'Enable','inactive'...
    );
uicontrol('Tag','netpol_max_unit_edit',...
    'Style','edit',...
    'Parent',pp1_p2,...
    'BackgroundColor',[1 1 1],...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[80+(mainPanelWidth-110)/3*2 40 (mainPanelWidth-110)/3 25],...
    'String','a.u.',...
    'Enable','inactive'...
    );
uicontrol('Tag','netpol_maxpos_text',...
    'Style','text',...
    'Parent',pp1_p2,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10 10 65 20],...
    'String','Position'...
    );
uicontrol('Tag','netpol_maxpos_edit',...
    'Style','edit',...
    'Parent',pp1_p2,...
    'BackgroundColor',[1 1 1],...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[80 10 (mainPanelWidth-110)/3*2 25],...
    'String','0',...
    'Enable','inactive'...
    );
uicontrol('Tag','netpol_maxpos_unit_edit',...
    'Style','edit',...
    'Parent',pp1_p2,...
    'BackgroundColor',[1 1 1],...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[80+(mainPanelWidth-110)/3*2 10 (mainPanelWidth-110)/3 25],...
    'String','s',...
    'Enable','inactive'...
    );

% elements for pp2

pp2_p1 = uipanel('Tag','display_panel_grid_panel',...
    'Parent',pp2,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10 mainPanelHeight-80 panel_size 60],...
    'Title','Grid'...
    );
uicontrol('Tag','display_panel_grid_x_togglebutton',...
    'Style','Toggle',...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'String','X',...
    'TooltipString','Show grid in x',...
    'pos',[10 10 (panel_size-20)/4 30],...
    'parent',pp2_p1,...
    'HandleVisibility','off',...
    'Value',0,...
    'Callback',{@togglebutton_Callback,'gridx'}...
    );
uicontrol('Tag','display_panel_grid_y_togglebutton',...
    'Style','Toggle',...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'String','Y',...
    'TooltipString','Show grid in y',...
    'pos',[10+(panel_size-20)/4 10 (panel_size-20)/4 30],...
    'parent',pp2_p1,...
    'HandleVisibility','off',...
    'Value',0,...
    'Callback',{@togglebutton_Callback,'gridy'}...
    );
uicontrol('Tag','display_panel_grid_minor_togglebutton',...
    'Style','Toggle',...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'String','minor',...
    'TooltipString',sprintf('%s\n%s','Show minor grid',...
    '(Works only in combination with X or Y grid)'),...
    'pos',[10+(panel_size-20)/4*2 10 (panel_size-20)/4 30],...
    'parent',pp2_p1,...
    'HandleVisibility','off',...
    'Value',0,...
    'Callback',{@togglebutton_Callback,'gridminor'}...
    );
uicontrol('Tag','display_panel_grid_zero_togglebutton',...
    'Style','Toggle',...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'String','zero',...
    'TooltipString','Show dashed line at zero',...
    'pos',[10+(panel_size-20)/4*3 10 (panel_size-20)/4 30],...
    'parent',pp2_p1,...
    'HandleVisibility','off',...
    'Value',1,...
    'Callback',{@togglebutton_Callback,'gridzero'}...
    );

pp2_p2 = uipanel('Tag','display_panel_avg_panel',...
    'Parent',pp2,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10 mainPanelHeight-150 panel_size 60],...
    'Title','Pretrigger statistics'...
    );
uicontrol('Tag','display_panel_mean_togglebutton',...
    'Style','Toggle',...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'String','Mean',...
    'TooltipString','Show average pretrigger signal (mean)',...
    'pos',[10 10 (panel_size-20)/3 30],...
    'parent',pp2_p2,...
    'HandleVisibility','off',...
    'Value',0,...
    'Callback',{@togglebutton_Callback,'mean'}...
    );
uicontrol('Tag','display_panel_stdev_togglebutton',...
    'Style','Toggle',...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'String','Std. Dev.',...
    'TooltipString','Show std. dev. of pretrigger signal (+/-)',...
    'pos',[10+(panel_size-20)/3 10 (panel_size-20)/3 30],...
    'parent',pp2_p2,...
    'HandleVisibility','off',...
    'Value',0,...
    'Callback',{@togglebutton_Callback,'stdev'}...
    );
uicontrol('Tag','display_panel_minmax_togglebutton',...
    'Style','Toggle',...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'String','Min/Max',...
    'TooltipString','Show std. dev. of pretrigger signal (+/-)',...
    'pos',[10+(panel_size-20)/3*2 10 (panel_size-20)/3 30],...
    'parent',pp2_p2,...
    'HandleVisibility','off',...
    'Value',0,...
    'Callback',{@togglebutton_Callback,'minmax'}...
    );

pp2_p3 = uipanel('Tag','display_panel_smoothing_panel',...
    'Parent',pp2,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10 mainPanelHeight-270 panel_size 110],...
    'Title','Smoothing (running average filter)'...
    );
uicontrol('Tag','display_panel_smoothing_type_text',...
    'Style','text',...
    'Parent',pp2_p3,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'HorizontalAlignment','left',...
    'Units','Pixels',...
    'Position',[10 60 60 20],...
    'String','Type'...
    );
uicontrol('Tag','display_panel_smoothing_type_popupmenu',...
    'Style','popupmenu',...
    'Parent',pp2_p3,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[panel_size-170 65 160 20],...
    'String','boxcar',...
    'TooltipString','Choose filter type for smoothing'...
    );
uicontrol('Tag','processing_panel_smoothing_points_text',...
    'Style','text',...
    'Parent',pp2_p3,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[75 30 (panel_size-90)/2 25],...
    'String','points'...
    );
uicontrol('Tag','processing_panel_smoothing_unit_text',...
    'Style','text',...
    'Parent',pp2_p3,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[75+(panel_size-90)/2 30 (panel_size-90)/2 25],...
    'String','unit'...
    );
uicontrol('Tag','processing_panel_smoothing_text',...
    'Style','text',...
    'Parent',pp2_p3,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'HorizontalAlignment','left',...
    'Units','Pixels',...
    'Position',[10 10 60 20],...
    'String','Width'...
    );
uicontrol('Tag','processing_panel_smoothing_points_edit',...
    'Style','edit',...
    'Parent',pp2_p3,...
    'BackgroundColor',[1 1 1],...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[75 10 (panel_size-90)/2 25],...
    'String','1',...
    'Callback',{@edit_Callback,'smoothingindex'}...
    );
uicontrol('Tag','processing_panel_smoothing_unit_edit',...
    'Style','edit',...
    'Parent',pp2_p3,...
    'BackgroundColor',[1 1 1],...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[75+(panel_size-90)/2 10 (panel_size-90)/2 25],...
    'String','0',...
    'Callback',{@edit_Callback,'smoothingunit'}...
    );

pp2_p4 = uipanel('Tag','display_panel_axesexport_panel',...
    'Parent',pp2,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10 mainPanelHeight-400 panel_size 120],...
    'Title','Export figure'...
    );
uicontrol('Tag','display_panel_axesexport_description',...
    'Style','text',...
    'Parent',pp2_p4,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'HorizontalAlignment','Left',...
    'FontAngle','oblique',...
    'Position',[10 70 panel_size-20 20],...
    'String',{'Export current axes.'}...
    );
uicontrol('Tag','display_panel_axesexport_format_text',...
    'Style','text',...
    'Parent',pp2_p4,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'HorizontalAlignment','left',...
    'Units','Pixels',...
    'Position',[10 40 60 20],...
    'String','Format'...
    );
hAxesExportFormat = uicontrol('Tag','display_panel_axesexport_format_popupmenu',...
    'Style','popupmenu',...
    'Parent',pp2_p4,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[panel_size-170 45 160 20],...
    'String','default|square|fullwidth|fullwidthhalfheight|halfwidth',...
    'TooltipString','Select format of exported graphics'...
    );
uicontrol('Tag','display_panel_axesexport_filetype_text',...
    'Style','text',...
    'Parent',pp2_p4,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'HorizontalAlignment','left',...
    'Units','Pixels',...
    'Position',[10 10 60 20],...
    'String','File type'...
    );
uicontrol('Tag','display_panel_axesexport_filetype_popupmenu',...
    'Style','popupmenu',...
    'Parent',pp2_p4,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[panel_size-170 15 100 20],...
    'String','fig|eps|pdf|png',...
    'TooltipString','Select type of graphics file'...
    );
uicontrol('Tag','display_panel_axesexport_pushbutton',...
    'Style','pushbutton',...
    'Parent',pp2_p4,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[panel_size-70 10 60 30],...
    'String','Export',...
    'TooltipString','Export current axis to graphics file with given format',...
    'Callback',{@pushbutton_Callback,'exportFigure'}...
    );

% elements for pp3

pp3_p1 = uipanel('Tag','display_panel_line_panel',...
    'Parent',pp3,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10 mainPanelHeight-310 panel_size 290],...
    'Title','Line settings'...
    );
uicontrol('Tag','display_panel_line_text',...
    'Style','text',...
    'Parent',pp3_p1,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'FontAngle','Oblique',...
    'Units','Pixels',...
    'Position',[10 245 60 20],...
    'String','Line'...
    );
uicontrol('Tag','display_panel_line_popupmenu',...
    'Style','popupmenu',...
    'Parent',pp3_p1,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[80 245 panel_size-90 20],...
    'String','main|average pretrig NP|smoothed NP',...
    'Callback',{@popupmenu_Callback,'line'}...
    );
uicontrol('Tag','display_panel_linecolour_text',...
    'Style','text',...
    'Parent',pp3_p1,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10 208 60 20],...
    'String','Colour'...
    );
uicontrol('Tag','display_panel_linecoloursample_text',...
    'Style','text',...
    'Parent',pp3_p1,...
    'BackgroundColor',[0 0 0],...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[80 207 40 25],...
    'String',''...
    );
uicontrol('Tag','display_panel_linecolour_pushbutton',...
    'Style','pushbutton',...
    'Parent',pp3_p1,...
    'BackgroundColor',defaultBackground,...
    'Enable','on',...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[130 205 100 30],...
    'String','Palette...',...
    'Callback',{@pushbutton_Callback,'lineColourPalette'}...
    );
uicontrol('Tag','display_panel_linewidth_text',...
    'Style','text',...
    'Parent',pp3_p1,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10 175 60 20],...
    'String','Width'...
    );
uicontrol('Tag','display_panel_linewidth_edit',...
    'Style','edit',...
    'Parent',pp3_p1,...
    'BackgroundColor',[1 1 1],...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[80 175 50 25],...
    'String','1',...
    'Callback',{@edit_Callback,'linewidth'}...
    );
uicontrol('Tag','display_panel_linewidthunit_text',...
    'Style','text',...
    'Parent',pp3_p1,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'HorizontalAlignment','center',...
    'Units','Pixels',...
    'Position',[130 175 30 20],...
    'String','px'...
    );
uicontrol('Tag','display_panel_linestyle_text',...
    'Style','text',...
    'Parent',pp3_p1,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10 145 60 20],...
    'String','Style'...
    );
uicontrol('Tag','display_panel_linestyle_popupmenu',...
    'Style','popupmenu',...
    'Parent',pp3_p1,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[80 145 panel_size-90 20],...
    'String','solid|dashed|dotted|dash-dotted|none',...
    'Callback',{@popupmenu_Callback,'linestyle'}...
    );
uicontrol('Tag','display_panel_linemarker_text',...
    'Style','text',...
    'Parent',pp3_p1,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'FontAngle','Oblique',...
    'Units','Pixels',...
    'Position',[10 115 60 20],...
    'String','Marker'...
    );
uicontrol('Tag','display_panel_linemarker_popupmenu',...
    'Style','popupmenu',...
    'Parent',pp3_p1,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[80 115 panel_size-90 20],...
    'String',['none|plus|circle|asterisk|point|cross|square|diamond|'...
    'triangle up|triangle down|triangle right|triangle left|'...
    'pentagram|hexagram'],...
    'Callback',{@popupmenu_Callback,'linemarker'}...
    );
uicontrol('Tag','display_panel_markeredgecolour_text',...
    'Style','text',...
    'Parent',pp3_p1,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'HorizontalAlignment','Right',...
    'Units','Pixels',...
    'Position',[10 78 60 20],...
    'String','Edge'...
    );
uicontrol('Tag','display_panel_markeredgecolour_popupmenu',...
    'Style','popupmenu',...
    'Parent',pp3_p1,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[80 80 panel_size-160 20],...
    'String','auto|none|colour',...
    'Value',1,...
    'Callback',{@popupmenu_Callback,'markerEdgeColour'}...
    );
uicontrol('Tag','display_panel_markeredgecoloursample_text',...
    'Style','text',...
    'Parent',pp3_p1,...
    'BackgroundColor',[0 0 0],...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[165 77 35 25],...
    'String',''...
    );
uicontrol('Tag','display_panel_markeredgecolour_pushbutton',...
    'Style','pushbutton',...
    'Parent',pp3_p1,...
    'BackgroundColor',defaultBackground,...
    'Enable','on',...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[205 77 25 25],...
    'String','...',...
    'TooltipString',sprintf('%s\n%s',...
    'Open colour palette for specifying','marker edge colour'),...
    'Callback',{@pushbutton_Callback,'markerEdgeColourPalette'}...
    );
uicontrol('Tag','display_panel_markerfacecolour_text',...
    'Style','text',...
    'Parent',pp3_p1,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'HorizontalAlignment','Right',...
    'Units','Pixels',...
    'Position',[10 43 60 20],...
    'String','Face'...
    );
uicontrol('Tag','display_panel_markerfacecolour_popupmenu',...
    'Style','popupmenu',...
    'Parent',pp3_p1,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[80 45 panel_size-160 20],...
    'String','auto|none|colour',...
    'Value',2,...
    'Callback',{@popupmenu_Callback,'markerFaceColour'}...
    );
uicontrol('Tag','display_panel_markerfacecoloursample_text',...
    'Style','text',...
    'Parent',pp3_p1,...
    'BackgroundColor',[0 0 0],...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[165 42 35 25],...
    'String',''...
    );
uicontrol('Tag','display_panel_markerfacecolour_pushbutton',...
    'Style','pushbutton',...
    'Parent',pp3_p1,...
    'BackgroundColor',defaultBackground,...
    'Enable','on',...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[205 42 25 25],...
    'String','...',...
    'TooltipString',sprintf('%s\n%s',...
    'Open colour palette for specifying','marker face colour'),...
    'Callback',{@pushbutton_Callback,'markerFaceColourPalette'}...
    );
uicontrol('Tag','display_panel_markersize_text',...
    'Style','text',...
    'Parent',pp3_p1,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'HorizontalAlignment','Right',...
    'Units','Pixels',...
    'Position',[10 10 60 20],...
    'String','Size'...
    );
uicontrol('Tag','display_panel_markersize_edit',...
    'Style','edit',...
    'Parent',pp3_p1,...
    'BackgroundColor',[1 1 1],...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[80 10 50 25],...
    'String','6',...
    'Callback',{@edit_Callback,'markerSize'}...
    );
uicontrol('Tag','display_panel_markersizeunit_text',...
    'Style','text',...
    'Parent',pp3_p1,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'HorizontalAlignment','center',...
    'Units','Pixels',...
    'Position',[130 10 30 20],...
    'String','pt'...
    );
uicontrol('Tag','display_panel_markerdefaults_pushbutton',...
    'Style','pushbutton',...
    'Parent',pp3_p1,...
    'BackgroundColor',defaultBackground,...
    'Enable','on',...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[160 10 70 25],...
    'String','Default',...
    'TooltipString',sprintf('%s\n%s',...
    'Set marker settings (edge, face, size)','to default values.'),...
    'Callback',{@pushbutton_Callback,'markerDefaults'}...
    );

pp3_p2 = uipanel('Tag','areasettings_panel',...
    'Parent',pp3,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10 mainPanelHeight-410 mainPanelWidth-20 90],...
    'Title','Area settings'...
    );
uicontrol('Tag','areasettings_colour_text',...
    'Style','text',...
    'Parent',pp3_p2,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'HorizontalAlignment','Right',...
    'Units','Pixels',...
    'Position',[10 40 (mainPanelWidth-40)/4-10 20],...
    'String','Colour '...
    );
uicontrol('Tag','areasettings_coloursample_text',...
    'Style','text',...
    'Parent',pp3_p2,...
    'BackgroundColor',[0.5 0.5 1],...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10+(mainPanelWidth-40)/4 42 (mainPanelWidth-40)/4-10 25],...
    'String',''...
    );
uicontrol('Tag','areasettings_colour_pushbutton',...
    'Style','pushbutton',...
    'Parent',pp3_p2,...
    'BackgroundColor',defaultBackground,...
    'Enable','on',...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10+(mainPanelWidth-40)/4*2 40 (mainPanelWidth-40)/4*2 30],...
    'String','Palette...',...
    'Callback',{@pushbutton_Callback,'averageareaColourPalette'}...
    );
uicontrol('Tag','areasettings_alpha_text',...
    'Style','text',...
    'Parent',pp3_p2,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'HorizontalAlignment','Right',...
    'Units','Pixels',...
    'Position',[10 10 (mainPanelWidth-40)/4-10 20],...
    'String','Alpha '...
    );
uicontrol('Tag','areasettings_alpha_edit',...
    'Style','edit',...
    'Parent',pp3_p2,...
    'BackgroundColor',[1 1 1],...
    'FontUnit','Pixel','Fontsize',12,...
    'HorizontalAlignment','center',...
    'Units','Pixels',...
    'Position',[10+(mainPanelWidth-40)/4 10 (mainPanelWidth-40)/4-10 25],...
    'String','0.4',...
    'Enable','on',...
    'Callback',{@edit_Callback,'averageareaAlpha'}...
    );
uicontrol('Tag','areasettings_alpha_slider',...
    'Style', 'slider',...
	'Parent', pp3_p2, ...
    'Min',0,'Max',1,'Value',0.4,...
    'Position', [10+(mainPanelWidth-40)/4*2 10 (mainPanelWidth-40)/4*2 20],...
    'TooltipString','',...
    'Enable','on',...
    'Callback',{@slider_Callback,'averageareaAlpha'}...
    );

uicontrol('Tag','zoom_togglebutton',...
    'Style','togglebutton',...
	'Parent', hMainFigure, ...
    'BackgroundColor',defaultBackground,...
    'ForegroundColor',[0 0 0],...
    'FontUnit','Pixel','Fontsize',12,...
    'FontWeight','bold',...
    'String','+',...
    'TooltipString','Zoom',...
    'pos',[guiSize(1)-mainPanelWidth-20 30 25 25],...
    'Enable','on',...
    'Callback',{@togglebutton_Callback,'Zoom'}...
    );

uicontrol('Tag','help_pushbutton',...
    'Style','pushbutton',...
	'Parent', hMainFigure, ...
    'BackgroundColor',defaultBackground,...
    'ForegroundColor',[0 0 1],...
    'FontUnit','Pixel','Fontsize',12,...
    'FontWeight','bold',...
    'String','?',...
    'TooltipString','<html>Display help for how to operate the<br />MW Frequency Drift Analysis GUI</html>',...
    'pos',[guiSize(1)-mainPanelWidth+10 30 25 25],...
    'Enable','on',...
    'Callback',{@(~,~)trEPRgui_NetPolarisation_helpwindow} ...
    );


uicontrol('Tag','close_pushbutton',...
    'Style','pushbutton',...
	'Parent', hMainFigure, ...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'String','Close',...
    'TooltipString','Close MW Frequency Drift Analysis GUI',...
    'pos',[guiSize(1)-((mainPanelWidth)/3)-20 20 (mainPanelWidth)/3 40],...
    'Enable','on',...
    'Callback',{@pushbutton_Callback,'Close'}...
    );

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%  Initialization tasks
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% Read configuration for export formats (geometries) from ini file
exportFormatsConfigFile = fullfile(trEPRinfo('dir'),'figure','fig2file.ini');
exportFormats = trEPRiniFileRead(exportFormatsConfigFile);
% Set export formats (geometries)
set(hAxesExportFormat,'String',fieldnames(exportFormats));

% Store handles in guidata
guidata(hMainFigure,guihandles);

% Create appdata structure
ad = trEPRguiDataStructure('guiappdatastructure');

% Apply configuration
guiConfigApply(mfilename);
ad.configuration = getappdata(hMainFigure,'configuration');
ad.NP = ad.configuration.NP;

setappdata(hMainFigure,'data',ad.data);
setappdata(hMainFigure,'origdata',ad.origdata);
setappdata(hMainFigure,'configuration',ad.configuration);
setappdata(hMainFigure,'control',ad.control);
setappdata(hMainFigure,'NP',ad.NP);

% Make the GUI visible.
set(hMainFigure,'Visible','on');
trEPRmsg('Net Polarisation Analysis GUI window opened.','debug');

% Load data from Main GUI
mainGuiWindow = trEPRguiGetWindowHandle();
if (mainGuiWindow)
    admain = getappdata(mainGuiWindow);
    % Check for availability of necessary fields in appdata
    if (isfield(admain,'data') ~= 0)
        ad.data = admain.data;
        setappdata(hMainFigure,'data',ad.data);
    end
    if (isfield(admain,'control') ~= 0)
        ad.control = admain.control;
        ad.control.axis.mean = ad.configuration.axis.mean;
        ad.control.axis.stdev = ad.configuration.axis.stdev;
        ad.control.axis.grid = ad.configuration.axis.grid;
        setappdata(hMainFigure,'control',ad.control);
    end
    ad.control.axis.minmax = ad.configuration.axis.minmax;
    setappdata(hMainFigure,'control',ad.control);

    updateAxes();
    updateAnalysisPanel();
    updateSettingsPanel();
end

%updateAxes();

if (nargout == 1)
    varargout{1} = hMainFigure;
end

% Add keypress function to every element that can have one...
handles = findall(...
    allchild(hMainFigure),'style','pushbutton',...
    '-or','style','togglebutton',...
    '-or','style','edit',...
    '-or','style','listbox',...
    '-or','style','popupmenu');
for m=1:length(handles)
    set(handles(m),'KeyPressFcn',@keypress_Callback);
end

% Define colours for later use
colors = {...
    'b',[0 0 1]; ...
    'g',[0 1 0]; ...
    'r',[1 0 0]; ...
    'c',[0 1 1]; ...
    'm',[1 0 1]; ...
    'y',[1 1 0]; ...
    'k',[0 0 0]; ...
    'w',[1 1 1]; ...
    };


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%  Callbacks
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

function tbg_Callback(source,~)
    try 
        switchPanel(get(get(source,'SelectedObject'),'String'));
    catch exception
        trEPRexceptionHandling(exception)
    end
end

function edit_Callback(source,~,action)
    try
        if isempty(action)
            return;
        end

        value = str2double(strrep(get(source,'String'),',','.'));
                
        % Get appdata of main window
        mainWindow = trEPRguiGetWindowHandle(mfilename);
        ad = getappdata(mainWindow);
        gh = guihandles(mainWindow);
        
        filterTypes = cellstr(...
            get(gh.display_panel_smoothing_type_popupmenu,'String'));
        filterType = filterTypes{...
            get(gh.display_panel_smoothing_type_popupmenu,'Value')};
        
        active = ad.control.spectra.active;
        NP = sum(ad.data{active}.data);
        [~,x] = size(NP);
        
        switch lower(action)
            case 'smoothingindex'
                % Fix values: only integers >= 1
                if (str2double(get(source,'String')) < 1) || ...
                        isnan(str2double(get(source,'String')))
                    set(source,'String','1');
                elseif (str2double(get(source,'String')) > x)
                    set(source,'String',num2str(x));
                else
                    set(source,...
                        'String',...
                        num2str(round(str2double(get(source,'String')))));
                end
                
                % Set unit edit
                time = linspace(1,x,x);
                if (isfield(ad.data{active},'axes') ...
                        && isfield(ad.data{active}.axes,'x') ...
                        && isfield(ad.data{active}.axes.x,'values') ...
                        && not (isempty(ad.data{active}.axes.x.values)))
                    time = ad.data{active}.axes.x.values;
                end
                atomic = time(2)-time(1);
                set(gh.processing_panel_smoothing_unit_edit,...
                    'String',...
                    num2str(atomic*str2double(get(source,'String')))...
                    );
                
                ad.NP.smooth.window = ...
                    str2double(get(source,'String'));
                ad.NP.smooth.filterfun = ...
                    sprintf('trEPRfilter_%s',filterType);

                setappdata(mainWindow,'NP',ad.NP);
                updateAxes();
                return;                
            case 'smoothingunit'
                x = linspace(1,x,x);
                if (isfield(ad.data{active},'axes') ...
                        && isfield(ad.data{active}.axes,'x') ...
                        && isfield(ad.data{active}.axes.x,'values') ...
                        && not (isempty(ad.data{active}.axes.x.values)))
                    x = ad.data{active}.axes.x.values;
                end
                
                % Get "atomic" value
                atomic = x(2)-x(1);
                
                % Fix values: only those in range of the axis are allowed
                if (str2double(get(source,'String')) < atomic) || ...
                        isnan(str2double(get(source,'String')))
                    set(source,'String',num2str(atomic));
                elseif (str2double(get(source,'String')) > (atomic*length(x)))
                    set(source,'String',num2str(atomic*length(x)));
                else
                    set(source,...
                        'String',...
                        num2str(round(str2double(get(source,'String'))/atomic)*atomic)...
                        );
                end
                
                set(gh.processing_panel_smoothing_points_edit,...
                    'String',...
                    num2str(round(str2double(get(source,'String'))/atomic))...
                    );
                
                ad.NP.smooth.window = ...
                    round(str2double(get(source,'String'))/atomic);
                ad.NP.smooth.filterfun = ...
                    sprintf('trEPRfilter_%s',filterType);

                setappdata(mainWindow,'NP',ad.NP);
                updateAxes();
                return;                
            case 'linewidth'
                % Get line type
                lineTypes = cellstr(get(gh.display_panel_line_popupmenu,'String'));
                lineType = lineTypes{get(gh.display_panel_line_popupmenu,'Value')};
                switch lower(lineType)
                    case 'main'
                        ad.data{ad.control.spectra.active}.display.lines.data.width = value;
                        setappdata(mainWindow,'data',ad.data);
                    case 'average pretrig np'
                        ad.NP.line.width = value;
                        setappdata(mainWindow,'NP',ad.NP);
                    case 'smoothed np'
                        ad.NP.smooth.width = value;
                        setappdata(mainWindow,'NP',ad.NP);
                    otherwise
                        disp([mfilename ': pushbutton_Callback(): '...
                            'Unknown line type ' lineType]);
                end
                updateSettingsPanel();
                updateAxes();
                return;
            case 'markersize'
                % Get line type
                lineTypes = cellstr(get(gh.display_panel_line_popupmenu,'String'));
                lineType = lineTypes{get(gh.display_panel_line_popupmenu,'Value')};
                switch lower(lineType)
                    case 'main'
                        ad.data{ad.control.spectra.active}.display.lines.data.marker.size = ...
                            value;
                        setappdata(mainWindow,'data',ad.data);
                    case 'average pretrig np'
                        ad.NP.line.marker.size = value;
                        setappdata(mainWindow,'NP',ad.NP);
                    case 'smoothed np'
                        ad.NP.smooth.marker.size = value;
                        setappdata(mainWindow,'NP',ad.NP);
                    otherwise
                        disp([mfilename ': pushbutton_Callback(): '...
                            'Unknown line type ' lineType]);
                end
                updateSettingsPanel();
                updateAxes();
                return;
            case 'averageareaalpha'
                set(gh.areasettings_alpha_edit,'String',num2str(value));
                ad.NP.area.patch.alpha = value;
                setappdata(mainWindow,'NP',ad.NP);
                updateAxes();
            otherwise
                trEPRoptionUnknown(action);
        end
    catch exception
        trEPRexceptionHandling(exception)
    end
end

function togglebutton_Callback(source,~,action)
    try
        if isempty(action)
            return;
        end
        
        % Get appdata of main window
        mainWindow = trEPRguiGetWindowHandle(mfilename);
        ad = getappdata(mainWindow);

        % Get state of toggle button
        value = get(source,'Value');
        
        % For those togglebuttons who do more complicated stuff
        % Toggle button
        if value % If toggle switched ON
            switch lower(action)
                case 'measurepick'
                    % Switch off zoom
                    zoom(mainWindow,'off');
                    % Set pointer callback functions
                    set(mainWindow,...
                        'WindowButtonMotionFcn',@trackPointer);
                    set(mainWindow,...
                        'WindowButtonDownFcn',@switchMeasurePointer);
                    return;
                case 'zoom'
                    % Reset pointer callback functions
                    set(mainWindow,'WindowButtonMotionFcn','');
                    set(mainWindow,'WindowButtonDownFcn','');
                    % Reset other zoom toggle button
                    zoom(mainWindow,'on');
                    return;
                case 'gridx'
                    ad.control.axis.grid.x = 'on';
                    setappdata(mainWindow,'control',ad.control);
                    updateAxes();
                    return;
                case 'gridy'
                    ad.control.axis.grid.y = 'on';
                    setappdata(mainWindow,'control',ad.control);
                    updateAxes();
                    return;
                case 'gridminor'
                    ad.control.axis.grid.minor = 'on';
                    setappdata(mainWindow,'control',ad.control);
                    updateAxes();
                    return;
                case 'gridzero'
                    ad.control.axis.grid.zero.visible = 1;
                    setappdata(mainWindow,'control',ad.control);
                    updateAxes();
                    return;
                case 'mean'
                    ad.control.axis.mean = 1;
                    setappdata(mainWindow,'control',ad.control);
                    updateAxes();
                    return;
                case 'stdev'
                    ad.control.axis.stdev = 1;
                    setappdata(mainWindow,'control',ad.control);
                    updateAxes();
                    return;
                case 'minmax'
                    ad.control.axis.minmax = 1;
                    setappdata(mainWindow,'control',ad.control);
                    updateAxes();
                    return;
                otherwise
                    trEPRoptionUnknown(action);
                    return;
            end
        else % If toggle button switched OFF
            switch lower(action)
                case 'measurepick'
                    % Reset pointer callback functions
                    set(mainWindow,'WindowButtonMotionFcn','');
                    set(mainWindow,'WindowButtonDownFcn','');
                    return;
                case 'zoom'
                    zoom(mainWindow,'off');
                    return;
                case 'gridx'
                    ad.control.axis.grid.x = 'off';
                    setappdata(mainWindow,'control',ad.control);
                    updateAxes();
                    return;
                case 'gridy'
                    ad.control.axis.grid.y = 'off';
                    setappdata(mainWindow,'control',ad.control);
                    updateAxes();
                    return;
                case 'gridminor'
                    ad.control.axis.grid.minor = 'off';
                    setappdata(mainWindow,'control',ad.control);
                    updateAxes();
                    return;
                case 'gridzero'
                    ad.control.axis.grid.zero.visible = 0;
                    setappdata(mainWindow,'control',ad.control);
                    updateAxes();
                    return;
                case 'mean'
                    ad.control.axis.mean = 0;
                    setappdata(mainWindow,'control',ad.control);
                    updateAxes();
                    return;
                case 'stdev'
                    ad.control.axis.stdev = 0;
                    setappdata(mainWindow,'control',ad.control);
                    updateAxes();
                    return;
                case 'minmax'
                    ad.control.axis.minmax = 0;
                    setappdata(mainWindow,'control',ad.control);
                    updateAxes();
                    return;
                otherwise
                    trEPRoptionUnknown(action);
                    return;
            end
        end
    catch exception
        trEPRexceptionHandling(exception)
    end
end

function pushbutton_Callback(~,~,action)
    try
        if isempty(action)
            return;
        end
        
        % Get appdata and handles of main window
        mainWindow = trEPRguiGetWindowHandle(mfilename);
        ad = getappdata(mainWindow);
        % Get handles of main window
        gh = guihandles(mainWindow);

        % Make life easier
        active = ad.control.spectra.active;
        
        % Return immediately if there is no active dataset
        if isempty(active) || active == 0
            return;
        end

        % Get line type
        lineTypes = cellstr(get(gh.display_panel_line_popupmenu,'String'));
        lineType = lineTypes{get(gh.display_panel_line_popupmenu,'Value')};

        switch action
            case 'exportFigure'
                % Open new figure window and make it invisible
                newFig = figure('Visible','off');
                
                % Plot into new figure window
                updateAxes(newFig);
                
                % Get export format
                figExportFormats = cellstr(...
                    get(gh.display_panel_axesexport_format_popupmenu,'String'));
                exportFormat = figExportFormats{...
                    get(gh.display_panel_axesexport_format_popupmenu,'Value')};
                
                % Get file type to save to
                fileTypes = cellstr(...
                    get(gh.display_panel_axesexport_filetype_popupmenu,'String'));
                fileType = fileTypes{...
                    get(gh.display_panel_axesexport_filetype_popupmenu,'Value')};
                
                % Generate default file name if possible, be very defensive
                if ad.control.spectra.visible
                    [~,fileNameSuggested,~] = ...
                        fileparts(ad.data{active}.file.name);
                else
                    fileNameSuggested = '';
                end
                
                % Ask user for file name
                [fileName,pathName] = uiputfile(...
                    sprintf('*.%s',fileType),...
                    'Get filename to export figure to',...
                    [fileNameSuggested '-NetPolarisationPlot']);
                % If user aborts process, return
                if fileName == 0
                    close(newFig);
                    return;
                end
                % Create filename with full path
                fileName = fullfile(pathName,fileName);
                
                % Save figure, depending on settings for file type and format
                status = fig2file(newFig,fileName,...
                    'fileType',fileType,'exportFormat',exportFormat);
                if status
                    trEPRmsg(status);
                end
                
                % Close figure window
                close(newFig);
                return;
            case 'lineColourPalette'
                switch lower(lineType)
                    case 'main'
                        if ischar(ad.data{active}.display.lines.data.color)
                            ad.data{active}.display.lines.data.color = colors{...
                                strcmpi(ad.data{active}.display.lines.data.color,...
                                colors(:,1)),2};
                        end
                        ad.data{active}.display.lines.data.color = uisetcolor(...
                            ad.data{active}.display.lines.data.color,...
                            'Set line colour');
                        setappdata(mainWindow,'data',ad.data);
                    case 'average pretrig np'
                        ad.NP.line.color = uisetcolor(...
                            ad.NP.line.color,...
                            'Set average frequency line colour');
                        setappdata(mainWindow,'NP',ad.NP);
                    case 'smoothed np'
                        ad.NP.smooth.color = uisetcolor(...
                            ad.NP.line.color,...
                            'Set average frequency line colour');
                        setappdata(mainWindow,'NP',ad.NP);
                    otherwise
                        disp([mfilename ': pushbutton_Callback(): '...
                            'Unknown line type ' lineType]);
                end
                updateSettingsPanel();
                updateAxes();
                return;
            case 'markerEdgeColourPalette'
                switch lower(lineType)
                    case 'main'
                        if ischar(ad.data{active}.display.lines.data.marker.edgeColor)
                            ad.data{active}.display.lines.data.marker.edgeColor = colors{...
                                strcmpi(ad.data{active}.display.lines.data.marker.edgeColor,...
                                colors(:,1)),2};
                        end
                        newColour = uisetcolor(...
                            ad.data{active}.display.lines.data.marker.edgeColor,...
                            'Set line marker edge colour');
                        if isnumeric(newColour) && length(newColour) == 3
                            ad.data{active}.display.lines.data.marker.edgeColor = newColour;
                            setappdata(mainWindow,'data',ad.data);
                        end
                    case 'average pretrig np'
                        if ischar(ad.NP.line.marker.edgeColor)
                            if length(ad.NP.line.marker.edgeColor) == 1
                                ad.NP.line.marker.edgeColor = colors{...
                                    strcmpi(ad.data{active}.display.lines.data.marker.edgeColor,...
                                    colors(:,1)),2};
                            else
                                ad.NP.line.marker.edgeColor = [];
                            end
                        end
                        newColour = uisetcolor(...
                            ad.NP.line.marker.edgeColor,...
                            'Set average line marker edge colour');
                        if isnumeric(newColour) && length(newColour) == 3
                            ad.NP.line.marker.edgeColor = newColour;
                            setappdata(mainWindow,'NP',ad.NP);
                        end
                    case 'smoothed np'
                        if ischar(ad.NP.smooth.marker.edgeColor)
                            if length(ad.NP.smooth.marker.edgeColor) == 1
                                ad.NP.smooth.marker.edgeColor = colors{...
                                    strcmpi(ad.data{active}.smooth.marker.edgeColor,...
                                    colors(:,1)),2};
                            else
                                ad.NP.smooth.marker.edgeColor = [];
                            end
                        end
                        newColour = uisetcolor(...
                            ad.NP.smooth.marker.edgeColor,...
                            'Set smoothed NP line marker edge colour');
                        if isnumeric(newColour) && length(newColour) == 3
                            ad.NP.smooth.marker.edgeColor = newColour;
                            setappdata(mainWindow,'NP',ad.NP);
                        end
                    otherwise
                        disp([mfilename ': pushbutton_Callback(): '...
                            'Unknown line type ' lineType]);
                end
                updateSettingsPanel();
                updateAxes();
                return;
            case 'markerFaceColourPalette'
                switch lower(lineType)
                    case 'main'
                        if ischar(ad.data{active}.display.lines.data.marker.faceColor)
                            ad.data{active}.display.lines.data.marker.faceColor = colors{...
                                strcmpi(ad.data{active}.display.lines.data.marker.faceColor,...
                                colors(:,1)),2};
                        end
                        newColour = uisetcolor(...
                            ad.data{active}.display.lines.data.marker.faceColor,...
                            'Set MFoff line marker face colour');
                        if isnumeric(newColour) && length(newColour) == 3
                            ad.data{active}.display.lines.data.marker.faceColor = newColour;
                            setappdata(mainWindow,'data',ad.data);
                        end
                    case 'average pretrig np'
                        if ischar(ad.NP.line.marker.faceColor)
                            if length(ad.NP.line.marker.edgeColor) == 1
                                ad.NP.line.marker.faceColor = colors{...
                                    strcmpi(ad.NP.line.marker.faceColor,...
                                    colors(:,1)),2};
                            else
                                ad.NP.line.marker.faceColor = [];
                            end
                        end
                        newColour = uisetcolor(...
                            ad.NP.line.marker.faceColor,...
                            'Set MFoff line marker face colour');
                        if isnumeric(newColour) && length(newColour) == 3
                            ad.NP.line.marker.faceColor = newColour;
                            setappdata(mainWindow,'NP',ad.NP);
                        end
                    case 'smoothed np'
                        if ischar(ad.NP.smooth.marker.faceColor)
                            if length(ad.NP.smooth.marker.edgeColor) == 1
                                ad.NP.smooth.marker.faceColor = colors{...
                                    strcmpi(ad.NP.smooth.marker.faceColor,...
                                    colors(:,1)),2};
                            else
                                ad.NP.smooth.marker.faceColor = [];
                            end
                        end
                        newColour = uisetcolor(...
                            ad.NP.smooth.marker.faceColor,...
                            'Set smoothed NP line marker face colour');
                        if isnumeric(newColour) && length(newColour) == 3
                            ad.NP.smooth.marker.faceColor = newColour;
                            setappdata(mainWindow,'NP',ad.NP);
                        end
                    otherwise
                        disp([mfilename ': pushbutton_Callback(): '...
                            'Unknown line type ' lineType]);
                end
                updateSettingsPanel();
                updateAxes();
                return;
            case 'markerDefaults'
                switch lower(lineType)
                    case 'main'
                        ad.data{active}.display.lines.data.marker.type = 'none';
                        ad.data{active}.display.lines.data.marker.edgeColor = 'auto';
                        ad.data{active}.display.lines.data.marker.faceColor = 'none';
                        ad.data{active}.display.lines.data.marker.size = 6;
                        setappdata(mainWindow,'data',ad.data);
                    case 'average pretrig np'
                        ad.NP.line.marker.type = 'none';
                        ad.NP.line.marker.edgeColor = 'auto';
                        ad.NP.line.marker.faceColor = 'none';
                        ad.NP.line.marker.size = 6;
                        setappdata(mainWindow,'NP',ad.NP);
                    case 'smoothed np'
                        ad.NP.smooth.marker.type = 'none';
                        ad.NP.smooth.marker.edgeColor = 'auto';
                        ad.NP.smooth.marker.faceColor = 'none';
                        ad.NP.smooth.marker.size = 6;
                        setappdata(mainWindow,'NP',ad.NP);
                    otherwise
                        disp([mfilename ': pushbutton_Callback(): '...
                            'Unknown line type ' lineType]);
                end
                updateSettingsPanel();
                updateAxes();
                return;                
            case 'averageareaColourPalette'
                ad.NP.area.patch.color = uisetcolor(...
                    ad.NP.area.patch.color,'Set std. dev. area colour');
                setappdata(mainWindow,'NP',ad.NP);
                updateSettingsPanel();
                updateAxes();
                return;
            case 'avglineColourPalette'
                ad.NP.line.color = uisetcolor(...
                    ad.NP.line.color,'Set mean MW frequency line colour');
                setappdata(mainWindow,'NP',ad.NP);
                updateSettingsPanel();
                updateAxes();
                return;
            case 'Close'
                % Look for ACC GUI Help window and if its there, close as
                % well
                hHelpWindow = ...
                    findobj('Tag','trEPRgui_NetPolarisation_helpwindow');
                if ishandle(hHelpWindow)
                    delete(hHelpWindow);
                end
                delete(trEPRguiGetWindowHandle(mfilename));
                trEPRmsg('Net polarisation analysis GUI window closed',...
                    'debug');
            otherwise
                trEPRoptionUnknown(action);
                return;
        end
    catch exception
        trEPRexceptionHandling(exception)
    end
end

function popupmenu_Callback(source,~,action)
    try
        if isempty(action)
            return;
        end
        
        mainWindow = trEPRguiGetWindowHandle(mfilename);
        % Get appdata and handles of main window
        ad = getappdata(mainWindow);
        gh = guihandles(mainWindow);

        % Get line type
        lineTypes = cellstr(get(gh.display_panel_line_popupmenu,'String'));
        lineType = lineTypes{get(gh.display_panel_line_popupmenu,'Value')};
        
        % Get value
        values = cellstr(get(source,'String'));
        value = values{get(source,'Value')};

        switch action
            case 'line'
                updateSettingsPanel();
            case 'linestyle'
                switch lower(lineType)
                    case 'main'
                        active = ad.control.spectra.active;
                        switch value
                            case 'solid'
                                ad.data{active}.display.lines.data.style = '-';
                            case 'dashed'
                                ad.data{active}.display.lines.data.style = '--';
                            case 'dotted'
                                ad.data{active}.display.lines.data.style = ':';
                            case 'dash-dotted'
                                ad.data{active}.display.lines.data.style = '-.';
                            case 'none'
                                ad.data{active}.display.lines.data.style = 'none';
                            otherwise
                                % That shall never happen
                                disp([mfilename ': popupmenu_Callback(): '...
                                    'Unknown line style ' lineStyle]);
                        end
                        setappdata(mainWindow,'data',ad.data);
                    case 'average pretrig np'
                        switch value
                            case 'solid'
                                ad.NP.line.style = '-';
                            case 'dashed'
                                ad.NP.line.style = '--';
                            case 'dotted'
                                ad.NP.line.style = ':';
                            case 'dash-dotted'
                                ad.NP.line.style = '-.';
                            case 'none'
                                ad.NP.line.style = 'none';
                            otherwise
                                % That shall never happen
                                disp([mfilename ': popupmenu_Callback(): '...
                                    'Unknown line style ' lineStyle]);
                        end
                        setappdata(mainWindow,'NP',ad.NP);
                    case 'smoothed np'
                        switch value
                            case 'solid'
                                ad.NP.smooth.style = '-';
                            case 'dashed'
                                ad.NP.smooth.style = '--';
                            case 'dotted'
                                ad.NP.smooth.style = ':';
                            case 'dash-dotted'
                                ad.NP.smooth.style = '-.';
                            case 'none'
                                ad.NP.smooth.style = 'none';
                            otherwise
                                % That shall never happen
                                disp([mfilename ': popupmenu_Callback(): '...
                                    'Unknown line style ' lineStyle]);
                        end
                        setappdata(mainWindow,'NP',ad.NP);
                    otherwise
                        disp([mfilename ': popupmenu_Callback(): '...
                            'Unknown line type ' lineType]);
                end
                updateAxes();
            case 'linemarker'
                switch lower(lineType)
                    case 'main'
                        active = ad.control.spectra.active;
                        switch value
                            case 'none'
                                ad.data{active}.display.lines.data.marker.type = 'none';
                            case 'plus'
                                ad.data{active}.display.lines.data.marker.type = '+';
                            case 'circle'
                                ad.data{active}.display.lines.data.marker.type = 'o';
                            case 'asterisk'
                                ad.data{active}.display.lines.data.marker.type = '*';
                            case 'point'
                                ad.data{active}.display.lines.data.marker.type = '.';
                            case 'cross'
                                ad.data{active}.display.lines.data.marker.type = 'x';
                            case 'square'
                                ad.data{active}.display.lines.data.marker.type = 's';
                            case 'diamond'
                                ad.data{active}.display.lines.data.marker.type = 'd';
                            case 'triangle up'
                                ad.data{active}.display.lines.data.marker.type = '^';
                            case 'triangle down'
                                ad.data{active}.display.lines.data.marker.type = 'v';
                            case 'triangle right'
                                ad.data{active}.display.lines.data.marker.type = '<';
                            case 'triangle left'
                                ad.data{active}.display.lines.data.marker.type = '>';
                            case 'pentagram'
                                ad.data{active}.display.lines.data.marker.type = 'p';
                            case 'hexagram'
                                ad.data{active}.display.lines.data.marker.type = 'h';
                            otherwise
                                % That shall never happen
                                disp([mfilename ': popupmenu_Callback(): '...
                                    'Unknown line marker ' lineMarker]);
                        end
                        setappdata(mainWindow,'data',ad.data);
                    case 'average pretrig np'
                        switch value
                            case 'none'
                                ad.NP.line.marker.type = 'none';
                            case 'plus'
                                ad.NP.line.marker.type = '+';
                            case 'circle'
                                ad.NP.line.marker.type = 'o';
                            case 'asterisk'
                                ad.NP.line.marker.type = '*';
                            case 'point'
                                ad.NP.line.marker.type = '.';
                            case 'cross'
                                ad.NP.line.marker.type = 'x';
                            case 'square'
                                ad.NP.line.marker.type = 's';
                            case 'diamond'
                                ad.NP.line.marker.type = 'd';
                            case 'triangle up'
                                ad.NP.line.marker.type = '^';
                            case 'triangle down'
                                ad.NP.line.marker.type = 'v';
                            case 'triangle right'
                                ad.NP.line.marker.type = '<';
                            case 'triangle left'
                                ad.NP.line.marker.type = '>';
                            case 'pentagram'
                                ad.NP.line.marker.type = 'p';
                            case 'hexagram'
                                ad.NP.line.marker.type = 'h';
                            otherwise
                                % That shall never happen
                                disp([mfilename ': popupmenu_Callback(): '...
                                    'Unknown line marker ' lineMarker]);
                        end
                        setappdata(mainWindow,'NP',ad.NP);
                    case 'smoothed np'
                        switch value
                            case 'none'
                                ad.NP.smooth.marker.type = 'none';
                            case 'plus'
                                ad.NP.smooth.marker.type = '+';
                            case 'circle'
                                ad.NP.smooth.marker.type = 'o';
                            case 'asterisk'
                                ad.NP.smooth.marker.type = '*';
                            case 'point'
                                ad.NP.smooth.marker.type = '.';
                            case 'cross'
                                ad.NP.smooth.marker.type = 'x';
                            case 'square'
                                ad.NP.smooth.marker.type = 's';
                            case 'diamond'
                                ad.NP.smooth.marker.type = 'd';
                            case 'triangle up'
                                ad.NP.smooth.marker.type = '^';
                            case 'triangle down'
                                ad.NP.smooth.marker.type = 'v';
                            case 'triangle right'
                                ad.NP.smooth.marker.type = '<';
                            case 'triangle left'
                                ad.NP.smooth.marker.type = '>';
                            case 'pentagram'
                                ad.NP.smooth.marker.type = 'p';
                            case 'hexagram'
                                ad.NP.smooth.marker.type = 'h';
                            otherwise
                                % That shall never happen
                                disp([mfilename ': popupmenu_Callback(): '...
                                    'Unknown line marker ' lineMarker]);
                        end
                        setappdata(mainWindow,'NP',ad.NP);
                    otherwise
                        disp([mfilename ': popupmenu_Callback(): '...
                            'Unknown line type ' lineType]);
                end
                updateAxes();
            case 'markerEdgeColour'
                switch lower(lineType)
                    case 'main'
                        active = ad.control.spectra.active;
                        if strcmpi(value,'colour')
                            ad.data{active}.display.lines.data.marker.edgeColor = ...
                                ad.data{active}.display.lines.data.color;
                        else
                            ad.data{active}.display.lines.data.marker.edgeColor = value;
                        end
                        setappdata(mainWindow,'data',ad.data);
                    case 'average pretrig np'
                    case 'smoothed np'
                        if strcmpi(value,'colour')
                            ad.NP.smooth.marker.edgeColor = ...
                                ad.NP.smooth.color;
                        else
                            ad.NP.smooth.marker.edgeColor = value;
                        end
                        setappdata(mainWindow,'NP',ad.NP);
                    otherwise
                        disp([mfilename ': popupmenu_Callback(): '...
                            'Unknown line type ' lineType]);
                end
                updateAxes();
            case 'markerFaceColour'
                switch lower(lineType)
                    case 'main'
                        active = ad.control.spectra.active;
                        if strcmpi(value,'colour')
                            ad.data{active}.display.lines.data.marker.faceColor = ...
                                ad.data{active}.display.lines.data.color;
                        else
                            ad.data{active}.display.lines.data.marker.faceColor = value;
                        end
                        setappdata(mainWindow,'data',ad.data);
                    case 'average pretrig np'
                    case 'smoothed np'
                        if strcmpi(value,'colour')
                            ad.NP.smooth.marker.faceColor = ...
                                ad.NP.smooth.color;
                        else
                            ad.NP.smooth.marker.faceColor = value;
                        end
                        setappdata(mainWindow,'NP',ad.NP);
                    otherwise
                        disp([mfilename ': popupmenu_Callback(): '...
                            'Unknown line type ' lineType]);
                end
                updateAxes();
            otherwise
                trEPRoptionUnknown(action);
                return;
        end
    catch exception
        trEPRexceptionHandling(exception)
    end
end

function slider_Callback(source,~,action)
    try
        if isempty(action)
            return;
        end
        
        % Get appdata of main window
        mainWindow = trEPRguiGetWindowHandle(mfilename);
        ad = getappdata(mainWindow);
        
        % Get handles of main window
        gh = guihandles(mainWindow);

        % Get state of toggle button
        value = get(source,'Value');
        
        switch lower(action)
            case 'averageareaalpha'
                set(gh.areasettings_alpha_edit,'String',num2str(value));
                ad.NP.area.patch.alpha = value;
                setappdata(mainWindow,'NP',ad.NP);
                updateAxes();
            otherwise
                trEPRoptionUnknown(action);
        end
    catch exception
        trEPRexceptionHandling(exception)
    end
end

function keypress_Callback(src,evt)
    try
        if isempty(evt.Character) && isempty(evt.Key)
            % In case "Character" is the empty string, i.e. only modifier
            % key was pressed...
            return;
        end
        mainWindow = trEPRguiGetWindowHandle(mfilename);
        % Get appdata from ACC GUI
        ad = getappdata(mainWindow);
        if ~isempty(evt.Modifier)
            if (strcmpi(evt.Modifier{1},'command')) || ...
                    (strcmpi(evt.Modifier{1},'control'))
                switch evt.Key
                    case 'w'
                        pushbutton_Callback(src,evt,'Close')
                        return;
                    case '1'
                        switchPanel('Analysis');
                        return;
                    case '2'
                        switchPanel('Display');
                        return;
                    case '3'
                        switchPanel('Settings');
                        return;
                    case 'x'
                        ad.control.axis.displayType = '1D along x';
                        setappdata(mainWindow,'control',ad.control);
                        updateAxes();
                        return;
                    case 'y'
                        ad.control.axis.displayType = '1D along y';
                        setappdata(mainWindow,'control',ad.control);
                        updateAxes();
                        return;
                    case 'z'
                        ad.control.axis.displayType = '2D plot';
                        setappdata(mainWindow,'control',ad.control);
                        updateAxes();
                        return;
                end
            end
        end
        switch evt.Key
            case 'f1'
                trEPRgui_NetPolarisation_helpwindow();
                return;
            otherwise
%                 disp(evt);
%                 fprintf('       Caller: %i\n\n',src);
                return;
        end
    catch exception
        trEPRexceptionHandling(exception)
    end
end


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%  Utility functions
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

function switchPanel(panelName)
    try
        panels = [pp1 pp2 pp3];
        buttons = [tb1 tb2 tb3];
        switch lower(panelName)
            case 'analysis'
                set(panels,'Visible','off');
                set(buttons,'Value',0);
                set(pp1,'Visible','on');
                set(tb1,'Value',1);
            case 'display'
                set(panels,'Visible','off');
                set(buttons,'Value',0);
                set(pp2,'Visible','on');
                set(tb2,'Value',1);
            case 'settings'
                set(panels,'Visible','off');
                set(buttons,'Value',0);
                set(pp3,'Visible','on');
                set(tb3,'Value',1);
            otherwise
                trEPRoptionUnknown(panelName,'panel');
        end
    catch exception
        trEPRexceptionHandling(exception)
    end 
end

function updateAnalysisPanel()
    try
        mainWindow = trEPRguiGetWindowHandle(mfilename);
        % Get appdata from ACC GUI
        ad = getappdata(mainWindow);
        
        % Get handles from main window
        gh = guidata(mainWindow);
        
        active = ad.control.spectra.active;
        if isempty(active) || active == 0
            return;
        end
        
        % Set pretrigger statistics subpanel fields
        NP = sum(getData(ad.data{active}));
        PTNP = NP(1:find(ad.data{active}.axes.x.values>0,1)-1);
        
        NP = NP(find(ad.data{active}.axes.x.values>0,1):end);

        set(gh.pretrigpol_min_edit,'String',num2str(min(PTNP),'%10.6f'));
        set(gh.pretrigpol_max_edit,'String',num2str(max(PTNP),'%10.6f'));
        set(gh.pretrigpol_delta_edit,...
            'String',num2str(max(PTNP)-min(PTNP),7));
        set(gh.pretrigpol_avg_edit,'String',num2str(mean(PTNP),'%10.6f'));
        set(gh.pretrigpol_stdev_edit,'String',num2str(std(PTNP,1),'%10.6f'));
        
        % Set net polarisation subpanel fields
        [minNPval,minNPind] = min(NP);
        set(gh.netpol_min_edit,'String',num2str(minNPval));
        set(gh.netpol_minpos_edit,'String',...
            num2str(ad.data{active}.axes.x.values(minNPind+...
            find(ad.data{active}.axes.x.values>0,1))));
        [maxNPval,maxNPind] = max(NP);
        set(gh.netpol_max_edit,'String',num2str(maxNPval));
        set(gh.netpol_maxpos_edit,'String',...
            num2str(ad.data{active}.axes.x.values(maxNPind+...
            find(ad.data{active}.axes.x.values>0,1))));
        
        % Set unit fields
%         set(findall(mainWindow,'-regexp','Tag','mwfrequency.*unit_edit'),...
%             'String',ad.data{active}.parameters.bridge.MWfrequency.unit);
%         set(findall(mainWindow,'-regexp','Tag','field.*unit_edit'),...
%             'String',ad.data{active}.axes.y.unit);
        
        % Set background of deviation fields accordingly
        if minNPval < (min(PTNP))
            set([gh.netpol_min_edit,gh.netpol_minpos_edit],...
                'BackgroundColor',[0.7 0.9 1]);
        elseif minNPval > (min(PTNP))
            set([gh.netpol_min_edit,gh.netpol_minpos_edit],...
                'Background',[1 0.8 0.8]);
        else
            set([gh.netpol_min_edit,gh.netpol_minpos_edit],...
                'Background',[0.8 1 0.8]);
        end
        if maxNPval > (max(PTNP))
            set([gh.netpol_max_edit,gh.netpol_maxpos_edit],...
                'BackgroundColor',[1 0.8 0.8]);
        elseif maxNPval < (max(PTNP))
            set([gh.netpol_max_edit,gh.netpol_maxpos_edit],...
                'Background',[0.7 0.9 1]);
        else
            set([gh.netpol_max_edit,gh.netpol_maxpos_edit],...
                'Background',[0.8 1 0.8]);
        end
    catch exception
        trEPRexceptionHandling(exception)
    end
end

function updateSettingsPanel(varargin)
    try
        mainWindow = trEPRguiGetWindowHandle(mfilename);
        % Get appdata and handles from main window
        ad = getappdata(mainWindow);
        gh = guidata(mainWindow);
        
        active = ad.control.spectra.active;
        if isempty(active) || active == 0
            return;
        end
               
        if nargin && strcmpi('defaults',varargin{1})
            % Reset display settings
            ad.control.axis.grid.x = ad.configuration.axis.grid.x;
            ad.control.axis.grid.y = ad.configuration.axis.grid.y;
            ad.control.axis.grid.minor = ad.configuration.axis.grid.minor;
            ad.control.axis.grid.zero = ad.configuration.axis.grid.zero;
            % Reset NP settings
            ad.NP.area.patch.color = ad.configuration.NP.area.patch.color;
            ad.NP.area.patch.alpha = ad.configuration.NP.area.patch.alpha;
            ad.NP.line.color = ad.configuration.NP.line.color;
            ad.NP.line.width = ad.configuration.NP.line.width;
            ad.NP.line.style = ad.configuration.NP.line.style;
            setappdata(mainWindow,'NP',ad.NP);
            setappdata(mainWindow,'control',ad.control);
        end
        
        set(gh.areasettings_coloursample_text,'Background',...
            ad.NP.area.patch.color);
        set(gh.areasettings_alpha_edit,'String',...
            num2str(ad.NP.area.patch.alpha));
        set(gh.areasettings_alpha_slider,'Value',...
            ad.NP.area.patch.alpha);

        % Get line type
        lineTypes = cellstr(get(gh.display_panel_line_popupmenu,'String'));
        lineType = lineTypes{get(gh.display_panel_line_popupmenu,'Value')};

        lineStyles = {'-','--',':','-.','none'};
        lineMarkers = {'none','+','o','*','.','x','s','d','^','v','>','<','p','h'};

        switch lower(lineType)
            case 'main'
                set(gh.display_panel_linecoloursample_text,'Background',...
                    ad.data{active}.display.lines.data.color);
                set(gh.display_panel_linewidth_edit,'String',...
                    num2str(ad.data{active}.display.lines.data.width));
                % Set line style
                lineStyle = ad.data{active}.display.lines.data.style;
                for k=1:length(lineStyles)
                    if strcmp(lineStyles{k},lineStyle)
                        lineStyleIndex = k;
                    end
                end
                set(gh.display_panel_linestyle_popupmenu,'Value',lineStyleIndex);
                
                % Set line marker type
                lineMarker = ad.data{active}.display.lines.data.marker.type;
                for k=1:length(lineMarkers)
                    if strcmp(lineMarkers{k},lineMarker)
                        lineMarkerIndex = k;
                    end
                end
                set(gh.display_panel_linemarker_popupmenu,'Value',lineMarkerIndex);
                % Set line marker edge colour
                lineMarkerEdgeColor = ad.data{active}.display.lines.data.marker.edgeColor;
                lineMarkerEdgeColorPopupmenuValues = ...
                    cellstr(get(gh.display_panel_markeredgecolour_popupmenu,'String'));
                if ischar(lineMarkerEdgeColor) && length(lineMarkerEdgeColor)>1
                    set(gh.display_panel_markeredgecolour_popupmenu,'Value',...
                        find(strcmpi(lineMarkerEdgeColor,...
                        lineMarkerEdgeColorPopupmenuValues)));
                    switch lineMarkerEdgeColor
                        case 'none'
                            set(gh.display_panel_markeredgecoloursample_text,...
                                'BackgroundColor',get(mainWindow,'Color'))
                        case 'auto'
                            set(gh.display_panel_markeredgecoloursample_text,...
                                'BackgroundColor',ad.data{active}.display.lines.data.color);
                    end
                else
                    set(gh.display_panel_markeredgecolour_popupmenu,'Value',...
                        find(strcmpi('colour',lineMarkerEdgeColorPopupmenuValues)));
                    set(gh.display_panel_markeredgecoloursample_text,...
                        'BackgroundColor',ad.data{active}.display.lines.data.marker.edgeColor);
                end
                % Set line marker face colour
                lineMarkerFaceColor = ad.data{active}.display.lines.data.marker.faceColor;
                lineMarkerFaceColorPopupmenuValues = ...
                    cellstr(get(gh.display_panel_markerfacecolour_popupmenu,'String'));
                if ischar(lineMarkerFaceColor) && length(lineMarkerFaceColor)>1
                    set(gh.display_panel_markerfacecolour_popupmenu,'Value',...
                        find(strcmpi(lineMarkerFaceColor,...
                        lineMarkerFaceColorPopupmenuValues)));
                    switch lineMarkerFaceColor
                        case 'none'
                            set(gh.display_panel_markerfacecoloursample_text,...
                                'BackgroundColor',get(mainWindow,'Color'))
                        case 'auto'
                            set(gh.display_panel_markerfacecoloursample_text,...
                                'BackgroundColor',get(gca,'Color'));
                    end
                else
                    set(gh.display_panel_markerfacecolour_popupmenu,'Value',...
                        find(strcmpi('colour',lineMarkerFaceColorPopupmenuValues)));
                    set(gh.display_panel_markerfacecoloursample_text,...
                        'BackgroundColor',ad.data{active}.display.lines.data.marker.faceColor);
                end

                % Set line marker size
                set(gh.display_panel_markersize_edit,'String',...
                    num2str(ad.data{active}.display.lines.data.marker.size));
            case 'average pretrig np'
                set(gh.display_panel_linecoloursample_text,'Background',...
                    ad.NP.line.color);
                set(gh.display_panel_linewidth_edit,'String',...
                    num2str(ad.NP.line.width));
                % Set line style
                lineStyle = ad.NP.line.style;
                for k=1:length(lineStyles)
                    if strcmp(lineStyles{k},lineStyle)
                        lineStyleIndex = k;
                    end
                end
                set(gh.display_panel_linestyle_popupmenu,'Value',lineStyleIndex);
                
                % Set line marker type
                lineMarker = ad.NP.line.marker.type;
                for k=1:length(lineMarkers)
                    if strcmp(lineMarkers{k},lineMarker)
                        lineMarkerIndex = k;
                    end
                end
                set(gh.display_panel_linemarker_popupmenu,'Value',lineMarkerIndex);

                % Set line marker edge colour
                lineMarkerEdgeColor = ad.NP.line.marker.edgeColor;
                lineMarkerEdgeColorPopupmenuValues = ...
                    cellstr(get(gh.display_panel_markeredgecolour_popupmenu,'String'));
                if ischar(lineMarkerEdgeColor) && length(lineMarkerEdgeColor)>1
                    set(gh.display_panel_markeredgecolour_popupmenu,'Value',...
                        find(strcmpi(lineMarkerEdgeColor,...
                        lineMarkerEdgeColorPopupmenuValues)));
                    switch lineMarkerEdgeColor
                        case 'none'
                            set(gh.display_panel_markeredgecoloursample_text,...
                                'BackgroundColor',get(mainWindow,'Color'))
                        case 'auto'
                            set(gh.display_panel_markeredgecoloursample_text,...
                                'BackgroundColor',ad.NP.line.color);
                    end
                else
                    set(gh.display_panel_markeredgecolour_popupmenu,'Value',...
                        find(strcmpi('colour',lineMarkerEdgeColorPopupmenuValues)));
                    set(gh.display_panel_markeredgecoloursample_text,...
                        'BackgroundColor',ad.NP.line.marker.edgeColor);
                end
                % Set line marker face colour
                lineMarkerFaceColor = ad.NP.line.marker.faceColor;
                lineMarkerFaceColorPopupmenuValues = ...
                    cellstr(get(gh.display_panel_markerfacecolour_popupmenu,'String'));
                if ischar(lineMarkerFaceColor) && length(lineMarkerFaceColor)>1
                    set(gh.display_panel_markerfacecolour_popupmenu,'Value',...
                        find(strcmpi(lineMarkerFaceColor,...
                        lineMarkerFaceColorPopupmenuValues)));
                    switch lineMarkerFaceColor
                        case 'none'
                            set(gh.display_panel_markerfacecoloursample_text,...
                                'BackgroundColor',get(mainWindow,'Color'))
                        case 'auto'
                            set(gh.display_panel_markerfacecoloursample_text,...
                                'BackgroundColor',get(gca,'Color'));
                    end
                else
                    set(gh.display_panel_markerfacecolour_popupmenu,'Value',...
                        find(strcmpi('colour',lineMarkerFaceColorPopupmenuValues)));
                    set(gh.display_panel_markerfacecoloursample_text,...
                        'BackgroundColor',ad.NP.line.marker.faceColor);
                end
                % Set line marker size
                set(gh.display_panel_markersize_edit,'String',...
                    num2str(ad.NP.line.marker.size));
            case 'smoothed np'
                set(gh.display_panel_linecoloursample_text,'Background',...
                    ad.NP.smooth.color);
                set(gh.display_panel_linewidth_edit,'String',...
                    num2str(ad.NP.smooth.width));
                % Set line style
                lineStyle = ad.NP.smooth.style;
                for k=1:length(lineStyles)
                    if strcmp(lineStyles{k},lineStyle)
                        lineStyleIndex = k;
                    end
                end
                set(gh.display_panel_linestyle_popupmenu,'Value',lineStyleIndex);
                
                % Set line marker type
                lineMarker = ad.NP.smooth.marker.type;
                for k=1:length(lineMarkers)
                    if strcmp(lineMarkers{k},lineMarker)
                        lineMarkerIndex = k;
                    end
                end
                set(gh.display_panel_linemarker_popupmenu,'Value',lineMarkerIndex);
                % Set line marker edge colour
                lineMarkerEdgeColor = ad.NP.smooth.marker.edgeColor;
                lineMarkerEdgeColorPopupmenuValues = ...
                    cellstr(get(gh.display_panel_markeredgecolour_popupmenu,'String'));
                if ischar(lineMarkerEdgeColor) && length(lineMarkerEdgeColor)>1
                    set(gh.display_panel_markeredgecolour_popupmenu,'Value',...
                        find(strcmpi(lineMarkerEdgeColor,...
                        lineMarkerEdgeColorPopupmenuValues)));
                    switch lineMarkerEdgeColor
                        case 'none'
                            set(gh.display_panel_markeredgecoloursample_text,...
                                'BackgroundColor',get(mainWindow,'Color'))
                        case 'auto'
                            set(gh.display_panel_markeredgecoloursample_text,...
                                'BackgroundColor',ad.NP.smooth.color);
                    end
                else
                    set(gh.display_panel_markeredgecolour_popupmenu,'Value',...
                        find(strcmpi('colour',lineMarkerEdgeColorPopupmenuValues)));
                    set(gh.display_panel_markeredgecoloursample_text,...
                        'BackgroundColor',ad.NP.smooth.marker.edgeColor);
                end
                % Set line marker face colour
                lineMarkerFaceColor = ad.NP.smooth.marker.faceColor;
                lineMarkerFaceColorPopupmenuValues = ...
                    cellstr(get(gh.display_panel_markerfacecolour_popupmenu,'String'));
                if ischar(lineMarkerFaceColor) && length(lineMarkerFaceColor)>1
                    set(gh.display_panel_markerfacecolour_popupmenu,'Value',...
                        find(strcmpi(lineMarkerFaceColor,...
                        lineMarkerFaceColorPopupmenuValues)));
                    switch lineMarkerFaceColor
                        case 'none'
                            set(gh.display_panel_markerfacecoloursample_text,...
                                'BackgroundColor',get(mainWindow,'Color'))
                        case 'auto'
                            set(gh.display_panel_markerfacecoloursample_text,...
                                'BackgroundColor',get(gca,'Color'));
                    end
                else
                    set(gh.display_panel_markerfacecolour_popupmenu,'Value',...
                        find(strcmpi('colour',lineMarkerFaceColorPopupmenuValues)));
                    set(gh.display_panel_markerfacecoloursample_text,...
                        'BackgroundColor',ad.NP.smooth.marker.faceColor);
                end

                % Set line marker size
                set(gh.display_panel_markersize_edit,'String',...
                    num2str(ad.NP.smooth.marker.size));
        end

    catch exception
        trEPRexceptionHandling(exception)
    end 
end

function updateAxes(varargin)
    try
        mainWindow = trEPRguiGetWindowHandle(mfilename);
        % Get appdata from ACC GUI
        ad = getappdata(mainWindow);

        % See whether we have a currently active dataset, otherwise return
        active = ad.control.spectra.active;
        if isempty(active) || active == 0
            return;
        end
        
        % Get axis handle
        if nargin && ishandle(varargin{1})
            mainAxes = newplot(varargin{1});
        else
            mainAxes = gca;
        end
        
        % IMPORTANT: Set main axis to active axis
        axes(mainAxes); %#ok<MAXES>

        % Get data
        data = getData(ad.data{active});
        
        % Get time axis
        t = linspace(1,size(data,2),size(data,2));
        if (isfield(ad.data{active},'axes') ...
                && isfield(ad.data{active}.axes,'x') ...
                && isfield(ad.data{active}.axes.x,'values') ...
                && not (isempty(ad.data{active}.axes.x.values)))
            t = ad.data{active}.axes.x.values;
        end
        % Get net polarisation
        NP = sum(data);
        PTNP = NP(1:find(ad.data{active}.axes.x.values>0,1)-1);

        % Do the actual plotting
        cla reset;
        hold(mainAxes,'on');
        plot(...
            t,...
            NP,...
            'Color',ad.data{active}.display.lines.data.color,...
            'LineStyle',ad.data{active}.display.lines.data.style,...
            'Marker',ad.data{active}.display.lines.data.marker.type,...
            'MarkerEdgeColor',ad.data{active}.display.lines.data.marker.edgeColor,...
            'MarkerFaceColor',ad.data{active}.display.lines.data.marker.faceColor,...
            'MarkerSize',ad.data{active}.display.lines.data.marker.size,...
            'LineWidth',ad.data{active}.display.lines.data.width...
            );
        if ad.NP.smooth.window > 1
            filterfun = str2func(ad.NP.smooth.filterfun);
            plot(...
                t,...
                filterfun(NP,ad.NP.smooth.window),...
                'Color',ad.NP.smooth.color,...
                'LineStyle',ad.NP.smooth.style,...
                'Marker',ad.NP.smooth.marker.type,...
                'MarkerEdgeColor',ad.NP.smooth.marker.edgeColor,...
                'MarkerFaceColor',ad.NP.smooth.marker.faceColor,...
                'MarkerSize',ad.NP.smooth.marker.size,...
                'LineWidth',ad.NP.smooth.width...
                );
        end
        if ad.control.axis.mean
            line(...
                [ad.control.axis.limits.x.min ad.control.axis.limits.x.max],...
                [mean(PTNP) mean(PTNP)],...
                'Color',ad.NP.line.color,...
                'LineStyle',ad.NP.line.style,...
                'Marker',ad.NP.line.marker.type,...
                'MarkerEdgeColor',ad.NP.line.marker.edgeColor,...
                'MarkerFaceColor',ad.NP.line.marker.faceColor,...
                'MarkerSize',ad.NP.line.marker.size,...
                'LineWidth',ad.NP.line.width,...
                'Parent',mainAxes);
        end
        if ad.control.axis.grid.zero.visible
            line(...
                [ad.control.axis.limits.x.min ad.control.axis.limits.x.max],...
                [0 0],...
                'Color',ad.control.axis.grid.zero.color,...
                'LineWidth',ad.control.axis.grid.zero.width,...
                'LineStyle',ad.control.axis.grid.zero.style,...
                'Parent',mainAxes);
        end
        if ad.control.axis.stdev
            patch(...
                'XData',...
                [ad.control.axis.limits.x.min ad.control.axis.limits.x.max ...
                ad.control.axis.limits.x.max ad.control.axis.limits.x.min],...
                'YData',...
                [mean(PTNP)-std(PTNP,1) mean(PTNP)-std(PTNP,1) ...
                mean(PTNP)+std(PTNP,1) mean(PTNP)+std(PTNP,1)],...
                'ZData',[0 0 0 0],...
                'EdgeColor',ad.NP.area.patch.edge,...
                'FaceColor',ad.NP.area.patch.color,...
                'FaceAlpha',ad.NP.area.patch.alpha,...
                'Parent',mainAxes);
        end
        if ad.control.axis.minmax
            patch(...
                'XData',...
                [ad.control.axis.limits.x.min ad.control.axis.limits.x.max ...
                ad.control.axis.limits.x.max ad.control.axis.limits.x.min],...
                'YData',...
                [min(PTNP) min(PTNP) ...
                max(PTNP) max(PTNP)],...
                'ZData',[0 0 0 0],...
                'EdgeColor',ad.NP.area.patch.edge,...
                'FaceColor',ad.NP.area.patch.color,...
                'FaceAlpha',ad.NP.area.patch.alpha,...
                'Parent',mainAxes);
        end
        hold(mainAxes,'off');
        set(mainAxes,...
            'XLim',[min(t) max(t)],...
            'YLim',[min(NP)-0.025*(max(NP)-min(NP)) ...
            max(NP)+0.025*(max(NP)-min(NP))]...
            );
        if ad.control.axis.stdev
            ylimits = get(mainAxes,'YLim');
            if ylimits(1) > mean(NP)-std(NP,1)
                ylimits(1) = (mean(NP)-std(NP,1))-...
                    0.025*(max(NP)-min(NP));
            end
            if ylimits(2) < mean(NP)+std(NP,1)
                ylimits(2) = (mean(NP)+std(NP,1))+...
                    0.025*(max(NP)-min(NP));
            end
            set(mainAxes,'YLim',ylimits);
        end
        
        % Plot axis labels
        xlabel(mainAxes,...
            sprintf('{\\it %s} / %s',...
            ad.data{active}.axes.x.measure,...
            ad.data{active}.axes.x.unit));
        ylabel(mainAxes,...
            sprintf('{\\it %s} / %s',...
            'Net polarisation','a.u.'));
        
        % Set grid for main axis
        set(mainAxes,'XGrid',ad.control.axis.grid.x);
        set(mainAxes,'YGrid',ad.control.axis.grid.y);
        if (isequal(ad.control.axis.grid.x,'on'))
            set(mainAxes,'XMinorGrid',ad.control.axis.grid.minor);
        end
        if (isequal(ad.control.axis.grid.y,'on'))
            set(mainAxes,'YMinorGrid',ad.control.axis.grid.minor);
        end
        
    catch exception
        trEPRexceptionHandling(exception)
    end
end

end
