function varargout = trEPRgui_MWfrequencyDriftwindow(varargin)
% TREPRGUI_MWFREQUENCYDRIFTWINDOW Provide user with controls to analyse the
% frequency drift of a given measurement, provided that the frequency was
% measured for each time trace separately.
%
% Normally, this window is called from within the trEPRgui window.
%
% See also TREPRGUI

% (c) 2012, Till Biskup
% 2012-06-05

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%  Construct the components
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% Make GUI effectively a singleton
singleton = findobj('Tag',mfilename);
if (singleton)
    figure(singleton);
    varargout{1} = singleton;
    return;
end

% Try to get main GUI position
mainGUIHandle = trEPRguiGetWindowHandle();
if ishandle(mainGUIHandle)
    mainGUIPosition = get(mainGUIHandle,'Position');
    guiPosition = [mainGUIPosition(1),mainGUIPosition(2)+120,950,530];
else
    guiPosition = [20,190,950,530];
end

%  Construct the components
hMainFigure = figure('Tag',mfilename,...
    'Visible','off',...
    'Name','trEPR GUI : MW Frequency Drift Analysis Window',...
    'Units','Pixels',...
    'Position',guiPosition,...
    'Resize','off',...
    'NumberTitle','off', ...
    'KeyPressFcn',@keypress_Callback,...
    'Menu','none','Toolbar','none');

defaultBackground = get(hMainFigure,'Color');
mainPanelWidth = 260;
mainPanelHeight = 400;
panel_size = 240;
guiSize = get(hMainFigure,'Position');
guiSize = guiSize([3,4]);

axes(...         % the axes for plotting selected plot
    'Tag','axis',...
	'Parent', hMainFigure, ...
    'FontUnit','Pixel','Fontsize',14,...
    'Units', 'Pixels', ...
    'Position',[80 70 570 430]);

% Create button group, toggle buttons for switching btw. panels
hButtonGroup = uibuttongroup('Tag','mainButtonGroup',...
    'BackgroundColor',defaultBackground,...
    'BorderType','none',...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position', [guiSize(1)-mainPanelWidth-20 guiSize(2)-50 mainPanelWidth 30],...
    'Visible','on',...
    'SelectionChangeFcn',{@tbg_Callback});
tb1 = uicontrol('Tag','datasets_togglebutton',...
    'Style','Toggle',...
	'Parent', hButtonGroup, ...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'String','Analysis',...
    'TooltipString','Decide which datasets to accumulate',...
    'pos',[0 0 (mainPanelWidth)/3 30],...
    'Enable','on'...
    );
tb2 = uicontrol('Tag','accumulate_togglebutton',...
    'Style','Toggle',...
	'Parent', hButtonGroup, ...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'String','Display',...
    'TooltipString','Show results of accumulation',...
    'pos',[mainPanelWidth/3 0 (mainPanelWidth)/3 30],...
    'Enable','on'...
    );
tb3 = uicontrol('Tag','settings_togglebutton',...
    'Style','Toggle',...
	'Parent', hButtonGroup, ...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'String','Settings',...
    'TooltipString','Set parameters for accumulation',...
    'pos',[mainPanelWidth/3*2 0 (mainPanelWidth)/3 30],...
    'Enable','on'...
    );

% Create (switchable and overlaying) main panels
pp1 = uipanel('Tag','dataset_panel',...
    'parent',hMainFigure,...
    'Title','Analysis',...
    'FontUnit','Pixel','Fontsize',12,...
    'FontWeight','bold',...
    'BackgroundColor',defaultBackground,...
    'Visible','on',...
    'Units','pixels',...
    'Position',[guiSize(1)-mainPanelWidth-20 70 mainPanelWidth mainPanelHeight]);

pp2 = uipanel('Tag','accumulate_panel',...
    'parent',hMainFigure,...
    'Title','Display',...
    'FontUnit','Pixel','Fontsize',12,...
    'FontWeight','bold',...
    'BackgroundColor',defaultBackground,...
    'Visible','off',...
    'Units','pixels',...
    'Position',[guiSize(1)-mainPanelWidth-20 70 mainPanelWidth mainPanelHeight]);

pp3 = uipanel('Tag','settings_panel',...
    'parent',hMainFigure,...
    'Title','Settings',...
    'FontUnit','Pixel','Fontsize',12,...
    'FontWeight','bold',...
    'BackgroundColor',defaultBackground,...
    'Visible','off',...
    'Units','pixels',...
    'Position',[guiSize(1)-mainPanelWidth-20 70 mainPanelWidth mainPanelHeight]);

% elements for pp1

pp1_p1 = uipanel('Tag','mwfrequency_panel',...
    'Parent',pp1,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10 mainPanelHeight-200 panel_size 180],...
    'Title','MW Frequency'...
    );
uicontrol('Tag','mwfrequency_min_text',...
    'Style','text',...
    'Parent',pp1_p1,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10 130 65 20],...
    'String','Min'...
    );
uicontrol('Tag','mwfrequency_min_edit',...
    'Style','edit',...
    'Parent',pp1_p1,...
    'BackgroundColor',[1 1 1],...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[80 130 (mainPanelWidth-110)/3*2 25],...
    'String','1',...
    'Enable','inactive'...
    );
uicontrol('Tag','mwfrequency_min_unit_edit',...
    'Style','edit',...
    'Parent',pp1_p1,...
    'BackgroundColor',[1 1 1],...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[80+(mainPanelWidth-110)/3*2 130 (mainPanelWidth-110)/3 25],...
    'String','GHz',...
    'Enable','inactive'...
    );
uicontrol('Tag','mwfrequency_max_text',...
    'Style','text',...
    'Parent',pp1_p1,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10 100 65 20],...
    'String','Max'...
    );
uicontrol('Tag','mwfrequency_max_edit',...
    'Style','edit',...
    'Parent',pp1_p1,...
    'BackgroundColor',[1 1 1],...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[80 100 (mainPanelWidth-110)/3*2 25],...
    'String','1',...
    'Enable','inactive'...
    );
uicontrol('Tag','mwfrequency_max_unit_edit',...
    'Style','edit',...
    'Parent',pp1_p1,...
    'BackgroundColor',[1 1 1],...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[80+(mainPanelWidth-110)/3*2 100 (mainPanelWidth-110)/3 25],...
    'String','GHz',...
    'Enable','inactive'...
    );
uicontrol('Tag','mwfrequency_delta_text',...
    'Style','text',...
    'Parent',pp1_p1,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10 70 65 20],...
    'String','Delta'...
    );
uicontrol('Tag','mwfrequency_delta_edit',...
    'Style','edit',...
    'Parent',pp1_p1,...
    'BackgroundColor',[1 1 1],...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[80 70 (mainPanelWidth-110)/3*2 25],...
    'String','1',...
    'Enable','inactive'...
    );
uicontrol('Tag','mwfrequency_delta_unit_edit',...
    'Style','edit',...
    'Parent',pp1_p1,...
    'BackgroundColor',[1 1 1],...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[80+(mainPanelWidth-110)/3*2 70 (mainPanelWidth-110)/3 25],...
    'String','GHz',...
    'Enable','inactive'...
    );
uicontrol('Tag','mwfrequency_avg_text',...
    'Style','text',...
    'Parent',pp1_p1,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10 40 65 20],...
    'String','Average'...
    );
uicontrol('Tag','mwfrequency_avg_edit',...
    'Style','edit',...
    'Parent',pp1_p1,...
    'BackgroundColor',[1 1 1],...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[80 40 (mainPanelWidth-110)/3*2 25],...
    'String','1',...
    'Enable','inactive'...
    );
uicontrol('Tag','mwfrequency_avg_unit_edit',...
    'Style','edit',...
    'Parent',pp1_p1,...
    'BackgroundColor',[1 1 1],...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[80+(mainPanelWidth-110)/3*2 40 (mainPanelWidth-110)/3 25],...
    'String','GHz',...
    'Enable','inactive'...
    );
uicontrol('Tag','mwfrequency_stdev_text',...
    'Style','text',...
    'Parent',pp1_p1,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10 10 65 20],...
    'String','Std. dev.'...
    );
uicontrol('Tag','mwfrequency_stdev_edit',...
    'Style','edit',...
    'Parent',pp1_p1,...
    'BackgroundColor',[1 1 1],...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[80 10 (mainPanelWidth-110)/3*2 25],...
    'String','1',...
    'Enable','inactive'...
    );
uicontrol('Tag','mwfrequency_stdev_unit_edit',...
    'Style','edit',...
    'Parent',pp1_p1,...
    'BackgroundColor',[1 1 1],...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[80+(mainPanelWidth-110)/3*2 10 (mainPanelWidth-110)/3 25],...
    'String','GHz',...
    'Enable','inactive'...
    );

pp1_p2 = uipanel('Tag','field_panel',...
    'Parent',pp1,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10 mainPanelHeight-390 panel_size 180],...
    'Title','Magnetic Field'...
    );
uicontrol('Tag','field_step_text',...
    'Style','text',...
    'Parent',pp1_p2,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10 130 65 20],...
    'String','Step'...
    );
uicontrol('Tag','field_step_edit',...
    'Style','edit',...
    'Parent',pp1_p2,...
    'BackgroundColor',[1 1 1],...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[80 130 (mainPanelWidth-110)/3*2 25],...
    'String','1',...
    'Enable','inactive'...
    );
uicontrol('Tag','field_step_unit_edit',...
    'Style','edit',...
    'Parent',pp1_p2,...
    'BackgroundColor',[1 1 1],...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[80+(mainPanelWidth-110)/3*2 130 (mainPanelWidth-110)/3 25],...
    'String','mT',...
    'Enable','inactive'...
    );
uicontrol('Tag','field_sequence_text',...
    'Style','text',...
    'Parent',pp1_p2,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10 100 65 20],...
    'String','Sequence'...
    );
uicontrol('Tag','field_sequence_edit',...
    'Style','edit',...
    'Parent',pp1_p2,...
    'BackgroundColor',[1 1 1],...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[80 100 mainPanelWidth-110 25],...
    'String','',...
    'Enable','inactive'...
    );
uicontrol('Tag','field_deviation_text',...
    'Style','text',...
    'Parent',pp1_p2,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'FontAngle','oblique',...
    'Units','Pixels',...
    'Position',[10 70 mainPanelWidth-40 20],...
    'String','Deviation due to MW Freq. drift'...
    );
uicontrol('Tag','field_deviation_delta_text',...
    'Style','text',...
    'Parent',pp1_p2,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10 40 65 20],...
    'String','Delta'...
    );
uicontrol('Tag','field_deviation_delta_edit',...
    'Style','edit',...
    'Parent',pp1_p2,...
    'BackgroundColor',[1 1 1],...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[80 40 (mainPanelWidth-110)/3*2 25],...
    'String','1',...
    'Enable','inactive'...
    );
uicontrol('Tag','field_deviation_delta_unit_edit',...
    'Style','edit',...
    'Parent',pp1_p2,...
    'BackgroundColor',[1 1 1],...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[80+(mainPanelWidth-110)/3*2 40 (mainPanelWidth-110)/3 25],...
    'String','mT',...
    'Enable','inactive'...
    );
uicontrol('Tag','field_deviation_stdev_text',...
    'Style','text',...
    'Parent',pp1_p2,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10 10 65 20],...
    'String','Std. dev.'...
    );
uicontrol('Tag','field_deviation_stdev_edit',...
    'Style','edit',...
    'Parent',pp1_p2,...
    'BackgroundColor',[1 1 1],...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[80 10 (mainPanelWidth-110)/3*2 25],...
    'String','1',...
    'Enable','inactive'...
    );
uicontrol('Tag','field_deviation_stdev_unit_edit',...
    'Style','edit',...
    'Parent',pp1_p2,...
    'BackgroundColor',[1 1 1],...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[80+(mainPanelWidth-110)/3*2 10 (mainPanelWidth-110)/3 25],...
    'String','mT',...
    'Enable','inactive'...
    );


uicontrol('Tag','zoom_togglebutton',...
    'Style','togglebutton',...
	'Parent', hMainFigure, ...
    'BackgroundColor',defaultBackground,...
    'ForegroundColor',[0 0 0],...
    'FontUnit','Pixel','Fontsize',12,...
    'FontWeight','bold',...
    'String','+',...
    'TooltipString','Zoom',...
    'pos',[guiSize(1)-mainPanelWidth-20 30 25 25],...
    'Enable','on',...
    'Callback',{@togglebutton_Callback,'Zoom'}...
    );

uicontrol('Tag','help_pushbutton',...
    'Style','pushbutton',...
	'Parent', hMainFigure, ...
    'BackgroundColor',defaultBackground,...
    'ForegroundColor',[0 0 1],...
    'FontUnit','Pixel','Fontsize',12,...
    'FontWeight','bold',...
    'String','?',...
    'TooltipString','Display help for how to operate the accumulation GUI',...
    'pos',[guiSize(1)-mainPanelWidth+10 30 25 25],...
    'Enable','on',...
    'Callback',@trEPRgui_MWfrequencyDrift_helpwindow...
    );


uicontrol('Tag','close_pushbutton',...
    'Style','pushbutton',...
	'Parent', hMainFigure, ...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'String','Close',...
    'TooltipString','Close ACC GUI (and transfer accumulated dataset to main GUI, if any)',...
    'pos',[guiSize(1)-((mainPanelWidth)/3)-20 20 (mainPanelWidth)/3 40],...
    'Enable','on',...
    'Callback',{@pushbutton_Callback,'Close'}...
    );

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%  Initialization tasks
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% Define constants needed for calculations
hplanck = 6.62606957e-34;     % J * s
bohrmagneton = 9.2740154e-24; % J * T^-1
gelectron = 2.00232;

% Store handles in guidata
guidata(hMainFigure,guihandles);

% Create appdata structure
ad = trEPRguiDataStructure('guiappdatastructure');

% Apply configuration
guiConfigApply(mfilename);
ad.configuration = getappdata(hMainFigure,'configuration');

setappdata(hMainFigure,'data',ad.data);
setappdata(hMainFigure,'origdata',ad.origdata);
setappdata(hMainFigure,'configuration',ad.configuration);
setappdata(hMainFigure,'control',ad.control);

% Make the GUI visible.
set(hMainFigure,'Visible','on');
msgStr = 'MW Frequency Drift Analysis GUI window opened';
trEPRadd2status(msgStr);

% Load data from Main GUI
mainGuiWindow = trEPRguiGetWindowHandle();
if (mainGuiWindow)
    admain = getappdata(mainGuiWindow);
    % Check for availability of necessary fields in appdata
    if (isfield(admain,'data') ~= 0)
        ad.data = admain.data;
        setappdata(hMainFigure,'data',ad.data);
        ad.origdata = admain.data;
        setappdata(hMainFigure,'origdata',ad.origdata);
    end
    if (isfield(admain,'control') ~= 0)
        ad.control = admain.control;
        % Move (in)visible -> (not)accumulated
%         ad.control.axis.grid.zero = ad.configuration.axis.grid.zero;
%         ad.control.axis.grid.x = ad.configuration.axis.grid.x;
%         ad.control.axis.grid.y = ad.configuration.axis.grid.y;
%         ad.control.axis.grid.minor = ad.configuration.axis.grid.minor;
%         ad.control.axis.onlyActive = ad.configuration.axis.onlyActive;
        setappdata(hMainFigure,'control',ad.control);
    end

    updateAxes();
    updateAnalysisPanel();
end

%updateAxes();

if (nargout == 1)
    varargout{1} = hMainFigure;
end

% Add keypress function to every element that can have one...
handles = findall(...
    allchild(hMainFigure),'style','pushbutton',...
    '-or','style','togglebutton',...
    '-or','style','edit',...
    '-or','style','listbox',...
    '-or','style','popupmenu');
for m=1:length(handles)
    set(handles(m),'KeyPressFcn',@keypress_Callback);
end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%  Callbacks
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

function tbg_Callback(source,~)
    try 
        switchPanel(get(get(source,'SelectedObject'),'String'));
    catch exception
        try
            msgStr = ['An exception occurred. '...
                'The bug reporter should have been opened'];
            trEPRadd2status(msgStr);
        catch exception2
            exception = addCause(exception2, exception);
            disp(msgStr);
        end
        try
            trEPRgui_bugreportwindow(exception);
        catch exception3
            % If even displaying the bug report window fails...
            exception = addCause(exception3, exception);
            throw(exception);
        end
    end
end

function edit_Callback(~,~,position)
    try
        if isempty(position)
            return;
        end
        
        % Get appdata of main window
        mainWindow = trEPRguiGetWindowHandle(mfilename);
        ad = getappdata(mainWindow);

        % IDEA: If user types "end", replace that with the maximum index in
        % the respective dimension - would be a very convenient way for the
        % user to specify that one axis should be used from beginning to
        % end without needing to know how long this axis really is in terms
        % of indices.
        return;
    catch exception
        try
            msgStr = ['An exception occurred. '...
                'The bug reporter should have been opened'];
            trEPRadd2status(msgStr);
        catch exception2
            exception = addCause(exception2, exception);
            disp(msgStr);
        end
        try
            trEPRgui_bugreportwindow(exception);
        catch exception3
            % If even displaying the bug report window fails...
            exception = addCause(exception3, exception);
            throw(exception);
        end
    end
end

function togglebutton_Callback(source,~,action)
    try
        if isempty(action)
            return;
        end
        
        % Get appdata of main window
        mainWindow = trEPRguiGetWindowHandle(mfilename);
        ad = getappdata(mainWindow);

        % Get state of toggle button
        value = get(source,'Value');
        
        % For those togglebuttons who do more complicated stuff
        % Toggle button
        if value % If toggle switched ON
            switch lower(action)
                case 'measurepick'
                    % Switch off zoom
                    zoom(mainWindow,'off');
                    % Set pointer callback functions
                    set(mainWindow,...
                        'WindowButtonMotionFcn',@trackPointer);
                    set(mainWindow,...
                        'WindowButtonDownFcn',@switchMeasurePointer);
                    return;
                case 'zoom'
                    % Reset pointer callback functions
                    set(mainWindow,'WindowButtonMotionFcn','');
                    set(mainWindow,'WindowButtonDownFcn','');
                    % Reset other zoom toggle button
                    zoom(mainWindow,'on');
                    return;
                case 'gridx'
                    ad.control.axis.grid.x = 'on';
                    setappdata(mainWindow,'control',ad.control);
                    updateAxes();
                    return;
                case 'gridy'
                    ad.control.axis.grid.y = 'on';
                    setappdata(mainWindow,'control',ad.control);
                    updateAxes();
                    return;
                case 'gridminor'
                    ad.control.axis.grid.minor = 'on';
                    setappdata(mainWindow,'control',ad.control);
                    updateAxes();
                    return;
                case 'gridzero'
                    ad.control.axis.grid.zero = value;
                    setappdata(mainWindow,'control',ad.control);
                    updateAxes();
                    return;
                otherwise
                    disp('trEPRgui_fitwindow: togglebutton_Callback(): Unknown action');
                    disp(action);
                    return;
            end
        else % If toggle button switched OFF
            switch lower(action)
                case 'measurepick'
                    % Reset pointer callback functions
                    set(mainWindow,'WindowButtonMotionFcn','');
                    set(mainWindow,'WindowButtonDownFcn','');
                    return;
                case 'zoom'
                    zoom(mainWindow,'off');
                    return;
                case 'gridx'
                    ad.control.axis.grid.x = 'off';
                    setappdata(mainWindow,'control',ad.control);
                    updateAxes();
                    return;
                case 'gridy'
                    ad.control.axis.grid.y = 'off';
                    setappdata(mainWindow,'control',ad.control);
                    updateAxes();
                    return;
                case 'gridminor'
                    ad.control.axis.grid.minor = 'off';
                    setappdata(mainWindow,'control',ad.control);
                    updateAxes();
                    return;
                case 'gridzero'
                    ad.control.axis.grid.zero = value;
                    setappdata(mainWindow,'control',ad.control);
                    updateAxes();
                    return;
                otherwise
                    disp('trEPRgui_fitwindow: togglebutton_Callback(): Unknown action');
                    disp(action);
                    return;
            end
        end
    catch exception
        try
            msgStr = ['An exception occurred. '...
                'The bug reporter should have been opened'];
            trEPRadd2status(msgStr);
        catch exception2
            exception = addCause(exception2, exception);
            disp(msgStr);
        end
        try
            trEPRgui_bugreportwindow(exception);
        catch exception3
            % If even displaying the bug report window fails...
            exception = addCause(exception3, exception);
            throw(exception);
        end
    end
end

function checkbox_Callback(source,~,action)
    try
        if isempty(action)
            return;
        end
        
        % Get appdata of ACC GUI
        mainWindow = trEPRguiGetWindowHandle(mfilename);
        ad = getappdata(mainWindow);
        
        switch action
            case 'showonlyactive'
                ad.control.axis.onlyActive = get(source,'Value');
            otherwise
                disp([mfilename ' : pushbutton_Callback() : '...
                    'Unknown action "' action '"']);
                return;
        end
        setappdata(mainWindow,'control',ad.control);
        updateAxes();
    catch exception
        try
            msgStr = ['An exception occurred. '...
                'The bug reporter should have been opened'];
            trEPRadd2status(msgStr);
        catch exception2
            exception = addCause(exception2, exception);
            disp(msgStr);
        end
        try
            trEPRgui_bugreportwindow(exception);
        catch exception3
            % If even displaying the bug report window fails...
            exception = addCause(exception3, exception);
            throw(exception);
        end
    end
end

function pushbutton_Callback(~,~,action)
    try
        if isempty(action)
            return;
        end
        
        % Get appdata and handles of main window
        mainWindow = trEPRguiGetWindowHandle(mfilename);
        ad = getappdata(mainWindow);
        
        switch action
            case 'Close'
                % Look for ACC GUI Help window and if its there, close as
                % well
                hHelpWindow = ...
                    findobj('Tag','trEPRgui_MWfrequencyDrift_helpwindow');
                if ishandle(hHelpWindow)
                    delete(hHelpWindow);
                end
                delete(trEPRguiGetWindowHandle(mfilename));
            otherwise
                disp([mfilename ' : pushbutton_Callback() : '...
                    'Unknown action "' action '"']);
                return;
        end
    catch exception
        try
            msgStr = ['An exception occurred. '...
                'The bug reporter should have been opened'];
            trEPRadd2status(msgStr);
        catch exception2
            exception = addCause(exception2, exception);
            disp(msgStr);
        end
        try
            trEPRgui_bugreportwindow(exception);
        catch exception3
            % If even displaying the bug report window fails...
            exception = addCause(exception3, exception);
            throw(exception);
        end
    end
end

function popupmenu_Callback(source,~,action)
    try
        if isempty(action)
            return;
        end
        
        % Get appdata of main window
        ad = getappdata(hMainFigure);

        % Get handles of main window
        gh = guihandles(hMainFigure);
        
        switch action
            case 'displaytype'
                displayTypes = cellstr(get(source,'String'));
                ad.control.axis.displayType = ...
                    displayTypes{get(source,'Value')};
                
                % Set appdata of main window
                setappdata(hMainFigure,'control',ad.control);
                
                % If no datasets are loaded, return
                % NOTE: As we return only here, the display type gets set
                % for later 
                if isempty(ad.data)
                    return;
                end
                
                switch ad.control.axis.displayType
                    case '2D plot'
                        set(gh.slider,'Enable','Off');
                        updateAxes()
                    case '1D along x'
                        set(gh.slider,'Enable','On');
                        updateAxes()
                    case '1D along y'
                        set(gh.slider,'Enable','On');
                        updateAxes()
                    otherwise
                        % unknown
                        return;
                end
            case 'mfedisplaytype'
            case 'accumulationmethod'
                accumulationMethods = cellstr(get(source,'String'));
                accumulationMethod = accumulationMethods{get(source,'Value')};
                
                switch accumulationMethod
                    case 'weighted'
                        set(gh.weights_min_edit,...
                            'Enable','On');
                        set(gh.weights_max_edit,...
                            'Enable','On');
                    otherwise
                        set(gh.weights_min_edit,...
                            'Enable','Off');
                        set(gh.weights_max_edit,...
                            'Enable','Off');
                end
            otherwise
                disp([mfilename ' : popupmenu_Callback() : '...
                    'Unknown action "' action '"']);
                return;
        end
    catch exception
        try
            msgStr = ['An exception occurred. '...
                'The bug reporter should have been opened'];
            trEPRadd2status(msgStr);
        catch exception2
            exception = addCause(exception2, exception);
            disp(msgStr);
        end
        try
            trEPRgui_bugreportwindow(exception);
        catch exception3
            % If even displaying the bug report window fails...
            exception = addCause(exception3, exception);
            throw(exception);
        end
    end
end

function keypress_Callback(src,evt)
    try
        if isempty(evt.Character) && isempty(evt.Key)
            % In case "Character" is the empty string, i.e. only modifier
            % key was pressed...
            return;
        end
        mainWindow = trEPRguiGetWindowHandle(mfilename);
        % Get appdata from ACC GUI
        ad = getappdata(mainWindow);
        if ~isempty(evt.Modifier)
            if (strcmpi(evt.Modifier{1},'command')) || ...
                    (strcmpi(evt.Modifier{1},'control'))
                switch evt.Key
                    case 'w'
                        pushbutton_Callback(src,evt,'Close')
                        return;
                    case '1'
                        switchPanel('Analysis');
                        return;
                    case '2'
                        switchPanel('Display');
                        return;
                    case '3'
                        switchPanel('Settings');
                        return;
                    case 'x'
                        ad.control.axis.displayType = '1D along x';
                        setappdata(mainWindow,'control',ad.control);
                        updateAxes();
                        return;
                    case 'y'
                        ad.control.axis.displayType = '1D along y';
                        setappdata(mainWindow,'control',ad.control);
                        updateAxes();
                        return;
                    case 'z'
                        ad.control.axis.displayType = '2D plot';
                        setappdata(mainWindow,'control',ad.control);
                        updateAxes();
                        return;
                end
            end
        end
        switch evt.Key
            case 'f1'
                trEPRgui_MWfrequencyDrift_helpwindow();
                return;
            otherwise
%                 disp(evt);
%                 fprintf('       Caller: %i\n\n',src);
                return;
        end
    catch exception
        try
            msgStr = ['An exception occurred. '...
                'The bug reporter should have been opened'];
            trEPRadd2status(msgStr);
        catch exception2
            exception = addCause(exception2, exception);
            disp(msgStr);
        end
        try
            trEPRgui_bugreportwindow(exception);
        catch exception3
            % If even displaying the bug report window fails...
            exception = addCause(exception3, exception);
            throw(exception);
        end
    end
end


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%  Utility functions
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

function switchPanel(panelName)
    try
        panels = [pp1 pp2 pp3];
        buttons = [tb1 tb2 tb3];
        switch lower(panelName)
            case 'analysis'
                set(panels,'Visible','off');
                set(buttons,'Value',0);
                set(pp1,'Visible','on');
                set(tb1,'Value',1);
            case 'display'
                set(panels,'Visible','off');
                set(buttons,'Value',0);
                set(pp2,'Visible','on');
                set(tb2,'Value',1);
            case 'settings'
                set(panels,'Visible','off');
                set(buttons,'Value',0);
                set(pp3,'Visible','on');
                set(tb3,'Value',1);
            otherwise
        end
    catch exception
        try
            msgStr = ['An exception occurred. '...
                'The bug reporter should have been opened'];
            trEPRadd2status(msgStr);
        catch exception2
            exception = addCause(exception2, exception);
            disp(msgStr);
        end
        try
            trEPRgui_bugreportwindow(exception);
        catch exception3
            % If even displaying the bug report window fails...
            exception = addCause(exception3, exception);
            throw(exception);
        end
    end 
end

function updateAnalysisPanel()
    try
        mainWindow = trEPRguiGetWindowHandle(mfilename);
        % Get appdata from ACC GUI
        ad = getappdata(mainWindow);
        
        % Get handles from main window
        gh = guidata(mainWindow);
        
        active = ad.control.spectra.active;
        if isempty(active) || active == 0
            return;
        end
        
        % Set Frequency subpanel fields
        MWfreq = ad.data{active}.parameters.bridge.MWfrequency.value;
        
        set(gh.mwfrequency_min_edit,'String',num2str(min(MWfreq),'%10.6f'));
        set(gh.mwfrequency_max_edit,'String',num2str(max(MWfreq),'%10.6f'));
        set(gh.mwfrequency_delta_edit,...
            'String',num2str(max(MWfreq)-min(MWfreq),7));
        set(gh.mwfrequency_avg_edit,'String',num2str(mean(MWfreq),'%10.6f'));
        set(gh.mwfrequency_stdev_edit,'String',num2str(std(MWfreq,1),'%10.6f'));
        
        % Set Field subpanel fields
        set(gh.field_step_edit,'String',...
            num2str(ad.data{active}.parameters.field.step));
        
        fieldDeviationDelta = (max(MWfreq)-min(MWfreq))*1e9*hplanck /...
            (gelectron*bohrmagneton);
        fieldDeviationStdev = (std(MWfreq))*1e9*hplanck /...
            (gelectron*bohrmagneton);
        switch lower(ad.data{active}.axes.y.unit)
            case 'g'
                fieldDeviationDelta = fieldDeviationDelta * 1e4;
                fieldDeviationStdev = fieldDeviationStdev * 1e4;
            case 'mt'
                fieldDeviationDelta = fieldDeviationDelta * 1e3;
                fieldDeviationStdev = fieldDeviationStdev * 1e3;
            otherwise
                disp('Unknown field unit. Assuming Gauss. Values might be wrong!');
                fieldDeviationDelta = fieldDeviationDelta * 1e4;
                fieldDeviationStdev = fieldDeviationStdev * 1e4;
        end
        
        set(gh.field_deviation_delta_edit,...
            'String',num2str(fieldDeviationDelta,'%10.6f'));
        set(gh.field_deviation_stdev_edit,...
            'String',num2str(fieldDeviationStdev,'%10.6f'));
        
        % Set unit fields
        set(findall(mainWindow,'-regexp','Tag','mwfrequency.*unit_edit'),...
            'String',ad.data{active}.parameters.bridge.MWfrequency.unit);
        set(findall(mainWindow,'-regexp','Tag','field.*unit_edit'),...
            'String',ad.data{active}.axes.y.unit);
        
        % Set background of deviation fields accordingly
        if fieldDeviationDelta > ad.data{active}.parameters.field.step
            set(gh.field_deviation_delta_edit,...
                'BackgroundColor',[1 0.8 0.8]);
        elseif fieldDeviationDelta > 0.5*ad.data{active}.parameters.field.step
            set(gh.field_deviation_delta_edit,...
                'Background',[1 1 0.8]);
        else
            set(gh.field_deviation_delta_edit,...
                'Background',[0.8 1 0.8]);
        end
        if fieldDeviationStdev > ad.data{active}.parameters.field.step
            set(gh.field_deviation_stdev_edit,...
                'BackgroundColor',[1 0.8 0.8]);
        elseif fieldDeviationStdev > 0.5*ad.data{active}.parameters.field.step
            set(gh.field_deviation_stdev_edit,...
                'Background',[1 1 0.8]);
        else
            set(gh.field_deviation_stdev_edit,...
                'Background',[0.8 1 0.8]);
        end
    catch exception
        try
            msgStr = ['An exception occurred. '...
                'The bug reporter should have been opened'];
            trEPRadd2status(msgStr);
        catch exception2
            exception = addCause(exception2, exception);
            disp(msgStr);
        end
        try
            trEPRgui_bugreportwindow(exception);
        catch exception3
            % If even displaying the bug report window fails...
            exception = addCause(exception3, exception);
            throw(exception);
        end
    end
end



function updateAxes()
    try
        mainWindow = trEPRguiGetWindowHandle(mfilename);
        % Get appdata from ACC GUI
        ad = getappdata(mainWindow);
        
        % Get handles from main window
        gh = guidata(mainWindow);

        % See whether we have a currently active dataset, otherwise return
        active = ad.control.spectra.active;
        if isempty(active) || active == 0
            return;
        end
        
        % Do the actual plotting
        cla reset;
        [y,~] = size(ad.data{active}.data);
        y = linspace(1,y,y);
        if (isfield(ad.data{active},'axes') ...
                && isfield(ad.data{active}.axes,'y') ...
                && isfield(ad.data{active}.axes.y,'values') ...
                && not (isempty(ad.data{active}.axes.y.values)))
            y = ad.data{active}.axes.y.values;
        end
        x = ad.data{active}.parameters.bridge.MWfrequency.value;
        % In case that we loaded 1D data...
        if isscalar(x)
            x = ones(length(y)) * ...
                ad.data{active}.parameters.bridge.MWfrequency.value;
        end
        plot(...
            y,...
            x,...
            'Color',ad.data{active}.line.color,...
            'LineStyle',ad.data{active}.line.style,...
            'Marker',ad.data{active}.line.marker.type,...
            'MarkerEdgeColor',ad.data{active}.line.marker.edgeColor,...
            'MarkerFaceColor',ad.data{active}.line.marker.faceColor,...
            'MarkerSize',ad.data{active}.line.marker.size,...
            'LineWidth',ad.data{active}.line.width...
            );
%         if (ad.control.axis.grid.zero.visible)
%             line(...
%                 [ad.control.axis.limits.y.min ad.control.axis.limits.y.max],...
%                 [0 0],...
%                 'Color',ad.control.axis.grid.zero.color,...
%                 'LineWidth',ad.control.axis.grid.zero.width,...
%                 'LineStyle',ad.control.axis.grid.zero.style,...
%                 'Parent',gca);
%         end
        set(gca,...
            'XLim',[min(y) max(y)],...
            'YLim',[min(x)-0.025*(max(x)-min(x)) ...
            max(x)+0.025*(max(x)-min(x))]...
            );
        % Plot axis labels
        xlabel(gca,...
            sprintf('{\\it %s} / %s',...
            ad.data{active}.axes.y.measure,...
            ad.data{active}.axes.y.unit));
        ylabel(gca,...
            sprintf('{\\it %s} / %s',...
            'MW frequency',...
            ad.data{active}.parameters.bridge.MWfrequency.unit));
        
        % Set grid for main axis
        set(gh.axis,'XGrid',ad.control.axis.grid.x);
        set(gh.axis,'YGrid',ad.control.axis.grid.y);
        if (isequal(ad.control.axis.grid.x,'on'))
            set(gh.axis,'XMinorGrid',ad.control.axis.grid.minor);
        end
        if (isequal(ad.control.axis.grid.y,'on'))
            set(gh.axis,'YMinorGrid',ad.control.axis.grid.minor);
        end
        
    catch exception
        try
            msgStr = ['An exception occurred. '...
                'The bug reporter should have been opened'];
            trEPRadd2status(msgStr);
        catch exception2
            exception = addCause(exception2, exception);
            disp(msgStr);
        end
        try
            trEPRgui_bugreportwindow(exception);
        catch exception3
            % If even displaying the bug report window fails...
            exception = addCause(exception3, exception);
            throw(exception);
        end
    end
end

end