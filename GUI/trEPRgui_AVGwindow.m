function varargout = trEPRgui_AVGwindow(varargin)
% TREPRGUI_AVGWINDOW Provide user with all necessary controls to perform
% averaging in one dimension on a given dataset.
%
% Normally, this window is called from within the trEPRgui window.
%
% See also TREPRGUI

% (c) 2011, Till Biskup
% 2011-11-12

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%  Construct the components
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% Make GUI effectively a singleton
singleton = findobj('Tag','trepr_gui_AVGwindow');
if (singleton)
    figure(singleton);
    varargout{1} = singleton;
    return;
end

%  Construct the components
hMainFigure = figure('Tag','trepr_gui_AVGwindow',...
    'Visible','off',...
    'Name','trEPR GUI : AVG Window',...
    'Units','Pixels',...
    'Position',[30,50,800,670],...
    'Resize','off',...
    'NumberTitle','off', ...
    'KeyPressFcn',@keypress_Callback,...
    'Menu','none','Toolbar','none');

defaultBackground = get(hMainFigure,'Color');
mainPanelWidth = 260;
mainPanelHeight = 540;
panel_size = 240;
guiSize = get(hMainFigure,'Position');
guiSize = guiSize([3,4]);

hPlotAxes = axes(...         % the axes for plotting selected plot
    'Tag','axis',...
	'Parent', hMainFigure, ...
    'FontUnit','Pixel','Fontsize',12,...
    'Units', 'Pixels', ...
    'Position',[70 250 400 400]);
uicontrol('Tag','position_slider',...
    'Style', 'slider',...
	'Parent', hMainFigure, ...
    'Min',1,'Max',100,'Value',50,...
    'Position', [485 250 15 400],...
    'BackgroundColor',[1 1 1],...
    'TooltipString','',...
    'Enable','off',...
    'Callback', {@position_slider_Callback}...
    );

% Create button group, toggle buttons for switching btw. panels
hButtonGroup = uibuttongroup('Tag','mainButtonGroup',...
    'BackgroundColor',defaultBackground,...
    'BorderType','none',...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position', [guiSize(1)-mainPanelWidth-20 guiSize(2)-50 mainPanelWidth 30],...
    'Visible','on',...
    'SelectionChangeFcn',{@tbg_Callback});
tb1 = uicontrol('Tag','datasets_togglebutton',...
    'Style','Toggle',...
	'Parent', hButtonGroup, ...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'String','Display',...
    'TooltipString','Select the dataset and review the display settings',...
    'pos',[0 0 (mainPanelWidth)/3 30],...
    'Enable','on'...
    );
tb2 = uicontrol('Tag','fit_togglebutton',...
    'Style','Toggle',...
	'Parent', hButtonGroup, ...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'String','Average',...
    'TooltipString','Set parameters for accumulation',...
    'pos',[mainPanelWidth/3 0 (mainPanelWidth)/3 30],...
    'Enable','on'...
    );
tb3 = uicontrol('Tag','settings_togglebutton',...
    'Style','Toggle',...
	'Parent', hButtonGroup, ...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'String','Settings',...
    'TooltipString','Show results of accumulation',...
    'pos',[mainPanelWidth/3*2 0 (mainPanelWidth)/3 30],...
    'Enable','on'...
    );

% Create (switchable and overlaying) main panels
pp1 = uipanel('Tag','display_panel',...
    'parent',hMainFigure,...
    'Title','Display',...
    'FontUnit','Pixel','Fontsize',12,...
    'FontWeight','bold',...
    'BackgroundColor',defaultBackground,...
    'Visible','on',...
    'Units','pixels',...
    'Position',[guiSize(1)-mainPanelWidth-20 70 mainPanelWidth mainPanelHeight]);

pp2 = uipanel('Tag','fit_panel',...
    'parent',hMainFigure,...
    'Title','Average',...
    'FontUnit','Pixel','Fontsize',12,...
    'FontWeight','bold',...
    'BackgroundColor',defaultBackground,...
    'Visible','off',...
    'Units','pixels',...
    'Position',[guiSize(1)-mainPanelWidth-20 70 mainPanelWidth mainPanelHeight]);

pp3 = uipanel('Tag','settings_panel',...
    'parent',hMainFigure,...
    'Title','Settings',...
    'FontUnit','Pixel','Fontsize',12,...
    'FontWeight','bold',...
    'BackgroundColor',defaultBackground,...
    'Visible','off',...
    'Units','pixels',...
    'Position',[guiSize(1)-mainPanelWidth-20 70 mainPanelWidth mainPanelHeight]);

pp4 = uipanel('Tag','report_panel',...
    'parent',hMainFigure,...
    'Title','Report',...
    'FontUnit','Pixel','Fontsize',12,...
    'FontWeight','bold',...
    'BackgroundColor',defaultBackground,...
    'Visible','on',...
    'Units','pixels',...
    'Position',[20 20 guiSize(1)-mainPanelWidth-50 170]);

% elements for pp1
pp1_p1 = uipanel('Tag','visible_panel',...
    'Parent',pp1,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10 mainPanelHeight-130 mainPanelWidth-20 110],...
    'Title','Visible datasets'...
    );
uicontrol('Tag','visible_panel_listbox',...
    'Style','listbox',...
    'Parent',pp1_p1,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10 10 mainPanelWidth-40 80],...
    'TooltipString','List of currently visible spectra',...
    'String','',...
    'Callback',{@visible_panel_listbox_Callback}...
    );

pp1_p2 = uipanel('Tag','displaytype_panel',...
    'Parent',pp1,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10 mainPanelHeight-190 mainPanelWidth-20 50],...
    'Title','Display type'...
    );
uicontrol('Tag','displaytype_popupmenu',...
    'Style','popupmenu',...
    'Parent',pp1_p2,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10 10 mainPanelWidth-40 20],...
    'String','2D plot|1D along x|1D along y',...
    'Callback', {@displaytype_popupmenu_Callback}...
    );

pp1_p3 = uipanel('Tag','sliderposition_panel',...
    'Parent',pp1,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10 mainPanelHeight-340 mainPanelWidth-20 140],...
    'Title','Slider position'...
    );
uicontrol('Tag','sliderposition_index_text',...
    'Style','text',...
    'Parent',pp1_p3,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[60 90 (mainPanelWidth-90)/2 25],...
    'String','index'...
    );
uicontrol('Tag','sliderposition_unit_text',...
    'Style','text',...
    'Parent',pp1_p3,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[60+(mainPanelWidth-90)/2 90 (mainPanelWidth-90)/2 25],...
    'String','unit'...
    );
uicontrol('Tag','sliderposition_x_text',...
    'Style','text',...
    'Parent',pp1_p3,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10 70 35 20],...
    'String','x'...
    );
uicontrol('Tag','sliderposition_x_index_edit',...
    'Style','edit',...
    'Parent',pp1_p3,...
    'BackgroundColor',[1 1 1],...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[60 70 (mainPanelWidth-90)/2 25],...
    'String','0',...
    'Callback',{@position_edit_Callback,'xindex'}...
    );
uicontrol('Tag','sliderposition_x_unit_edit',...
    'Style','edit',...
    'Parent',pp1_p3,...
    'BackgroundColor',[1 1 1],...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[60+(mainPanelWidth-90)/2 70 (mainPanelWidth-90)/2 25],...
    'String','0',...
    'Callback',{@position_edit_Callback,'xunit'}...
    );
uicontrol('Tag','sliderposition_y_text',...
    'Style','text',...
    'Parent',pp1_p3,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10 40 35 20],...
    'String','y'...
    );
uicontrol('Tag','sliderposition_y_index_edit',...
    'Style','edit',...
    'Parent',pp1_p3,...
    'BackgroundColor',[1 1 1],...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[60 40 (mainPanelWidth-90)/2 25],...
    'String','0',...
    'Callback',{@position_edit_Callback,'yindex'}...
    );
uicontrol('Tag','sliderposition_y_unit_edit',...
    'Style','edit',...
    'Parent',pp1_p3,...
    'BackgroundColor',[1 1 1],...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[60+(mainPanelWidth-90)/2 40 (mainPanelWidth-90)/2 25],...
    'String','0',...
    'Callback',{@position_edit_Callback,'yunit'}...
    );
uicontrol('Tag','slider_panel_show_position_checkbox',...
    'Style','checkbox',...
    'Parent',pp1_p3,...
    'BackgroundColor',defaultBackground,...
    'Enable','on',...
    'TooltipString','Check to display current position in main display',...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[20 10 100 25],...
    'String','Show',...
    'Value',0,...
    'Callback',{@showposition_checkbox_Callback}...
    );
uicontrol('Tag','slider_panel_maximum_pushbutton',...
    'Style','pushbutton',...
    'Parent',pp1_p3,...
    'BackgroundColor',defaultBackground,...
    'Enable','on',...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[60+(mainPanelWidth-90)/2 10 (mainPanelWidth-90)/2 25],...
    'String','Maximum',...
    'TooltipString','Set position to maximum in both dimensions',...
    'Callback',{@pushbutton_Callback,'showMaximum'}...
    );

pp1_p4 = uipanel('Tag','measure_panel',...
    'Parent',pp1,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10 mainPanelHeight-490 mainPanelWidth-20 140],...
    'Title','Measure'...
    );
uicontrol('Tag','measure_index_text',...
    'Style','text',...
    'Parent',pp1_p4,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[60 90 (mainPanelWidth-90)/2 25],...
    'String','index'...
    );
uicontrol('Tag','measure_unit_text',...
    'Style','text',...
    'Parent',pp1_p4,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[60+(mainPanelWidth-90)/2 90 (mainPanelWidth-90)/2 25],...
    'String','unit'...
    );
uicontrol('Tag','measure_x_text',...
    'Style','text',...
    'Parent',pp1_p4,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10 70 35 20],...
    'String','x'...
    );
uicontrol('Tag','measure_x_index_edit',...
    'Style','edit',...
    'Parent',pp1_p4,...
    'BackgroundColor',[1 1 1],...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[60 70 (mainPanelWidth-90)/2 25],...
    'String','0',...
    'Callback',{@position_edit_Callback,'xindex'}...
    );
uicontrol('Tag','measure_x_unit_edit',...
    'Style','edit',...
    'Parent',pp1_p4,...
    'BackgroundColor',[1 1 1],...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[60+(mainPanelWidth-90)/2 70 (mainPanelWidth-90)/2 25],...
    'String','0',...
    'Callback',{@position_edit_Callback,'xunit'}...
    );
uicontrol('Tag','measure_y_text',...
    'Style','text',...
    'Parent',pp1_p4,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10 40 35 20],...
    'String','y'...
    );
uicontrol('Tag','measure_y_index_edit',...
    'Style','edit',...
    'Parent',pp1_p4,...
    'BackgroundColor',[1 1 1],...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[60 40 (mainPanelWidth-90)/2 25],...
    'String','0',...
    'Callback',{@position_edit_Callback,'yindex'}...
    );
uicontrol('Tag','measure_y_unit_edit',...
    'Style','edit',...
    'Parent',pp1_p4,...
    'BackgroundColor',[1 1 1],...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[60+(mainPanelWidth-90)/2 40 (mainPanelWidth-90)/2 25],...
    'String','0',...
    'Callback',{@position_edit_Callback,'yunit'}...
    );
uicontrol('Tag','measure_pick_pushbutton',...
    'Style','pushbutton',...
    'Parent',pp1_p4,...
    'BackgroundColor',defaultBackground,...
    'Enable','on',...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[60 10 (mainPanelWidth-90)/2 25],...
    'String','Pick',...
    'TooltipString','Pick point to measure',...
    'Callback',{@pushbutton_Callback,'measurePick'}...
    );
uicontrol('Tag','measure_clear_pushbutton',...
    'Style','pushbutton',...
    'Parent',pp1_p4,...
    'BackgroundColor',defaultBackground,...
    'Enable','on',...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[60+(mainPanelWidth-90)/2 10 (mainPanelWidth-90)/2 25],...
    'String','Clear',...
    'TooltipString','Clear current measurement',...
    'Callback',{@pushbutton_Callback,'measureClear'}...
    );

% elements for pp2
pp2_p1 = uipanel('Tag','fitarea_panel',...
    'Parent',pp2,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10 mainPanelHeight-80 mainPanelWidth-20 60],...
    'Title','Fit area'...
    );
uicontrol('Tag','fitarea_draw_togglebutton',...
    'Style','togglebutton',...
    'Parent',pp2_p1,...
    'BackgroundColor',defaultBackground,...
    'Enable','on',...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10 10 (mainPanelWidth-40)/3 30],...
    'String','Draw',...
    'Callback',{@togglebutton_Callback,'fitareaDraw'}...
    );
uicontrol('Tag','fitarea_hide_togglebutton',...
    'Style','togglebutton',...
    'Parent',pp2_p1,...
    'BackgroundColor',defaultBackground,...
    'Enable','on',...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10+(mainPanelWidth-40)/3 10 (mainPanelWidth-40)/3 30],...
    'String','Hide',...
    'Callback',{@togglebutton_Callback,'fitareaHide'}...
    );
uicontrol('Tag','fitarea_reset_pushbutton',...
    'Style','pushbutton',...
    'Parent',pp2_p1,...
    'BackgroundColor',defaultBackground,...
    'Enable','on',...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10+(mainPanelWidth-40)/3*2 10 (mainPanelWidth-40)/3 30],...
    'String','Reset',...
    'Callback',{@pushbutton_Callback,'fitareaReset'}...
    );

pp2_p2 = uipanel('Tag','fitfunction_panel',...
    'Parent',pp2,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10 mainPanelHeight-210 mainPanelWidth-20 120],...
    'Title','Fit function'...
    );
uicontrol('Tag','fitfunction_text',...
    'Style','text',...
    'Parent',pp2_p2,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'HorizontalAlignment','Right',...
    'Units','Pixels',...
    'Position',[10 70 35 20],...
    'String','fun '...
    );
uicontrol('Tag','fitfunction_popupmenu',...
    'Style','popupmenu',...
    'Parent',pp2_p2,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[60 72 mainPanelWidth-90 20],...
    'String','linear|quadratic|exponential|biexponential',...
    'Callback', {@popupmenu_Callback,'bgfitfunction'}...
    );
uicontrol('Tag','fitfunction_edit',...
    'Style','edit',...
    'Parent',pp2_p2,...
    'BackgroundColor',[1 1 1],...
    'FontUnit','Pixel','Fontsize',12,...
    'HorizontalAlignment','left',...
    'Units','Pixels',...
    'Position',[10 40 (mainPanelWidth-40) 25],...
    'String','c(1)*x+c(2)',...
    'Enable','inactive',...
    'Callback',{@edit_Callback,'fitfunction'}...
    );
uicontrol('Tag','ncoefficients_text',...
    'Style','text',...
    'Parent',pp2_p2,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'HorizontalAlignment','Right',...
    'Units','Pixels',...
    'Position',[10 10 (mainPanelWidth-40)/4*2-10 20],...
    'String','# coefficients '...
    );
uicontrol('Tag','ncoefficients_edit',...
    'Style','edit',...
    'Parent',pp2_p2,...
    'BackgroundColor',[1 1 1],...
    'FontUnit','Pixel','Fontsize',12,...
    'HorizontalAlignment','center',...
    'Units','Pixels',...
    'Position',[10+(mainPanelWidth-40)/4*2 10 (mainPanelWidth-40)/4 25],...
    'String','2',...
    'Enable','inactive',...
    'Callback',{@edit_Callback,'ncoefficients'}...
    );
uicontrol('Tag','fitfunction_test_pushbutton',...
    'Style','pushbutton',...
    'Parent',pp2_p2,...
    'BackgroundColor',defaultBackground,...
    'Enable','on',...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10+(mainPanelWidth-40)/4*3 10 (mainPanelWidth-40)/4 25],...
    'String','Test',...
    'Callback',{@pushbutton_Callback,'fitFunctionTest'}...
    );

pp2_p3 = uipanel('Tag','fitmethod_panel',...
    'Parent',pp2,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10 mainPanelHeight-270 mainPanelWidth-20 50],...
    'Title','Fit method'...
    );
uicontrol('Tag','fitmethod_popupmenu',...
    'Style','popupmenu',...
    'Parent',pp2_p3,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10 10 mainPanelWidth-40 20],...
    'String','fminsearch|lsqnonneg',...
    'Callback', {@popupmenu_Callback,'fitmethod'}...
    );

pp2_p4 = uipanel('Tag','fitcoefficitents_panel',...
    'Parent',pp2,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10 mainPanelHeight-400 mainPanelWidth-20 120],...
    'Title','Coefficients'...
    );
uitable('Tag','referencelines_table',...
    'Parent',pp2_p4,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10 10 (mainPanelWidth-40) 90],...
    'ColumnName', {'Initial','Fitted'},...
    'ColumnFormat',{'numeric','numeric'},...
    'ColumnWidth',{(mainPanelWidth-90)/2 (mainPanelWidth-90)/2},...
    'Data',{1 []; 1 []; 1 []; 1 []; 1 []; 1 []},...
    'RowName',1:6,...
    'ColumnEditable', [true true]...
    );

pp2_p5 = uipanel('Tag','fitreport_panel',...
    'Parent',pp2,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10 mainPanelHeight-470 mainPanelWidth-20 60],...
    'Title','Report'...
    );
uicontrol('Tag','report_clear_pushbutton',...
    'Style','pushbutton',...
    'Parent',pp2_p5,...
    'BackgroundColor',defaultBackground,...
    'Enable','on',...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10 10 (mainPanelWidth-40)/2 30],...
    'String','Clear',...
    'Callback',{@pushbutton_Callback,'reportClear'}...
    );
uicontrol('Tag','report_save_pushbutton',...
    'Style','pushbutton',...
    'Parent',pp2_p5,...
    'BackgroundColor',defaultBackground,...
    'Enable','on',...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10+(mainPanelWidth-40)/2 10 (mainPanelWidth-40)/2 30],...
    'String','Save',...
    'Callback',{@pushbutton_Callback,'reportSave'}...
    );

uicontrol('Tag','fit_pushbutton',...
    'Style','pushbutton',...
	'Parent', pp2, ...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'String','Fit',...
    'TooltipString','Perform fit with parameters set above',...
    'pos',[10+(mainPanelWidth-20)/3*2 10 (mainPanelWidth-20)/3 40],...
    'Enable','on',...
    'Callback',{@pushbutton_Callback,'Fit'}...
    );

% controls for pp3
% ...

pp3_p1 = uipanel('Tag','fitparameters_panel',...
    'Parent',pp3,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10 mainPanelHeight-170 mainPanelWidth-20 150],...
    'Title','Fit parameters'...
    );
uitable('Tag','referencelines_table',...
    'Parent',pp3_p1,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10 10 (mainPanelWidth-40) 120],...
    'ColumnName', {'Value'},...
    'ColumnFormat',{'numeric'},...
    'ColumnWidth',{mainPanelWidth-120},...
    'Data',{ '200*numberofvariables'; '200*numberofvariables'; ...
    '1e-4';  '1e-4'; 'off'},...
    'RowName',{'MaxFunEvals'; 'MaxIter'; 'TolFun'; 'TolX'; 'FunValCheck'},...
    'ColumnEditable', [true]...
    );

pp3_p2 = uipanel('Tag','grid_panel',...
    'Parent',pp3,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10 mainPanelHeight-240 mainPanelWidth-20 60],...
    'Title','Grid'...
    );
uicontrol('Tag','grid_x_togglebutton',...
    'Style','Toggle',...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'String','X',...
    'TooltipString','Show grid in x',...
    'pos',[10 10 (mainPanelWidth-40)/4 30],...
    'parent',pp3_p2,...
    'HandleVisibility','off',...
    'Value',0,...
    'Callback',{@togglebutton_Callback,'gridx'}...
    );
uicontrol('Tag','grid_y_togglebutton',...
    'Style','Toggle',...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'String','Y',...
    'TooltipString','Show grid in y',...
    'pos',[10+(mainPanelWidth-40)/4 10 (mainPanelWidth-40)/4 30],...
    'parent',pp3_p2,...
    'HandleVisibility','off',...
    'Value',0,...
    'Callback',{@togglebutton_Callback,'gridy'}...
    );
uicontrol('Tag','grid_minor_togglebutton',...
    'Style','Toggle',...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'String','minor',...
    'TooltipString',sprintf('%s\n%s','Show minor grid',...
    '(Works only in combination with X or Y grid)'),...
    'pos',[10+(mainPanelWidth-40)/4*2 10 (mainPanelWidth-40)/4 30],...
    'parent',pp3_p2,...
    'HandleVisibility','off',...
    'Value',0,...
    'Callback',{@togglebutton_Callback,'gridminor'}...
    );
uicontrol('Tag','grid_zero_togglebutton',...
    'Style','Toggle',...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'String','zero',...
    'TooltipString','Show dashed line at zero',...
    'pos',[10+(mainPanelWidth-40)/4*3 10 (mainPanelWidth-40)/4 30],...
    'parent',pp3_p2,...
    'HandleVisibility','off',...
    'Value',1,...
    'Callback',{@togglebutton_Callback,'gridzero'}...
    );

pp3_p3 = uipanel('Tag','fitareasettings_panel',...
    'Parent',pp3,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10 mainPanelHeight-340 mainPanelWidth-20 90],...
    'Title','Fit area'...
    );
uicontrol('Tag','fitareasettings_colour_text',...
    'Style','text',...
    'Parent',pp3_p3,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'HorizontalAlignment','Right',...
    'Units','Pixels',...
    'Position',[10 40 (mainPanelWidth-40)/4-10 20],...
    'String','Colour '...
    );
uicontrol('Tag','fitareasettings_coloursample_text',...
    'Style','text',...
    'Parent',pp3_p3,...
    'BackgroundColor',[0.5 0.5 1],...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10+(mainPanelWidth-40)/4 42 (mainPanelWidth-40)/4-10 25],...
    'String',''...
    );
uicontrol('Tag','fitareasettings_colour_pushbutton',...
    'Style','pushbutton',...
    'Parent',pp3_p3,...
    'BackgroundColor',defaultBackground,...
    'Enable','on',...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10+(mainPanelWidth-40)/4*2 40 (mainPanelWidth-40)/4*2 30],...
    'String','Palette...',...
    'Callback',{@pushbutton_Callback,'fitareaColourPalette'}...
    );
uicontrol('Tag','fitareasettings_alpha_text',...
    'Style','text',...
    'Parent',pp3_p3,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'HorizontalAlignment','Right',...
    'Units','Pixels',...
    'Position',[10 10 (mainPanelWidth-40)/4-10 20],...
    'String','Alpha '...
    );
uicontrol('Tag','fitareasettings_alpha_edit',...
    'Style','edit',...
    'Parent',pp3_p3,...
    'BackgroundColor',[1 1 1],...
    'FontUnit','Pixel','Fontsize',12,...
    'HorizontalAlignment','center',...
    'Units','Pixels',...
    'Position',[10+(mainPanelWidth-40)/4 10 (mainPanelWidth-40)/4-10 25],...
    'String','0.4',...
    'Enable','on',...
    'Callback',{@edit_Callback,'fitareaAlpha'}...
    );
uicontrol('Tag','fitareasettings_alpha_slider',...
    'Style', 'slider',...
	'Parent', pp3_p3, ...
    'Min',0,'Max',1,'Value',0.4,...
    'Position', [10+(mainPanelWidth-40)/4*2 10 (mainPanelWidth-40)/4*2 20],...
    'TooltipString','',...
    'Enable','on',...
    'Callback',{@slider_Callback,'fitareaAlpha'}...
    );

pp3_p4 = uipanel('Tag','referencelinessettings_panel',...
    'Parent',pp3,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10 mainPanelHeight-470 mainPanelWidth-20 120],...
    'Title','Reference lines'...
    );
uicontrol('Tag','referencelinessettings_colour_text',...
    'Style','text',...
    'Parent',pp3_p4,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'HorizontalAlignment','Right',...
    'Units','Pixels',...
    'Position',[10 70 (mainPanelWidth-40)/4-10 20],...
    'String','Colour '...
    );
uicontrol('Tag','referencelinessettings_coloursample_text',...
    'Style','text',...
    'Parent',pp3_p4,...
    'BackgroundColor',[1 0 0],...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10+(mainPanelWidth-40)/4 72 (mainPanelWidth-40)/4-10 25],...
    'String',''...
    );
uicontrol('Tag','referencelinessettings_colour_pushbutton',...
    'Style','pushbutton',...
    'Parent',pp3_p4,...
    'BackgroundColor',defaultBackground,...
    'Enable','on',...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10+(mainPanelWidth-40)/4*2 70 (mainPanelWidth-40)/4*2 30],...
    'String','Palette...',...
    'Callback',{@pushbutton_Callback,'referencelinesColourPalette'}...
    );
uicontrol('Tag','referencelinessettings_width_text',...
    'Style','text',...
    'Parent',pp3_p4,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'HorizontalAlignment','Right',...
    'Units','Pixels',...
    'Position',[10 40 (mainPanelWidth-40)/4-10 20],...
    'String','Width '...
    );
uicontrol('Tag','referencelinessettings_width_popupmenu',...
    'Style','popupmenu',...
    'Parent',pp3_p4,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10+(mainPanelWidth-40)/4 42 (mainPanelWidth-40)/4*3 20],...
    'String','1 px|2 px|3 px|4 px|5 px',...
    'Callback', {@popupmenu_Callback,'referencelinesWidth'}...
    );
uicontrol('Tag','referencelinessettings_style_text',...
    'Style','text',...
    'Parent',pp3_p4,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'HorizontalAlignment','Right',...
    'Units','Pixels',...
    'Position',[10 10 (mainPanelWidth-40)/4-10 20],...
    'String','Style '...
    );
uicontrol('Tag','referencelinessettings_style_popupmenu',...
    'Style','popupmenu',...
    'Parent',pp3_p4,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10+(mainPanelWidth-40)/4 12 (mainPanelWidth-40)/4*3 20],...
    'String','solid|dashed|dotted|dashed-dotted',...
    'Callback', {@popupmenu_Callback,'referencelinesStyle'}...
    );

uicontrol('Tag','settings_save_pushbutton',...
    'Style','pushbutton',...
	'Parent', pp3, ...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'String','Save',...
    'TooltipString','Save current settings to configuration file',...
    'pos',[10 10 (mainPanelWidth-20)/2 40],...
    'Enable','off',...
    'Callback',{@pushbutton_Callback,'SettingsSave'}...
    );
uicontrol('Tag','settings_default_pushbutton',...
    'Style','pushbutton',...
	'Parent', pp3, ...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'String','Defaults',...
    'TooltipString','Reset settings to default settings',...
    'pos',[10+(mainPanelWidth-20)/2 10 (mainPanelWidth-20)/2 40],...
    'Enable','on',...
    'Callback',{@pushbutton_Callback,'SettingsDefault'}...
    );


reportPanelSize = get(pp4,'Position');
uicontrol('Tag','summary_panel_edit',...
    'Style','edit',...
    'Parent',pp4,...
    'BackgroundColor',[1 1 1],...
    'Units','Pixels',...
    'FontUnit','Pixel','Fontsize',12,...
    'FontName','FixedWidth',...
    'HorizontalAlignment','Left',...
    'Position',[10 10 reportPanelSize(3)-20 reportPanelSize(4)-40],...
    'Enable','inactive',...
    'Max',2,'Min',0,...
    'String','Nothing to report yet...');

uicontrol('Tag','zoom_togglebutton',...
    'Style','togglebutton',...
	'Parent', hMainFigure, ...
    'BackgroundColor',defaultBackground,...
    'ForegroundColor',[0 0 0],...
    'FontUnit','Pixel','Fontsize',12,...
    'FontWeight','bold',...
    'String','+',...
    'TooltipString','Zoom',...
    'pos',[panel_size*2+5 220 25 25],...
    'Enable','on',...
    'Callback',{@togglebutton_Callback,'Zoom'}...
    );

uicontrol('Tag','help_pushbutton',...
    'Style','pushbutton',...
	'Parent', hMainFigure, ...
    'BackgroundColor',defaultBackground,...
    'ForegroundColor',[0 0 1],...
    'FontUnit','Pixel','Fontsize',12,...
    'FontWeight','bold',...
    'String','?',...
    'TooltipString','Display help for how to operate the AVG GUI',...
    'pos',[panel_size*2+5 190 25 25],...
    'Enable','on',...
    'Callback',@trEPRgui_AVG_helpwindow...
    );


uicontrol('Tag','apply_pushbutton',...
    'Style','pushbutton',...
	'Parent', hMainFigure, ...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'String','Apply',...
    'TooltipString','Apply average and append dataset to main GUI',...
    'pos',[guiSize(1)-((mainPanelWidth))-20 20 (mainPanelWidth)/3 40],...
    'Enable','on',...
    'Callback',{@pushbutton_Callback,'Apply'}...
    );
uicontrol('Tag','discard_pushbutton',...
    'Style','pushbutton',...
	'Parent', hMainFigure, ...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'String','Discard',...
    'TooltipString','Discard current averaging',...
    'pos',[guiSize(1)-((mainPanelWidth)/3*2)-20 20 (mainPanelWidth)/3 40],...
    'Enable','on',...
    'Callback',{@pushbutton_Callback,'Dicard'}...
    );
uicontrol('Tag','close_pushbutton',...
    'Style','pushbutton',...
	'Parent', hMainFigure, ...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'String','Close',...
    'TooltipString','Close AVG GUI',...
    'pos',[guiSize(1)-((mainPanelWidth)/3)-20 20 (mainPanelWidth)/3 40],...
    'Enable','on',...
    'Callback',{@pushbutton_Callback,'Close'}...
    );

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%  Initialization tasks
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% Store handles in guidata
guidata(hMainFigure,guihandles);

% Create appdata structure
ad = guiDataStructure('guiappdatastructure');

% AVG - struct
ad.fft = struct();

setappdata(hMainFigure,'data',ad.data);
setappdata(hMainFigure,'origdata',ad.origdata);
setappdata(hMainFigure,'configuration',ad.configuration);
setappdata(hMainFigure,'control',ad.control);
setappdata(hMainFigure,'fft',ad.fft);

% Make the GUI visible.
set(hMainFigure,'Visible','on');
msgStr = 'AVG GUI window opened';
add2status(msgStr);


% Load data from Main GUI
mainGuiWindow = guiGetWindowHandle();
if (mainGuiWindow)
    admain = getappdata(mainGuiWindow);
    % Check for availability of necessary fields in appdata
    if (isfield(admain,'data') ~= 0)
        ad.data = admain.data;
        setappdata(hMainFigure,'data',ad.data);
        ad.origdata = admain.data;
        setappdata(hMainFigure,'origdata',ad.origdata);
    end
    if (isfield(admain,'control') ~= 0)
        ad.control = admain.control;
        setappdata(hMainFigure,'control',ad.control);
    end
    
    updateSpectra();
    ad = getappdata(hMainFigure);
end

updateAxes();
update_position_display();

if (nargout == 1)
    varargout{1} = hMainFigure;
end

% Add keypress function to every element that can have one...
handles = findall(...
    allchild(hMainFigure),'style','pushbutton',...
    '-or','style','togglebutton',...
    '-or','style','edit',...
    '-or','style','listbox',...
    '-or','style','popupmenu');
for m=1:length(handles)
    set(handles(m),'KeyPressFcn',@keypress_Callback);
end


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%  Callbacks
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

function tbg_Callback(source,~)
    try 
        switchPanel(get(get(source,'SelectedObject'),'String'));
    catch exception
        try
            msgStr = ['An exception occurred. '...
                'The bug reporter should have been opened'];
            add2status(msgStr);
        catch exception2
            exception = addCause(exception2, exception);
            disp(msgStr);
        end
        try
            trEPRgui_bugreportwindow(exception);
        catch exception3
            % If even displaying the bug report window fails...
            exception = addCause(exception3, exception);
            throw(exception);
        end
    end
end

function position_slider_Callback(source,~)
    try
        mainWindow = guiGetWindowHandle(mfilename);
        % Get appdata from AVG GUI
        ad = getappdata(mainWindow);
        
        % Depending on display type settings
        switch ad.control.axis.displayType
            case '1D along x'
                ad.data{ad.control.spectra.active}.display.position.y = ...
                    int16(get(source,'value'));
            case '1D along y'
                ad.data{ad.control.spectra.active}.display.position.x = ...
                    int16(get(source,'value'));
            otherwise
                msg = sprintf('Display type %s currently unsupported',...
                    ad.control.axis.displayType);
                add2status(msg);
        end
        
        % Set appdata from AVG GUI
        setappdata(mainWindow,'data',ad.data);
        
        updateAxes();
        update_position_display();
    catch exception
        try
            msgStr = ['An exception occurred. '...
                'The bug reporter should have been opened'];
            add2status(msgStr);
        catch exception2
            exception = addCause(exception2, exception);
            disp(msgStr);
        end
        try
            trEPRgui_bugreportwindow(exception);
        catch exception3
            % If even displaying the bug report window fails...
            exception = addCause(exception3, exception);
            throw(exception);
        end
    end
end

function position_edit_Callback(source,~,position)
    try
        if isempty(position)
            return;
        end
        
        % If value is empty or NaN after conversion to numeric, restore
        % previous entry and return
        if (isempty(get(source,'String')) || isnan(str2double(get(source,'String'))))
            % Update slider panel
            updateSliderPanel();
            return;
        end
        
        % Get appdata of AVG GUI
        mainWindow = guiGetWindowHandle(mfilename);
        ad = getappdata(mainWindow);
        
        % Be as robust as possible: if there is no axes, default is indices
        [y,x] = size(ad.data{ad.control.spectra.active}.data);
        x = linspace(1,x,x);
        y = linspace(1,y,y);
        if (isfield(ad.data{ad.control.spectra.active},'axes') ...
                && isfield(ad.data{ad.control.spectra.active}.axes,'x') ...
                && isfield(ad.data{ad.control.spectra.active}.axes.x,'values') ...
                && not (isempty(ad.data{ad.control.spectra.active}.axes.x.values)))
            x = ad.data{ad.control.spectra.active}.axes.x.values;
        end
        if (isfield(ad.data{ad.control.spectra.active},'axes') ...
                && isfield(ad.data{ad.control.spectra.active}.axes,'y') ...
                && isfield(ad.data{ad.control.spectra.active}.axes.y,'values') ...
                && not (isempty(ad.data{ad.control.spectra.active}.axes.y.values)))
            y = ad.data{ad.control.spectra.active}.axes.y.values;
        end
        
        switch position
            case 'xindex'
                value = round(str2double(get(source,'String')));
                if (value > length(x)) value = length(x); end
                if (value < 1) value = 1; end
                ad.data{ad.control.spectra.active}.display.position.x = ...
                    value;
            case 'xunit'
                value = str2double(get(source,'String'));
                if (value < x(1)) value = x(1); end
                if (value > x(end)) value = x(end); end
                ad.data{ad.control.spectra.active}.display.position.x = ...
                    interp1(...
                    x,[1:length(x)],...
                    value,...
                    'nearest'...
                    );
            case 'yindex'
                value = round(str2double(get(source,'String')));
                if (value > length(y)) value = length(y); end
                if (value < 1) value = 1; end
                ad.data{ad.control.spectra.active}.display.position.y = ...
                    value;
            case 'yunit'
                value = str2double(get(source,'String'));
                if (value < y(1)) value = y(1); end
                if (value > y(end)) value = y(end); end
                ad.data{ad.control.spectra.active}.display.position.y = ...
                    interp1(...
                    y,[1:length(y)],...
                    value,...
                    'nearest'...
                    );
            otherwise
                return;
        end
        
        % Update appdata of main window
        setappdata(mainWindow,'data',ad.data);
        
        % Update slider values display
        updateSliderPanel()

        %Update main axis
        updateAxes();
    catch exception
        try
            msgStr = ['An exception occurred. '...
                'The bug reporter should have been opened'];
            add2status(msgStr);
        catch exception2
            exception = addCause(exception2, exception);
            disp(msgStr);
        end
        try
            trEPRgui_bugreportwindow(exception);
        catch exception3
            % If even displaying the bug report window fails...
            exception = addCause(exception3, exception);
            throw(exception);
        end
    end
end

function showposition_checkbox_Callback(source,~)
    try
        mainWindow = guiGetWindowHandle(mfilename);
        % Get appdata from AVG GUI
        ad = getappdata(mainWindow);
        
        ad.control.axis.position = get(source,'Value');
        
        % Set appdata from AVG GUI
        setappdata(mainWindow,'control',ad.control);
        
        % Update display
        updateAxes();
    catch exception
        try
            msgStr = ['An exception occurred. '...
                'The bug reporter should have been opened'];
            add2status(msgStr);
        catch exception2
            exception = addCause(exception2, exception);
            disp(msgStr);
        end
        try
            trEPRgui_bugreportwindow(exception);
        catch exception3
            % If even displaying the bug report window fails...
            exception = addCause(exception3, exception);
            throw(exception);
        end
    end
end

function visible_panel_listbox_Callback(source,~)
    try
        mainWindow = guiGetWindowHandle(mfilename);
        % Get appdata from AVG GUI
        ad = getappdata(mainWindow);
        
        ad.control.spectra.active = ad.control.spectra.visible(...
            get(source,'Value')...
            );
        
        % Set appdata from AVG GUI
        setappdata(mainWindow,'control',ad.control);
        
        updateAxes();
        update_position_display();
    catch exception
        try
            msgStr = ['An exception occurred. '...
                'The bug reporter should have been opened'];
            add2status(msgStr);
        catch exception2
            exception = addCause(exception2, exception);
            disp(msgStr);
        end
        try
            trEPRgui_bugreportwindow(exception);
        catch exception3
            % If even displaying the bug report window fails...
            exception = addCause(exception3, exception);
            throw(exception);
        end
    end
end

function edit_Callback(source,~,field)
    try
        if isempty(field)
            return;
        end
        
        % Get appdata of main window
        mainWindow = guiGetWindowHandle(mfilename);
        ad = getappdata(mainWindow);
        
        value = get(source,'String');
        
        switch field
            case 'npts_clipping'
                value = str2double(value);
                xdim = size(ad.data{ad.control.spectra.active}.data,2);
                if isnan(value) || (value > xdim) || (value < 0)
                    set(source,'string',...
                        num2str(ad.control.axis.ignorefirstn));
                else
                    ad.control.axis.ignorefirstn = value;
                    setappdata(mainWindow,'control',ad.control)
                end
                updateAxes();
                return;
            case 'bgfit_ignorepoints'
                value = str2double(value);
                xdim = size(ad.data{ad.control.spectra.active}.data,2);
                if isnan(value) || (value > xdim) || (value < 0)
                    set(source,'string',...
                        num2str(ad.control.axis.ignorefirstn));
                else
                    ad.fft.bgfit.ignorefirstn = value;
                    setappdata(mainWindow,'fft',ad.fft)
                end
                updateAxes();
            otherwise
                return;
        end
    catch exception
        try
            msgStr = ['An exception occurred. '...
                'The bug reporter should have been opened'];
            add2status(msgStr);
        catch exception2
            exception = addCause(exception2, exception);
            disp(msgStr);
        end
        try
            trEPRgui_bugreportwindow(exception);
        catch exception3
            % If even displaying the bug report window fails...
            exception = addCause(exception3, exception);
            throw(exception);
        end
    end
end

function popupmenu_Callback(source,~,action)
    try
        if isempty(action)
            return;
        end
        
        % Get appdata of main window
        mainWindow = guiGetWindowHandle(mfilename);
        ad = getappdata(mainWindow);
        
        % Get handles of main window
        gh = guihandles(mainWindow);
        
        switch action
            case 'bgfitfunction'
                functions = cellstr(get(source,'String'));
                ad.fft.bgfit.function = functions{get(source,'Value')};
                setappdata(mainWindow,'fft',ad.fft);
                updateAxes();
            otherwise
                disp('Unknown popupmenu')
                disp(action);
        end

    catch exception
        try
            msgStr = ['An exception occurred. '...
                'The bug reporter should have been opened'];
            add2status(msgStr);
        catch exception2
            exception = addCause(exception2, exception);
            disp(msgStr);
        end
        try
            trEPRgui_bugreportwindow(exception);
        catch exception3
            % If even displaying the bug report window fails...
            exception = addCause(exception3, exception);
            throw(exception);
        end
    end  
end

function togglebutton_Callback(source,~,action)
    try
        if isempty(action)
            return;
        end
        
        % Get appdata of main window
        mainWindow = guiGetWindowHandle(mfilename);
        ad = getappdata(mainWindow);
        
        % Get handles of main window
        gh = guihandles(mainWindow);

        % Get state of toggle button
        value = get(source,'Value');
        
        % Toggle button
        if value % If toggle switched ON
            switch lower(action)
                case 'pickfrequency'
                    % Switch off zoom
                    zoom(mainWindow,'off');                  
                    % Set pointer callback functions
                    set(gh.zoom_x_togglebutton,'Value',0);
                    set(gh.zoom_xy_togglebutton,'Value',0);
                    set(mainWindow,...
                        'WindowButtonMotionFcn',@trackPointer);
                    set(mainWindow,...
                        'WindowButtonDownFcn',@switchMeasurePointer);
                    return;
                case 'zoom'
                    % Reset pointer callback functions
                    set(mainWindow,'WindowButtonMotionFcn','');
                    set(mainWindow,'WindowButtonDownFcn','');
                    % Reset other zoom toggle button
                    zoom(mainWindow,'on');
                    return;
                otherwise
                    disp('trEPRgui_fitwindow: togglebutton_Callback(): Unknown action');
                    disp(action);
                    return;
            end
        else % If toggle button switched OFF
            switch lower(action)
                case 'pickfrequency'
                    % Reset pointer callback functions
                    set(mainWindow,'WindowButtonMotionFcn','');
                    set(mainWindow,'WindowButtonDownFcn','');
                    return;
                case 'zoom'
                    zoom(mainWindow,'off');
                    return;
                otherwise
                    disp('trEPRgui_fitwindow: togglebutton_Callback(): Unknown action');
                    disp(action);
                    return;
            end
        end
        
    catch exception
        try
            msgStr = ['An exception occurred. '...
                'The bug reporter should have been opened'];
            add2status(msgStr);
        catch exception2
            exception = addCause(exception2, exception);
            disp(msgStr);
        end
        try
            trEPRgui_bugreportwindow(exception);
        catch exception3
            % If even displaying the bug report window fails...
            exception = addCause(exception3, exception);
            throw(exception);
        end
    end
end
        
function pushbutton_Callback(~,~,action)
    try
        if isempty(action)
            return;
        end
        
        % Get appdata of main window
        mainWindow = guiGetWindowHandle(mfilename);
        ad = getappdata(mainWindow);
        
        % Get handles of main window
        gh = guihandles(mainWindow);

        switch action
            case 'fit'
                if strcmp(ad.fft.display,'time')
                    ad.fft.display = 'frequency';
                    set(gh.fft_pushbutton,'String','F -> t');
                    set(gh.fft_pushbutton,'TooltipString',...
                        'Switch from frequency to time domain (Ifit)');
                    set(findall(allchild(pp2),'-not','Type','uipanel'),...
                        'Enable','On');
                    set(findall(allchild(pp3),'-not','Type','uipanel'),...
                        'Enable','On');
                else
                    ad.fft.display = 'time';
                    set(gh.fft_pushbutton,'String','t -> F');
                    set(gh.fft_pushbutton,'TooltipString',...
                        'Switch from time to frequency domain (fit)');
                    set(findall(allchild(pp2),'-not','Type','uipanel'),...
                        'Enable','Inactive');
                    set(findall(allchild(pp3),'-not','Type','uipanel'),...
                        'Enable','Inactive');
                end
                setappdata(mainWindow,'fft',ad.fft);
                updateAxes();
                return;
            case 'showMaximum'
                % If no datasets are loaded, return
                if isempty(ad.data)
                    return;
                end
                [~,ximax] = max(max(ad.data{ad.control.spectra.active}.data));
                [~,yimax] = max(ad.data{ad.control.spectra.active}.data(:,ximax));
                ad.data{ad.control.spectra.active}.display.position.x = ximax;
                ad.data{ad.control.spectra.active}.display.position.y = yimax;
                
                % Set appdata from BLC GUI
                setappdata(mainWindow,'data',ad.data);
                
                updateAxes();
                update_position_display();
                return;
            case 'zoomReset'
                zoom(mainWindow,'off');
                set(gh.zoom_x_togglebutton,'Value',0);
                set(gh.zoom_xy_togglebutton,'Value',0);
                updateAxes();
                return;
            case 'Close'
                msgStr = 'AVG GUI window closed.';
                add2status(msgStr);

                % Look for AVG GUI Help window and if its there, close as
                % well
                hHelpWindow = findobj('Tag','trEPRgui_AVG_helpwindow');
                if ishandle(hHelpWindow)
                    delete(hHelpWindow);
                end
                delete(guiGetWindowHandle(mfilename));
            otherwise
                disp('trEPRgui_fitwindow: pushbutton_Callback(): Unknown action');
                disp(action);
                return;
        end
    catch exception
        try
            msgStr = ['An exception occurred. '...
                'The bug reporter should have been opened'];
            add2status(msgStr);
        catch exception2
            exception = addCause(exception2, exception);
            disp(msgStr);
        end
        try
            trEPRgui_bugreportwindow(exception);
        catch exception3
            % If even displaying the bug report window fails...
            exception = addCause(exception3, exception);
            throw(exception);
        end
    end
end

function slider_Callback(source,~,action)
    try
        if isempty(action)
            return;
        end
        
        % Get appdata of main window
        mainWindow = guiGetWindowHandle(mfilename);
        ad = getappdata(mainWindow);
        
        % Get handles of main window
        gh = guihandles(mainWindow);

        % Get state of toggle button
        value = get(source,'Value');
        
        switch lower(action)
            case 'fitareaalpha'
                set(gh.fitareasettings_alpha_edit,'String',num2str(value));
            otherwise
                disp('trEPRgui_fitwindow: slider_Callback(): Unknown action');
                disp(action);
        end
    catch exception
        try
            msgStr = ['An exception occurred. '...
                'The bug reporter should have been opened'];
            add2status(msgStr);
        catch exception2
            exception = addCause(exception2, exception);
            disp(msgStr);
        end
        try
            trEPRgui_bugreportwindow(exception);
        catch exception3
            % If even displaying the bug report window fails...
            exception = addCause(exception3, exception);
            throw(exception);
        end
    end
end
    
function displaytype_popupmenu_Callback(source,~)
    try
        % Get appdata of main window
        ad = getappdata(hMainFigure);

        % Get handles of main window
        gh = guihandles(hMainFigure);
        
        displayTypes = cellstr(get(source,'String'));
        ad.control.axis.displayType = displayTypes{get(source,'Value')};
        
        % Set appdata of main window
        setappdata(hMainFigure,'control',ad.control);

        % If no datasets are loaded, return
        % NOTE: As we return only here, the display type gets set for later
        if isempty(ad.data)
            return;
        end

        switch ad.control.axis.displayType
            case '2D plot'
                set(gh.position_slider,'Enable','Off');
                updateAxes()
            case '1D along x'
                set(gh.position_slider,'Enable','On');
                updateAxes()
            case '1D along y'
                set(gh.position_slider,'Enable','On');
                updateAxes()
            otherwise
                % unknown
                return;
        end
    catch exception
        try
            msgStr = ['An exception occurred. '...
                'The bug reporter should have been opened'];
            add2status(msgStr);
        catch exception2
            exception = addCause(exception2, exception);
            disp(msgStr);
        end
        try
            trEPRgui_bugreportwindow(exception);
        catch exception3
            % If even displaying the bug report window fails...
            exception = addCause(exception3, exception);
            throw(exception);
        end
    end
end

function keypress_Callback(src,evt)
    try
        if isempty(evt.Character) && isempty(evt.Key)
            % In case "Character" is the empty string, i.e. only modifier key
            % was pressed...
            return;
        end
        mainWindow = guiGetWindowHandle(mfilename);
        % Get appdata from AVG GUI
        ad = getappdata(mainWindow);

        if ~isempty(evt.Modifier)
            if (strcmpi(evt.Modifier{1},'command')) || ...
                    (strcmpi(evt.Modifier{1},'control'))
                switch evt.Key
                    case 'w'
                        pushbutton_Callback(src,evt,'Close')
                        return;
                    case '1'
                        switchPanel('Display');
                        return;
                    case '2'
                        switchPanel('Average');
                        return;
                    case '3'
                        switchPanel('Settings');
                        return;
                    case 'x'
                        ad.control.axis.displayType = '1D along x';
                        setappdata(mainWindow,'control',ad.control);
                        updateAxes();
                        return;
                    case 'y'
                        ad.control.axis.displayType = '1D along y';
                        setappdata(mainWindow,'control',ad.control);
                        updateAxes();
                        return;
                    case 'z'
                        ad.control.axis.displayType = '2D plot';
                        setappdata(mainWindow,'control',ad.control);
                        updateAxes();
                        return;
                end
            end
        end
        switch evt.Key
            case 'f1'
                trEPRgui_AVG_helpwindow();
                return;
            otherwise
%                 disp(evt);
%                 fprintf('       Caller: %i\n\n',src);
                return;
        end
    catch exception
        try
            msgStr = ['An exception occurred. '...
                'The bug reporter should have been opened'];
            add2status(msgStr);
        catch exception2
            exception = addCause(exception2, exception);
            disp(msgStr);
        end
        try
            trEPRgui_bugreportwindow(exception);
        catch exception3
            % If even displaying the bug report window fails...
            exception = addCause(exception3, exception);
            throw(exception);
        end
    end
end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%  Utility functions
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

function switchPanel(panelName)
    try
        panels = [pp1 pp2 pp3];
        buttons = [tb1 tb2 tb3];
        switch panelName
            case 'Display'
                set(panels,'Visible','off');
                set(buttons,'Value',0);
                set(pp1,'Visible','on');
                set(tb1,'Value',1);
            case 'Average'
                set(panels,'Visible','off');
                set(buttons,'Value',0);
                set(pp2,'Visible','on');
                set(tb2,'Value',1);
            case 'Settings'
                set(panels,'Visible','off');
                set(buttons,'Value',0);
                set(pp3,'Visible','on');
                set(tb3,'Value',1);
            otherwise
        end
    catch exception
        try
            msgStr = ['An exception occurred. '...
                'The bug reporter should have been opened'];
            add2status(msgStr);
        catch exception2
            exception = addCause(exception2, exception);
            disp(msgStr);
        end
        try
            trEPRgui_bugreportwindow(exception);
        catch exception3
            % If even displaying the bug report window fails...
            exception = addCause(exception3, exception);
            throw(exception);
        end
    end 
end

function updateSliderPanel()
    try
        mainWindow = guiGetWindowHandle(mfilename);
        % Get appdata of BLC GUI
        ad = getappdata(mainWindow);
        
        % Get handles of BLC GUI
        gh = guihandles(mainWindow);
        
        if ~isfield(ad,'data') || isempty(ad.data)
            set(findall(...
                allchild(gh.sliderposition_panel),...
                'Style','Edit'),'String','1');
            return;
        end

        % Get dimensions and axes of current dataset
        [y,x] = size(ad.data{ad.control.spectra.active}.data);
        x = linspace(1,x,x);
        y = linspace(1,y,y);
        if (isfield(ad.data{ad.control.spectra.active},'axes') ...
                && isfield(ad.data{ad.control.spectra.active}.axes,'x') ...
                && isfield(ad.data{ad.control.spectra.active}.axes.x,'values') ...
                && not (isempty(ad.data{ad.control.spectra.active}.axes.x.values)))
            x = ad.data{ad.control.spectra.active}.axes.x.values;
        end
        if (isfield(ad.data{ad.control.spectra.active},'axes') ...
                && isfield(ad.data{ad.control.spectra.active}.axes,'y') ...
                && isfield(ad.data{ad.control.spectra.active}.axes.y,'values') ...
                && not (isempty(ad.data{ad.control.spectra.active}.axes.y.values)))
            y = ad.data{ad.control.spectra.active}.axes.y.values;
        end
        % In case that we loaded 1D data...
        if isscalar(x)
            x = [x x+1];
        end
        if isscalar(y)
            y = [y y+1];
        end
        
        % update position panel
        set(...
            gh.sliderposition_x_index_edit,...
            'string',...
            ad.data{ad.control.spectra.active}.display.position.x...
            );
        set(...
            gh.sliderposition_x_unit_edit,...
            'string',...
            x(ad.data{ad.control.spectra.active}.display.position.x)...
            );
        set(...
            gh.sliderposition_y_index_edit,...
            'string',...
            ad.data{ad.control.spectra.active}.display.position.y...
            );
        set(...
            gh.sliderposition_y_unit_edit,...
            'string',...
            y(ad.data{ad.control.spectra.active}.display.position.y)...
            );
    catch exception
        try
            msgstr = ['an exception occurred. '...
                'the bug reporter should have been opened'];
            add2status(msgstr);
        catch exception2
            exception = addcause(exception2, exception);
            disp(msgstr);
        end
        try
            trEPRgui_bugreportwindow(exception);
        catch exception3
            % if even displaying the bug report window fails...
            exception = addcause(exception3, exception);
            throw(exception);
        end
    end
end

function updateDimensionPanel(panel)
    try
        if isempty(panel)
            return;
        end
        
        mainWindow = guiGetWindowHandle(mfilename);
        % Get appdata from AVG GUI
        ad = getappdata(mainWindow);

        % Get handles from main window
        gh = guidata(mainWindow);
        
        if isempty(ad.data)
            return;
        end
        
        switch panel
            case 'Datasets'
                if isempty(ad.control.spectra.active) || ...
                        (ad.control.spectra.active == 0)
                    set(findall(...
                        allchild(gh.data_panel_dimensions_panel),...
                        'Style','Edit'),'String','1');
                else
                    [ydim,xdim] = size(ad.data{ad.control.spectra.active}.data);
                    set(gh.data_panel_dimensions_size_x_edit,'String',...
                        num2str(xdim));
                    set(gh.data_panel_dimensions_size_y_edit,'String',...
                        num2str(ydim));
                    set(gh.data_panel_dimensions_min_x_edit,'String',...
                        num2str(ad.data{ad.control.spectra.active}.axes.x.values(1)));
                    set(gh.data_panel_dimensions_min_y_edit,'String',...
                        num2str(ad.data{ad.control.spectra.active}.axes.y.values(1)));
                    set(gh.data_panel_dimensions_max_x_edit,'String',...
                        num2str(ad.data{ad.control.spectra.active}.axes.x.values(end)));
                    set(gh.data_panel_dimensions_max_y_edit,'String',...
                        num2str(ad.data{ad.control.spectra.active}.axes.y.values(end)));
                    set(gh.data_panel_dimensions_step_x_edit,'String',...
                        num2str(ad.data{ad.control.spectra.active}.axes.x.values(2)-...
                        ad.data{ad.control.spectra.active}.axes.x.values(1)));
                    set(gh.data_panel_dimensions_step_y_edit,'String',...
                        num2str(ad.data{ad.control.spectra.active}.axes.y.values(2)-...
                        ad.data{ad.control.spectra.active}.axes.y.values(1)));
                end
                return
            case 'Correction'
                if isempty(ad.acc.data)
                    set(findall(...
                        allchild(gh.results_panel_dimensions_panel),...
                        'Style','Edit'),'String','1');
                else
                    [ydim,xdim] = size(ad.acc.data.data);
                    set(gh.results_panel_dimensions_size_x_edit,'String',...
                        num2str(xdim));
                    set(gh.results_panel_dimensions_size_y_edit,'String',...
                        num2str(ydim));
                    set(gh.results_panel_dimensions_min_x_edit,'String',...
                        num2str(ad.acc.data.axes.x.values(1)));
                    set(gh.results_panel_dimensions_min_y_edit,'String',...
                        num2str(ad.acc.data.axes.y.values(1)));
                    set(gh.results_panel_dimensions_max_x_edit,'String',...
                        num2str(ad.acc.data.axes.x.values(end)));
                    set(gh.results_panel_dimensions_max_y_edit,'String',...
                        num2str(ad.acc.data.axes.y.values(end)));
                    set(gh.results_panel_dimensions_step_x_edit,'String',...
                        num2str(ad.acc.data.axes.x.values(2)-...
                        ad.acc.data.axes.x.values(1)));
                    set(gh.results_panel_dimensions_step_y_edit,'String',...
                        num2str(ad.acc.data.axes.y.values(2)-...
                        ad.acc.data.axes.y.values(1)));
                end
            otherwise
                % Default
        end
    catch exception
        try
            msgStr = ['An exception occurred. '...
                'The bug reporter should have been opened'];
            add2status(msgStr);
        catch exception2
            exception = addCause(exception2, exception);
            disp(msgStr);
        end
        try
            trEPRgui_bugreportwindow(exception);
        catch exception3
            % If even displaying the bug report window fails...
            exception = addCause(exception3, exception);
            throw(exception);
        end
    end 
end

function updateSpectra()
    try
        mainWindow = guiGetWindowHandle(mfilename);
        % Get appdata from AVG GUI
        ad = getappdata(mainWindow);
        
        if isempty(ad.data) || isempty(ad.control.spectra.visible)
            return;
        end
        
        % Get handle for visible spectra listbox
        gh = guidata(mainWindow);
        visLbox = gh.visible_panel_listbox;
        
        % Get indices of invisible spectra
        vis = ad.control.spectra.visible;
        
        % Get names for display in listbox
        labels = cell(0);
        for k=1:length(vis)
            labels{k} = ad.data{vis(k)}.label;
        end
        
        % Update status display
        set(visLbox,'String',labels);
        if (get(visLbox,'Value')>length(vis))
            set(visLbox,'Value',length(vis));
        end
        if ((get(visLbox,'Value')==0) && ~isempty(vis))
            set(visLbox,'Value',1);
        end
        
        % Highlight currently active
        if ad.control.spectra.active
            set(visLbox,'Value',find(vis==ad.control.spectra.active));
        end
        
        % Change enable status of pushbuttons and other elements
        set(gh.slider_panel_maximum_pushbutton,'Enable','on');

    catch exception
        try
            msgStr = ['An exception occurred. '...
                'The bug reporter should have been opened'];
            add2status(msgStr);
        catch exception2
            exception = addCause(exception2, exception);
            disp(msgStr);
        end
        try
            trEPRgui_bugreportwindow(exception);
        catch exception3
            % If even displaying the bug report window fails...
            exception = addCause(exception3, exception);
            throw(exception);
        end
    end 
    
end

function update_position_display()
    mainWindow = guiGetWindowHandle(mfilename);
    % Get appdata from AVG GUI
    ad = getappdata(mainWindow);

    if isempty(ad.data) || isempty(ad.control.spectra.visible)
        return;
    end
    
    % Get handle for visible spectra listbox
    gh = guidata(mainWindow);

    try
        % Set position in time edit boxes
        set(gh.sliderposition_y_index_edit,...
            'String',...
            num2str(ad.data{ad.control.spectra.active}.display.position.y));
        % Set unit
        [y,~] = size(ad.data{ad.control.spectra.active}.data);
        y = linspace(1,y,y);
        if (isfield(ad.data{ad.control.spectra.active},'axes') ...
                && isfield(ad.data{ad.control.spectra.active}.axes,'y') ...
                && isfield(ad.data{ad.control.spectra.active}.axes.y,'values') ...
                && not (isempty(ad.data{ad.control.spectra.active}.axes.y.values)))
            y = ad.data{ad.control.spectra.active}.axes.y.values;
        end
        set(gh.sliderposition_y_unit_edit,...
            'String',...
            num2str(y(ad.data{ad.control.spectra.active}.display.position.y)));
        
        % Set position in time edit boxes
        set(gh.sliderposition_x_index_edit,...
            'String',...
            num2str(ad.data{ad.control.spectra.active}.display.position.x));
        % Set unit
        [~,x] = size(ad.data{ad.control.spectra.active}.data);
        x = linspace(1,x,x);
        if (isfield(ad.data{ad.control.spectra.active},'axes') ...
                && isfield(ad.data{ad.control.spectra.active}.axes,'x') ...
                && isfield(ad.data{ad.control.spectra.active}.axes.x,'values') ...
                && not (isempty(ad.data{ad.control.spectra.active}.axes.x.values)))
            x = ad.data{ad.control.spectra.active}.axes.x.values;
        end
        set(gh.sliderposition_x_unit_edit,...
            'String',...
            num2str(x(ad.data{ad.control.spectra.active}.display.position.x)));
        
        % Set slider
        switch ad.control.axis.displayType
            case '1D along x'
                set(gh.position_slider,'Value',...
                    ad.data{ad.control.spectra.active}.display.position.y);
            case '1D along y'
                set(gh.position_slider,'Value',...
                    ad.data{ad.control.spectra.active}.display.position.x);
        end
    catch exception
        try
            msgStr = ['An exception occurred. '...
                'The bug reporter should have been opened'];
            add2status(msgStr);
        catch exception2
            exception = addCause(exception2, exception);
            disp(msgStr);
        end
        try
            trEPRgui_bugreportwindow(exception);
        catch exception3
            % If even displaying the bug report window fails...
            exception = addCause(exception3, exception);
            throw(exception);
        end
    end 
end


function updateAxes()
    mainWindow = guiGetWindowHandle(mfilename);
    % Get appdata from AVG GUI
    ad = getappdata(mainWindow);

    % Get handles from main window
    gh = guidata(mainWindow);
    
    if isempty(ad.data) || isempty(ad.control.spectra.visible)
%         % Display splash
%         try
%             set(hMainFigure,'CurrentAxes',hPlotAxes);
%             splash = imread(fullfile(trEPRinfo('dir'),...
%                 'GUI','private','splashes','fitGUISplash.png'),'png');
%             image(splash);
%             axis off          % Remove axis ticks and numbers
%         catch exception
%             % If this happens, something probably more serious went wrong...
%             throw(exception);
%         end
        return;
    end
    
    try
        % Set displayType popupmenu
        displayTypes = cellstr(...
            get(gh.displaytype_popupmenu,'String'));
        [~,index] = max(strcmp(ad.control.axis.displayType,displayTypes));
        set(gh.displaytype_popupmenu,'Value',index);
        
        % Check whether we are in time or frequency domain
        if strcmp(ad.fft.display,'frequency')
            [data,xvalues] = dofit(ad.control.spectra.active);
            %xvalues = 1:size(data,2);
            xmeasure = 'frequency';
            xunit = 'MHz';
        else
            data = ad.data{ad.control.spectra.active}.data;
            xvalues = ad.data{ad.control.spectra.active}.axes.x.values;
            xmeasure = ad.data{ad.control.spectra.active}.axes.x.measure;
            xunit = ad.data{ad.control.spectra.active}.axes.x.unit;
        end
        yvalues = ad.data{ad.control.spectra.active}.axes.y.values;
        ymeasure = ad.data{ad.control.spectra.active}.axes.y.measure;
        yunit = ad.data{ad.control.spectra.active}.axes.y.unit;

        [y,x] = size(data);
        
        cla(gh.axis,'reset');
        axes(gh.axis);
        switch ad.control.axis.displayType
            case '2D plot'
                % Disable position slider
                set(gh.position_slider,'Enable','off');

                if strcmp(ad.fft.display,'frequency')
                    z = [ ...
                        min(min(data(:,ad.control.axis.ignorefirstn+1:end))) ...
                        max(max(data(:,ad.control.axis.ignorefirstn+1:end))) ];
                else
                    z = [ min(min(data)) max(max(data)) ];
                end
                hold on;
                % Plot 2D data
                imagesc(...
                    xvalues,...
                    yvalues,...
                    data,'Parent',gh.axis);
                if ad.control.axis.position
                    % Plot red line with position in time
                    plot(gh.axis,...
                        [xvalues(ad.data{ad.control.spectra.active}.display.position.x) ...
                        xvalues(ad.data{ad.control.spectra.active}.display.position.x)],...
                        [yvalues(1) yvalues(end)],...
                        'r-');
                    % Plot red line with position in field
                    plot(gh.axis,...
                        [xvalues(1) xvalues(end)],...
                        [yvalues(ad.data{ad.control.spectra.active}.display.position.y) ...
                        yvalues(ad.data{ad.control.spectra.active}.display.position.y)],...
                        'r-');
                end
                hold off;
                set(gh.axis,'XLim',[...
                    xvalues(1) ...
                    xvalues(end)]);
                set(gh.axis,'YLim',[...
                    yvalues(1) ...
                    yvalues(end)]);
                set(gh.axis,'YDir','normal');
                set(gh.axis,'CLim',z);
                xlabel(gh.axis,sprintf('{\\it %s} / %s',xmeasure,xunit));
                ylabel(gh.axis,sprintf('{\\it %s} / %s',ymeasure,yunit));

            case '1D along x'
                % Enable position slider only if second axis has more than one value
                if (y>1)
                    set(gh.position_slider,...
                        'Min',1,'Max',y,...
                        'Value',...
                        ad.data{ad.control.spectra.active}.display.position.y,...
                        'SliderStep',[1/(y-1) 10/(y-1)],...
                        'Enable','on');
                else
                    set(gh.position_slider,...
                        'Enable','off'...
                        );
                end
                % Plot time trace at given position in spectrum
                hold on;
                if strcmp(ad.fft.bgfit.mode,'bgsubtract')
                    [fit,~,message] = doFit(...
                        [xvalues;...
                        data(...
                        ad.data{ad.control.spectra.active}.display.position.y,:)],...
                        ad.fft.bgfit.function,...
                        ad.fft.bgfit.ignorefirstn);
                    set(gh.summary_panel_edit,'String',message);
                    plot(gh.axis,...
                        xvalues,...
                        data(...
                        ad.data{ad.control.spectra.active}.display.position.y,:)-fit,...
                        'k-');
                else
                    plot(gh.axis,...
                        xvalues,...
                        data(...
                        ad.data{ad.control.spectra.active}.display.position.y,:),...
                        'k-');
                end
                set(gh.axis,'XLim',[xvalues(1) xvalues(end)]);
                if strcmp(ad.fft.display,'frequency')
                    z = [ ...
                        min(min(data(:,ad.control.axis.ignorefirstn+1:end))) ...
                        max(max(data(:,ad.control.axis.ignorefirstn+1:end))) ];
                else
                    z = [ min(min(data)) max(max(data)) ];
                end
                ZLim = [z(1)-((z(2)-z(1))/20) z(2)+((z(2)-z(1))/20)];
                set(gh.axis,'YLim',ZLim);
                if ad.control.axis.position
                    % Plot red line with position in time
                    plot(gh.axis,...
                        [xvalues(ad.data{ad.control.spectra.active}.display.position.x) ...
                        xvalues(ad.data{ad.control.spectra.active}.display.position.x)],...
                        ZLim,...
                        'r-');
                end
                % Plot fitted background
                if strcmp(ad.fft.bgfit.mode,'bgfit')
                    [fit,~,message] = doFit(...
                        [xvalues;...
                        data(...
                        ad.data{ad.control.spectra.active}.display.position.y,:)],...
                        ad.fft.bgfit.function,...
                        ad.fft.bgfit.ignorefirstn);
                    set(gh.summary_panel_edit,'String',message);
                    plot(gh.axis,xvalues,fit,'r-');
                end
                hold off;
                set(gh.axis,'YTickLabel',[]);
                xlabel(gh.axis,sprintf('{\\it %s} / %s',xmeasure,xunit));
                
            case '1D along y'
                % Enable position slider only if second axis has more than one value
                if (x>1)
                    set(gh.position_slider,...
                        'Min',1,'Max',x,...
                        'Value',...
                        ad.data{ad.control.spectra.active}.display.position.x,...
                        'SliderStep',[1/(x-1) 10/(x-1)],...
                        'Enable','on');
                else
                    set(gh.position_slider,...
                        'Enable','off'...
                        );
                end
                % Plot B0 spectrum at given position in time
                hold on;
                % Including this (redundand) line here seems to prevent
                % Matlab from crashing due to stupid errors (plot: vectors
                % must be of same length) when being too fast with the
                % sliders.
                plot(gh.axis,...
                    yvalues,...
                    data(...
                    :,ad.data{ad.control.spectra.active}.display.position.x),...
                    'k-');
                set(gh.axis,'XLim',[yvalues(1) yvalues(end)]);
                z = [ min(min(data)) max(max(data)) ];
                ZLim = [z(1)-((z(2)-z(1))/20) z(2)+((z(2)-z(1))/20)];
                set(gh.axis,'YLim',ZLim);
                if ad.control.axis.position
                    % Plot red line with position in time
                    plot(gh.axis,...
                        [yvalues(ad.data{ad.control.spectra.active}.display.position.y) ...
                        yvalues(ad.data{ad.control.spectra.active}.display.position.y)],...
                        ZLim,...
                        'r-');
                end
                hold off;
                set(gh.axis,'YTickLabel',[]);
                xlabel(gh.axis,sprintf('{\\it %s} / %s',ymeasure,yunit));
        end
    catch exception
        try
            msgStr = ['An exception occurred. '...
                'The bug reporter should have been opened'];
            add2status(msgStr);
        catch exception2
            exception = addCause(exception2, exception);
            disp(msgStr);
        end
        try
            trEPRgui_bugreportwindow(exception);
        catch exception3
            % If even displaying the bug report window fails...
            exception = addCause(exception3, exception);
            throw(exception);
        end
    end 
end

function switchMeasurePointer(~,~)
    try
        % Get appdata of main window
        mainWindow = guiGetWindowHandle(mfilename);
        ad = getappdata(mainWindow);

        % Get handles from main window
        gh = guidata(mainWindow);
        
        % Reset pointer callback functions
        set(mainWindow,'WindowButtonMotionFcn','');
        set(mainWindow,'WindowButtonDownFcn','');
        
        % Reset pointer
        set(mainWindow,'Pointer','arrow');
        
        % Switch off togglebuttons
        set(gh.pickfrequency_togglebutton,'Value',0);
        
        % Update appdata of main window
        setappdata(mainWindow,'control',ad.control);
    catch exception
        try
            msgStr = ['An exception occurred. '...
                'The bug reporter should have been opened'];
            add2status(msgStr);
        catch exception2
            exception = addCause(exception2, exception);
            disp(msgStr);
        end
        try
            trEPRgui_bugreportwindow(exception);
        catch exception3
            % If even displaying the bug report window fails...
            exception = addCause(exception3, exception);
            throw(exception);
        end
    end
end

function trackPointer(varargin)
    try
        mainWindow = guiGetWindowHandle(mfilename);
        
        % Get handles of mainwindow
        gh = guihandles(mainWindow);
        
        % Get appdata of main window
        ad = getappdata(mainWindow);
        
        % Get position of mainAxis (axis coordinates)
        axisPosition = get(hPlotAxes,'Position');
        % Coordinates are "real" x,y pairs relative to the mainWindow
        axisCoordinates = [ ...
            axisPosition(1)-1 ...
            axisPosition(2)-1 ...
            axisPosition(1)+axisPosition(3) ...
            axisPosition(2)+axisPosition(4) ...
            ];
        
        % Get current position of pointer
        pointerPosition = get(mainWindow,'CurrentPoint');
        
        % Create CData for custom pointer
        pointerShapeCData = ones(16)*nan;
        pointerShapeCData([1 8 15],[1:6 10:15]) = 1;
        pointerShapeCData([1:6 10:15],[1 8 15]) = 1;
        
        % As long as we are inside the mainAxis
        if pointerPosition(1) > axisCoordinates(1) && ...
                pointerPosition(1) < axisCoordinates(3) && ...
                pointerPosition(2) > axisCoordinates(2) && ...
                pointerPosition(2) < axisCoordinates(4)
            
            % Get pointer position coordinates relative to axis
            pointerPositionInAxis = ...
                pointerPosition - [axisCoordinates(1) axisCoordinates(2)];
            
            % Set pointer shape
            %set(mainWindow,'Pointer','crosshair');
            set(mainWindow,'Pointer','custom',...
                'PointerShapeCData',pointerShapeCData,...
                'PointerShapeHotSpot',[9 9]);
            
            % Get id of current spectrum (to shorten lines afterwards)
            active = ad.control.spectra.active;
            
            % Get xdata and ydata of currently active dataset
            if (strcmp(ad.control.axis.displayType,'2D plot'))
                xdata = get(...
                    findobj('Parent',hPlotAxes,'-and','Type','image'),...
                    'xdata');
                ydata = get(...
                    findobj('Parent',hPlotAxes,'-and','Type','image'),...
                    'ydata');
            else
                xdata = get(...
                    findobj('Parent',hPlotAxes,'-and','Type','line'),...
                    'xdata');
                ydata = get(...
                    findobj('Parent',hPlotAxes,'-and','Type','line'),...
                    'ydata');
            end
            
            % If we are in 1D display mode and there are more than one spectrum
            % and/or a zero line displayed
            if ( (strcmp(ad.control.axis.displayType,'1D along x') || ...
                    strcmp(ad.control.axis.displayType,'1D along y')) ) && ...
                    (iscell(xdata) && iscell(ydata))
                xdata = xdata{1};
                ydata = ydata{1};
            end
            
            % Create vectors with indices for xdata and ydata
            % Those are used in case of axis limits <> dataset limits
            xindex = [ 1 : length(xdata) ];
            yindex = [ 1 : length(ydata) ];
            
            % Handle situation that axis limits and dataset limits don't coincide.
            % Therefore, in case of the dataset being smaller than axis limits, pad
            % it with the first/last value to fill xdata/ydata, respectively.
            % Alternatively, the dataset being larger than axis limits, cut out
            % part from the dataset that's currently displayed.
            % To find out how many points to pad, use interp1 to get ending points
            % of dataset in current axis.
            
            % IMPORTANT: DON'T MESS UP THE CODE BELOW, IF YOU'RE NOT ABSOLUTELY
            % SURE WHAT YOU'RE DOING. I SPEND A WHOLE DAY FIGHTING WITH IT UNTIL IT
            % WORKED SOMEWHAT FINE.
            
            % Get x and y limits of axes
            axisXLim = get(hPlotAxes,'XLim');
            axisYLim = get(hPlotAxes,'YLim');
            % Get x and y limits of currently active dataset
            datasetXLim = [ xdata(1) xdata(end) ];
            datasetYLim = [ ydata(1) ydata(end) ];
            
            % Get dataset limits in axis coordinates
            if (axisXLim(1) > datasetXLim(1))
                % In case dataset is larger than current axis limits
                
                % Need to come up with a good variable name for that, but it looks
                % like we get here the position of the axis limit in the data
                % vector, what would be very useful
                newDatasetXmin=interp1(...
                    linspace(datasetXLim(1),datasetXLim(2),length(xdata)),...
                    linspace(1,length(xdata),length(xdata)),...
                    axisXLim(1),'nearest');
                newXdata = xdata(newDatasetXmin:end);
                newXindex = xindex(newDatasetXmin:end);
            else
                newDatasetXmin=interp1(...
                    linspace(axisXLim(1),axisXLim(2),length(xdata)),...
                    linspace(1,length(xdata),length(xdata)),...
                    xdata(1),'nearest');
                newXdata = [ones(1,newDatasetXmin)*xdata(1) xdata];
                newXindex = [ones(1,newDatasetXmin)*xindex(1) xindex];
            end
            if (axisXLim(2) < datasetXLim(2))
                % In case dataset is larger than current axis limits
                
                % Need to come up with a good variable name for that, but it looks
                % like we get here the position of the axis limit in the data
                % vector, what would be very useful
                newDatasetXmax=interp1(...
                    linspace(datasetXLim(1),datasetXLim(end),length(xdata)),...
                    linspace(1,length(xdata),length(xdata)),...
                    axisXLim(2),'nearest');
                newXdata = newXdata(1:end-(length(xdata)-newDatasetXmax));
                newXindex = newXindex(1:end-(length(xindex)-newDatasetXmax));
            else
                newDatasetXmax=interp1(...
                    linspace(axisXLim(1),axisXLim(2),length(xdata)),...
                    linspace(1,length(xdata),length(xdata)),...
                    xdata(end),'nearest');
                newXdata = [newXdata ones(1,length(xdata)-newDatasetXmax)*xdata(end)];
                newXindex = [newXindex ones(1,length(xindex)-newDatasetXmax)*xindex(end)];
            end
            
            if (strcmp(ad.control.axis.displayType,'2D plot'))
                if (axisYLim(1) > datasetYLim(1))
                    % In case dataset is larger than current axis limits
                    
                    % Need to come up with a good variable name for that, but it looks
                    % like we get here the position of the axis limit in the data
                    % vector, what would be very useful
                    newDatasetYmin=interp1(...
                        linspace(datasetYLim(1),datasetYLim(2),length(ydata)),...
                        linspace(1,length(ydata),length(ydata)),...
                        axisYLim(1),'nearest');
                    newYdata = ydata(newDatasetYmin:end);
                    newYindex = yindex(newDatasetYmin:end);
                else
                    newDatasetYmin=interp1(...
                        linspace(axisYLim(1),axisYLim(2),length(ydata)),...
                        linspace(1,length(ydata),length(ydata)),...
                        ydata(1),'nearest');
                    newYdata = [ones(1,newDatasetYmin)*ydata(1) ydata];
                    newYindex = [ones(1,newDatasetYmin)*yindex(1) yindex];
                end
                if (axisYLim(2) < datasetYLim(2))
                    % In case dataset is larger than current axis limits
                    
                    % Need to come up with a good variable name for that, but it looks
                    % like we get here the position of the axis limit in the data
                    % vector, what would be very useful
                    newDatasetYmax=interp1(...
                        linspace(datasetYLim(1),datasetYLim(end),length(ydata)),...
                        linspace(1,length(ydata),length(ydata)),...
                        axisYLim(2),'nearest');
                    newYdata = newYdata(1:end-(length(ydata)-newDatasetYmax));
                    newYindex = newYindex(1:end-(length(yindex)-newDatasetYmax));
                else
                    newDatasetYmax=interp1(...
                        linspace(axisYLim(1),axisYLim(2),length(ydata)),...
                        linspace(1,length(ydata),length(ydata)),...
                        ydata(end),'nearest');
                    newYdata = [newYdata ones(1,length(ydata)-newDatasetYmax)*ydata(end)];
                    newYindex = [newYindex ones(1,length(yindex)-newDatasetYmax)*yindex(end)];
                end
            end
            
            switch ad.control.axis.displayType
                case '2D plot'
                    % Get index of current point in dataset
                    indx=interp1(...
                        linspace(1,axisPosition(3),length(newXdata)),...
                        newXindex,...
                        pointerPositionInAxis(1),'nearest');
                    indy=interp1(...
                        linspace(1,axisPosition(4),length(newYdata)),...
                        newYindex,...
                        pointerPositionInAxis(2),'nearest');
                case '1D along x'
                    % Get index of current point in dataset
                    indx=interp1(...
                        linspace(1,axisPosition(3),length(newXdata)),...
                        newXindex,...
                        pointerPositionInAxis(1),'nearest');
                    indy=indx;
                case '1D along y'
                    % Get index of current point in dataset
                    indx=interp1(...
                        linspace(1,axisPosition(3),length(newXdata)),...
                        newXindex,...
                        pointerPositionInAxis(1),'nearest');
                    indy=indx;
                otherwise
                    % That shall never happen!
                    disp('trackPointer(): Unrecognised displayType');
                    disp(ad.control.axis.displayType);
                    set(mainWindow,'Pointer','arrow');
                    return;
            end
            
            % Get value (in units) of current point in dataset
            valx = xdata(indx);
            valy = ydata(indy);
            
            % Set display
            % Update display of first point
            set(gh.pickfrequency_x_index_edit,'String',num2str(indx));
            set(gh.pickfrequency_x_unit_edit,'String',num2str(valx));
        else
            set(mainWindow,'Pointer','arrow');
        end
        
    catch exception
        try
            msgStr = ['An exception occurred. '...
                'The bug reporter should have been opened'];
            add2status(msgStr);
        catch exception2
            exception = addCause(exception2, exception);
            disp(msgStr);
        end
        try
            trEPRgui_bugreportwindow(exception);
        catch exception3
            % If even displaying the bug report window fails...
            exception = addCause(exception3, exception);
            throw(exception);
        end
    end
end

function [fftdata,frequency] = dofit(datasetId)
    try
        mainWindow = guiGetWindowHandle(mfilename);
        % Get appdata from AVG GUI
        ad = getappdata(mainWindow);
        
        % Perform fit
        L = size(ad.data{datasetId}.data,2);
        Nfit = 2^nextpow2(L); % Next power of 2 from length of y
        
        % Very important: fft performs the fit on every COLUMN of the matrix
        Y = fft(ad.data{datasetId}.data',Nfit)/L;
        ad.data{datasetId}.fft.data = Y;
        
        % Sampling frequency
        Fs = 1/(ad.data{datasetId}.axes.x.values(2)-...
            ad.data{datasetId}.axes.x.values(1));
        frequency = Fs/2*linspace(0,1,Nfit/2+1);
        
        fftdata = 2*abs(Y(1:Nfit/2+1,:))';
        
        % Set appdata of AVG GUI
        setappdata(mainWindow,'fft',ad.fft);
    catch exception
        try
            msgStr = ['An exception occurred. '...
                'The bug reporter should have been opened'];
            add2status(msgStr);
        catch exception2
            exception = addCause(exception2, exception);
            disp(msgStr);
        end
        try
            trEPRgui_bugreportwindow(exception);
        catch exception3
            % If even displaying the bug report window fails...
            exception = addCause(exception3, exception);
            throw(exception);
        end
    end
end

function [fit,fval,message] = doFit(data,fitFunType,ignorefirstn)
    function stop = outfun(x, optimValues, state)
        stop = false;
        message{end+1} = sprintf('  %6.0f     %6.0f    %10f  %s',...
            optimValues.iteration,optimValues.funccount,...
            optimValues.fval,optimValues.procedure);
    end
    
    try
        mainWindow = guiGetWindowHandle(mfilename);
        % Get appdata from AVG GUI
        ad = getappdata(mainWindow);
        
        x1 = data(1,ignorefirstn+1:size(data,2));
        x2 = data(1,1:size(data,2));
        
        message = cell(0);
        message{end+1} = ...
            sprintf('Iteration  FuncCount    min f(x)   Procedure');
        
        % Set options for fminsearch
        fitopt = optimset(...
            'Display','Off',...
            'OutputFcn', @outfun ... 
            );

        switch fitFunType
            case 'exponential'
                % A1*exp(k1*x)
                fun1 = @(z)z(1)*exp(z(2)*x1+z(3));
                fun2 = @(z)z(1)*exp(z(2)*x2+z(3));
                fitfun = @(z)sum((fun1(z)-data(2,ignorefirstn+1:end)).^2);
                % Fit function
                [Y,fval,exitflag,output] = fminsearch(fitfun,[1 -1 0],fitopt);
                fit = fun2(Y);
            case 'biexponential'
                % A1*exp(k1*x) + A2*exp(k2*x)
                fun1 = @(z)z(1)*exp(z(2)*x1+z(3))+z(4)*exp(z(5)*x1+z(6));
                fun2 = @(z)z(1)*exp(z(2)*x2+z(3))+z(4)*exp(z(5)*x2+z(6));
                fitfun = @(z)sum((fun1(z)-data(2,ignorefirstn+1:end)).^2);
                % Fit function
                [Y,fval,exitflag,output] = fminsearch(fitfun,[1 -1 0 1 -1 0],fitopt);
                fit = fun2(Y);
        end
        
        % Create message
        message{end+1} = ''; % Empty line
        message{end+1} = 'SUMMARY';
        message{end+1} = sprintf('Algorithm: %s',output.algorithm);
        message{end+1} = sprintf('Number of iterations: %i',output.iterations);
        message{end+1} = sprintf('Number of function evaluations: %i',output.funcCount);
        if (exitflag ~= 1)
            message{end+1} = output.message;
        end
    catch exception
        try
            msgStr = ['An exception occurred. '...
                'The bug reporter should have been opened'];
            add2status(msgStr);
        catch exception2
            exception = addCause(exception2, exception);
            disp(msgStr);
        end
        try
            trEPRgui_bugreportwindow(exception);
        catch exception3
            % If even displaying the bug report window fails...
            exception = addCause(exception3, exception);
            throw(exception);
        end
    end
end

end