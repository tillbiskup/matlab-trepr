function varargout = trEPRgui_BLCwindow(varargin)
% TREPRGUI_BLCWINDOW Provide user with all necessary controls to perform a
% baseline compensation (BLC) to a given dataset.
%
% Normally, this window is called from within the trEPRgui window.
%
% See also TREPRGUI

% (c) 2011, Till Biskup
% 2011-11-08

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%  Construct the components
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% Make GUI effectively a singleton
singleton = guiGetWindowHandle(mfilename);
if (singleton)
    figure(singleton);
    varargout{1} = singleton;
    return;
end

%  Construct the components
hMainFigure = figure('Tag','trepr_gui_BLCwindow',...
    'Visible','off',...
    'Name','trEPR GUI : Baseline Compensation (BLC) Window',...
    'Units','Pixels',...
    'Position',[30,50,800,670],...
    'Resize','off',...
    'NumberTitle','off', ...
    'KeyPressFcn',@keypress_Callback,...
    'Menu','none','Toolbar','none');

defaultBackground = get(hMainFigure,'Color');
guiSize = get(hMainFigure,'Position');
guiSize = guiSize([3,4]);

uicontrol('Tag','axes2_description',...
    'Style','text',...
    'Parent',hMainFigure,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'HorizontalAlignment','Center',...
    'FontWeight','bold',...
    'Position',[70 190 400 20],...
    'String','Spectrum used to fit the baseline to'...
    );


% Create the main axis
axes(...         % the axes for plotting selected plot
    'Tag','axis1',...
	'Parent', hMainFigure, ...
    'FontUnit','Pixel','Fontsize',12,...
    'Units', 'Pixels', ...
    'Position',[70 guiSize(2)-420 400 400]);

axes(...         % the axes for plotting selected plot
    'Tag','axis2',...
	'Parent', hMainFigure, ...
    'FontUnit','Pixel','Fontsize',12,...
    'Units', 'Pixels', ...
    'Position',[20 50 490 140]);

% Slider for position in the dataset
uicontrol('Tag','position_slider',...
    'Style', 'slider',...
	'Parent', hMainFigure, ...
    'Min',1,'Max',100,'Value',50,...
    'Position', [485 guiSize(2)-420 15 400],...
    'TooltipString','',...
    'Enable','off',...
    'Callback',{@position_slider_Callback}...
    );

panel_size = 240;
mainPanelWidth = 260;
mainPanelHeight = 540;
guiSize = get(hMainFigure,'Position');
guiSize = guiSize([3,4]);


% Create button group, toggle buttons for switching btw. panels
hButtonGroup = uibuttongroup('Tag','mainButtonGroup',...
    'BackgroundColor',defaultBackground,...
    'BorderType','none',...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position', [guiSize(1)-mainPanelWidth-20 guiSize(2)-50 mainPanelWidth 30],...
    'Visible','on',...
    'SelectionChangeFcn',{@tbg_Callback});
tb1 = uicontrol('Tag','display_togglebutton',...
    'Style','Toggle',...
	'Parent', hButtonGroup, ...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'String','Display',...
    'TooltipString','Decide which datasets to accumulate',...
    'pos',[0 0 (mainPanelWidth)/3 30],...
    'Enable','on'...
    );
tb2 = uicontrol('Tag','parameters_togglebutton',...
    'Style','Toggle',...
	'Parent', hButtonGroup, ...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'String','Parameters',...
    'TooltipString','Set parameters for accumulation',...
    'pos',[mainPanelWidth/3 0 (mainPanelWidth)/3 30],...
    'Enable','on'...
    );
tb3 = uicontrol('Tag','correction_togglebutton',...
    'Style','Toggle',...
	'Parent', hButtonGroup, ...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'String','Correction',...
    'TooltipString','Show results of accumulation',...
    'pos',[mainPanelWidth/3*2 0 (mainPanelWidth)/3 30],...
    'Enable','on'...
    );

% Create (switchable and overlaying) main panels
pp1 = uipanel('Tag','display_panel',...
    'parent',hMainFigure,...
    'Title','Display',...
    'FontUnit','Pixel','Fontsize',12,...
    'FontWeight','bold',...
    'BackgroundColor',defaultBackground,...
    'Visible','on',...
    'Units','pixels',...
    'Position',[guiSize(1)-mainPanelWidth-20 70 mainPanelWidth mainPanelHeight]);

pp2 = uipanel('Tag','parameters_panel',...
    'parent',hMainFigure,...
    'Title','Parameters',...
    'FontUnit','Pixel','Fontsize',12,...
    'FontWeight','bold',...
    'BackgroundColor',defaultBackground,...
    'Visible','off',...
    'Units','pixels',...
    'Position',[guiSize(1)-mainPanelWidth-20 70 mainPanelWidth mainPanelHeight]);

pp3 = uipanel('Tag','correction_panel',...
    'parent',hMainFigure,...
    'Title','Correction',...
    'FontUnit','Pixel','Fontsize',12,...
    'FontWeight','bold',...
    'BackgroundColor',defaultBackground,...
    'Visible','off',...
    'Units','pixels',...
    'Position',[guiSize(1)-mainPanelWidth-20 70 mainPanelWidth mainPanelHeight]);

pp1_p1 = uipanel('Tag','visible_panel',...
    'Parent',pp1,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10 mainPanelHeight-120 mainPanelWidth-20 100],...
    'Title','Visible datasets'...
    );
uicontrol('Tag','visible_panel_listbox',...
    'Style','listbox',...
    'Parent',pp1_p1,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10 10 panel_size(1)-20 70],...
    'TooltipString','List of currently visible spectra',...
    'String','',...
    'Callback',{@visible_panel_listbox_Callback}...
    );

pp1_p2 = uipanel('Tag','displaytype_panel',...
    'Parent',pp1,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10 mainPanelHeight-180 mainPanelWidth-20 50],...
    'Title','Display type'...
    );
uicontrol('Tag','results_panel_displaytype_popupmenu',...
    'Style','popupmenu',...
    'Parent',pp1_p2,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10 10 panel_size-20 20],...
    'String','2D plot|1D along x|1D along y',...
    'Callback', {@displaytype_popupmenu_Callback}...
    );

pp1_p3 = uipanel('Tag','sliderposition_panel',...
    'Parent',pp1,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10 mainPanelHeight-360 mainPanelWidth-20 170],...
    'Title','Slider position'...
    );
uicontrol('Tag','sliderposition_index_text',...
    'Style','text',...
    'Parent',pp1_p3,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[60 120 (mainPanelWidth-90)/2 25],...
    'String','index'...
    );
uicontrol('Tag','sliderposition_unit_text',...
    'Style','text',...
    'Parent',pp1_p3,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[60+(mainPanelWidth-90)/2 120 (mainPanelWidth-90)/2 25],...
    'String','unit'...
    );
uicontrol('Tag','sliderposition_x_text',...
    'Style','text',...
    'Parent',pp1_p3,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10 100 35 20],...
    'String','x'...
    );
uicontrol('Tag','sliderposition_x_index_edit',...
    'Style','edit',...
    'Parent',pp1_p3,...
    'BackgroundColor',[1 1 1],...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[60 100 (mainPanelWidth-90)/2 25],...
    'String','0',...
    'Callback',{@position_edit_Callback,'xindex'}...
    );
uicontrol('Tag','sliderposition_x_unit_edit',...
    'Style','edit',...
    'Parent',pp1_p3,...
    'BackgroundColor',[1 1 1],...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[60+(mainPanelWidth-90)/2 100 (mainPanelWidth-90)/2 25],...
    'String','0',...
    'Callback',{@position_edit_Callback,'xunit'}...
    );
uicontrol('Tag','sliderposition_y_text',...
    'Style','text',...
    'Parent',pp1_p3,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10 70 35 20],...
    'String','y'...
    );
uicontrol('Tag','sliderposition_y_index_edit',...
    'Style','edit',...
    'Parent',pp1_p3,...
    'BackgroundColor',[1 1 1],...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[60 70 (mainPanelWidth-90)/2 25],...
    'String','0',...
    'Callback',{@position_edit_Callback,'yindex'}...
    );
uicontrol('Tag','sliderposition_y_unit_edit',...
    'Style','edit',...
    'Parent',pp1_p3,...
    'BackgroundColor',[1 1 1],...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[60+(mainPanelWidth-90)/2 70 (mainPanelWidth-90)/2 25],...
    'String','0',...
    'Callback',{@position_edit_Callback,'yunit'}...
    );
uicontrol('Tag','slider_panel_show_position_checkbox',...
    'Style','checkbox',...
    'Parent',pp1_p3,...
    'BackgroundColor',defaultBackground,...
    'Enable','on',...
    'TooltipString','Check to display current position in main display',...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[20 40 mainPanelWidth-30 25],...
    'String','Show position in main display',...
    'Value',1,...
    'Callback',{@showposition_checkbox_Callback}...
    );
uicontrol('Tag','timepoint_panel_maximum_pushbutton',...
    'Style','pushbutton',...
    'Parent',pp1_p3,...
    'BackgroundColor',defaultBackground,...
    'Enable','inactive',...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[mainPanelWidth-135 10 105 25],...
    'String','Set to maximum',...
    'Callback',{@pushbutton_Callback,'showMaximum'}...
    );

pp2_p1 = uipanel('Tag','fitarea_panel',...
    'Parent',pp2,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10 mainPanelHeight-250 mainPanelWidth-20 230],...
    'Title','Fit area width'...
    );
uicontrol('Tag','fitarea_panel_points_text',...
    'Style','text',...
    'Parent',pp2_p1,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[60 185 (mainPanelWidth-90)/2 20],...
    'String','Points'...
    );
uicontrol('Tag','fitarea_panel_pushbutton_text',...
    'Style','text',...
    'Parent',pp2_p1,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[60+(mainPanelWidth-90)/2 185 (mainPanelWidth-90)/2 20],...
    'String','Pick'...
    );
uicontrol('Tag','fitarea_panel_left_text',...
    'Style','text',...
    'Parent',pp2_p1,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10 160 35 20],...
    'String','left'...
    );
uicontrol('Tag','fitarea_panel_left_edit',...
    'Style','edit',...
    'Parent',pp2_p1,...
    'BackgroundColor',[1 1 1],...
    'Enable','inactive',...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[60 160 (mainPanelWidth-90)/2 25],...
    'String','10'...
    );
uicontrol('Tag','fitarea_panel_left_pushbutton',...
    'Style','pushbutton',...
    'Parent',pp2_p1,...
    'BackgroundColor',defaultBackground,...
    'Enable','inactive',...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[60+(mainPanelWidth-90)/2 160 (mainPanelWidth-90)/2 25],...
    'String','Left'...
    );
uicontrol('Tag','fitarea_panel_left_slider',...
    'Style', 'slider',...
	'Parent', pp2_p1, ...
    'Min',1,'Max',100,'Value',50,...
    'Position', [60 130 (mainPanelWidth-90) 20],...
    'TooltipString','',...
    'Enable','off',...
    'Callback',{@fitarea_panel_slider_Callback,'left'}...
    );
uicontrol('Tag','fitarea_panel_right_text',...
    'Style','text',...
    'Parent',pp2_p1,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10 100 35 20],...
    'String','right'...
    );
uicontrol('Tag','fitarea_panel_right_edit',...
    'Style','edit',...
    'Parent',pp2_p1,...
    'BackgroundColor',[1 1 1],...
    'Enable','inactive',...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[60 100 (mainPanelWidth-90)/2 25],...
    'String','10'...
    );
uicontrol('Tag','fitarea_panel_right_pushbutton',...
    'Style','pushbutton',...
    'Parent',pp2_p1,...
    'BackgroundColor',defaultBackground,...
    'Enable','inactive',...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[60+(mainPanelWidth-90)/2 100 (mainPanelWidth-90)/2 25],...
    'String','Right'...
    );
uicontrol('Tag','fitarea_panel_right_slider',...
    'Style', 'slider',...
	'Parent', pp2_p1, ...
    'Min',1,'Max',100,'Value',50,...
    'Position', [60 70 (mainPanelWidth-90) 20],...
    'TooltipString','',...
    'Enable','off',...
    'Callback',{@fitarea_panel_slider_Callback,'right'}...
    );
uicontrol('Tag','fitarea_panel_back_text',...
    'Style','text',...
    'Parent',pp2_p1,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10 40 35 20],...
    'String','back'...
    );
uicontrol('Tag','fitarea_panel_back_edit',...
    'Style','edit',...
    'Parent',pp2_p1,...
    'BackgroundColor',[1 1 1],...
    'Enable','inactive',...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[60 40 (mainPanelWidth-90)/2 25],...
    'String','10'...
    );
uicontrol('Tag','fitarea_panel_back_pushbutton',...
    'Style','pushbutton',...
    'Parent',pp2_p1,...
    'BackgroundColor',defaultBackground,...
    'Enable','inactive',...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[60+(mainPanelWidth-90)/2 40 (mainPanelWidth-90)/2 25],...
    'String','Back'...
    );
uicontrol('Tag','fitarea_panel_back_slider',...
    'Style', 'slider',...
	'Parent', pp2_p1, ...
    'Min',1,'Max',100,'Value',50,...
    'Position', [60 10 (mainPanelWidth-90) 20],...
    'TooltipString','',...
    'Enable','off',...
    'Callback',{@fitarea_panel_slider_Callback,'back'}...
    );

pp2_p2 = uipanel('Tag','addpoints_panel',...
    'Parent',pp2,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10 mainPanelHeight-430 mainPanelWidth-20 170],...
    'Title','Additional points in fit'...
    );
uicontrol('Tag','addpoints_panel_index_text',...
    'Style','text',...
    'Parent',pp2_p2,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[60 125 (mainPanelWidth-90)/2 20],...
    'String','Index'...
    );
uicontrol('Tag','addpoints_panel_pushbutton_text',...
    'Style','text',...
    'Parent',pp2_p2,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[60+(mainPanelWidth-90)/2 125 (mainPanelWidth-90)/2 20],...
    'String','Pick'...
    );
uicontrol('Tag','addpoints_panel_pt1_checkbox',...
    'Style','checkbox',...
    'Parent',pp2_p2,...
    'BackgroundColor',defaultBackground,...
    'Enable','on',...
    'TooltipString','Check to add additional first point for fitting',...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10 100 45 25],...
    'String','#1',...
    'Callback',{@addpoints_panel_checkbox_Callback,1}...
    );
uicontrol('Tag','addpoints_panel_pt1_edit',...
    'Style','edit',...
    'Parent',pp2_p2,...
    'BackgroundColor',[1 1 1],...
    'Enable','off',...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[60 100 (mainPanelWidth-90)/2 25],...
    'String','10'...
    );
uicontrol('Tag','addpoints_panel_pt1_pushbutton',...
    'Style','pushbutton',...
    'Parent',pp2_p2,...
    'BackgroundColor',defaultBackground,...
    'Enable','inactive',...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[60+(mainPanelWidth-90)/2 100 (mainPanelWidth-90)/2 25],...
    'TooltipString','Pick additional first point in axis',...
    'String','Pt 1'...
    );
uicontrol('Tag','addpoints_panel_pt1_slider',...
    'Style', 'slider',...
	'Parent', pp2_p2, ...
    'Min',1,'Max',100,'Value',50,...
    'Position', [60 70 (mainPanelWidth-90) 20],...
    'TooltipString','',...
    'Enable','off',...
    'Callback',{@addpoints_panel_slider_Callback,1}...
    );
uicontrol('Tag','addpoints_panel_pt2_checkbox',...
    'Style','checkbox',...
    'Parent',pp2_p2,...
    'BackgroundColor',defaultBackground,...
    'Enable','on',...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'TooltipString','Check to add additional second point for fitting',...
    'Position',[10 40 45 25],...
    'String','#2',...
    'Callback',{@addpoints_panel_checkbox_Callback,2}...
    );
uicontrol('Tag','addpoints_panel_pt2_edit',...
    'Style','edit',...
    'Parent',pp2_p2,...
    'BackgroundColor',[1 1 1],...
    'Enable','off',...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[60 40 (mainPanelWidth-90)/2 25],...
    'TooltipString','',...
    'String','10'...
    );
uicontrol('Tag','addpoints_panel_pt2_pushbutton',...
    'Style','pushbutton',...
    'Parent',pp2_p2,...
    'BackgroundColor',defaultBackground,...
    'Enable','inactive',...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[60+(mainPanelWidth-90)/2 40 (mainPanelWidth-90)/2 25],...
    'TooltipString','Pick additional second point in axis',...
    'String','Pt 2'...
    );
uicontrol('Tag','addpoints_panel_pt2_slider',...
    'Style', 'slider',...
	'Parent', pp2_p2, ...
    'Min',1,'Max',100,'Value',50,...
    'Position', [60 10 (mainPanelWidth-90) 20],...
    'TooltipString','',...
    'Enable','off',...
    'Callback',{@addpoints_panel_slider_Callback,2}...
    );

pp3_p1 = uipanel('Tag','correctionmethod_panel',...
    'Parent',pp3,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10 mainPanelHeight-200 mainPanelWidth-20 180],...
    'Title','Correction method'...
    );
uicontrol('Tag','correctionmethod_popupmenu',...
    'Style','popupmenu',...
    'Parent',pp3_p1,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10 140 mainPanelWidth-40 20],...
    'TooltipString','Select correction method',...
    'String',{'First n time traces','Last m time traces',...
    'Weighted average of first/last','Subtract fitted baseline'},...
    'Callback', {@correctionmethod_popupmenu_Callback}...
    );
pp3_p1_p1 = uipanel('Tag','correctionmethod_description_panel',...
    'Parent',pp3_p1,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10 10 mainPanelWidth-40 120],...
    'Title','Description'...
    );
uicontrol('Tag','correctionmethod_description_text',...
    'Style','text',...
    'Parent',pp3_p1_p1,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10 10 mainPanelWidth-60 90],...
    'HorizontalAlignment','Left',...
    'FontAngle','oblique',...
    'String',{['Average over the first n time traces '...
    'and subtract this average from every time trace.'] ...
    'Equivalent to subtraction of a polynomial of 0th order.'}...
    );

pp3_p2 = uipanel('Tag','fitfunction_panel',...
    'Parent',pp3,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10 mainPanelHeight-260 mainPanelWidth-20 50],...
    'Title','Fit function'...
    );
uicontrol('Tag','fitfunction_popupmenu',...
    'Style','popupmenu',...
    'Parent',pp3_p2,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10 10 mainPanelWidth-40 20],...
    'Enable','Off',...
    'TooltipString','Select fitting method',...
    'String',{'Polynomial 2nd order','Polynomial 3rd order',...
    'Polynomial 4th order','Polynomial 5th order','Polynomial 6th order'...
    }...
    );

uicontrol('Tag','correction_preview_pushbutton',...
    'Style','pushbutton',...
    'Parent',pp3,...
    'BackgroundColor',defaultBackground,...
    'Enable','on',...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10 mainPanelHeight-300 (mainPanelWidth-20)/2 30],...
    'TooltipString','Previews the currently selected baseline correction settings in the lower axis',...
    'String','Preview',...
    'Callback',{@pushbutton_Callback,'PreviewCorrection'}...
    );
uicontrol('Tag','correction_reset_pushbutton',...
    'Style','pushbutton',...
    'Parent',pp3,...
    'BackgroundColor',defaultBackground,...
    'Enable','on',...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[(mainPanelWidth-20)/2+10 mainPanelHeight-300 (mainPanelWidth-20)/2 30],...
    'TooltipString','Resets the currently displayed spectrum to its original form (before BLC)',...
    'String','Reset',...
    'Callback',{@pushbutton_Callback,'ResetCorrection'}...
    );

pp3_p3 = uipanel('Tag','correctionresult_panel',...
    'Parent',pp3,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10 10 mainPanelWidth-20 220],...
    'Title','Results'...
    );
uicontrol('Tag','correctionresult_panel_edit',...
    'Style','edit',...
    'Parent',pp3_p3,...
    'BackgroundColor',[1 1 1],...
    'Units','Pixels',...
    'FontUnit','Pixel','Fontsize',12,...
    'FontName','FixedWidth',...
    'HorizontalAlignment','Left',...
    'Position',[10 10 mainPanelWidth-40 190],...
    'Enable','inactive',...
    'Max',2,'Min',0,...
    'String','Nothing to report yet...');


uicontrol('Tag','help_pushbutton',...
    'Style','pushbutton',...
	'Parent', hMainFigure, ...
    'BackgroundColor',defaultBackground,...
    'ForegroundColor',[0 0 1],...
    'FontUnit','Pixel','Fontsize',12,...
    'FontWeight','bold',...
    'String','?',...
    'TooltipString','Display help for how to operate the baseline compensation GUI',...
    'pos',[panel_size*2+5 200 25 25],...
    'Enable','on',...
    'Callback',@trEPRgui_BLC_helpwindow...
    );

uicontrol('Tag','apply_pushbutton',...
    'Style','pushbutton',...
	'Parent', hMainFigure, ...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'String','Apply',...
    'TooltipString','Applies the changes made to the currently visible dataset to the dataset in the main GUI',...
    'pos',[guiSize(1)-mainPanelWidth-20 20 mainPanelWidth/3 40],...
    'Enable','on',...
    'Callback',{@pushbutton_Callback,'Apply'}...
    );
uicontrol('Tag','discard_pushbutton',...
    'Style','pushbutton',...
	'Parent', hMainFigure, ...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'String','Discard',...
    'TooltipString','Discards the changes made to the currently visible dataset',...
    'pos',[guiSize(1)-(mainPanelWidth/3*2)-20 20 mainPanelWidth/3 40],...
    'Enable','on',...
    'Callback',{@pushbutton_Callback,'Discard'}...
    );
uicontrol('Tag','close_pushbutton',...
    'Style','pushbutton',...
	'Parent', hMainFigure, ...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'String','Close',...
    'TooltipString','Closes the BLC GUI',...
    'pos',[guiSize(1)-(mainPanelWidth/3)-20 20 mainPanelWidth/3 40],...
    'Enable','on',...
    'Callback',{@pushbutton_Callback,'Close'}...
    );




%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%  Initialization tasks
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% Store handles in guidata
guidata(hMainFigure,guihandles);

% Create appdata structure
ad = struct();
% data - empty cell array
ad.data = cell(0);
% origdata - empty cell array
ad.origdata = cell(0);
% configuration - struct
ad.configuration = struct();
ad.configuration.fit.area.left = 10;
ad.configuration.fit.area.right = 10;
ad.configuration.fit.area.back = 10;
ad.configuration.fit.point(1).active = false;
ad.configuration.fit.point(1).position = [];
ad.configuration.fit.point(2).active = false;
ad.configuration.fit.point(2).position = [];
% control - struct
ad.control = struct();
% control.status - empty struct
ad.control.status = cell(0);
% control.spectra - struct
ad.control.spectra = struct();
ad.control.spectra.active = 0;
ad.control.spectra.invisible = [];
ad.control.spectra.visible = [];
ad.control.spectra.modified = [];
ad.control.spectra.missing = [];
% control.axis - struct
ad.control.axis = struct();
ad.control.axis.grid = struct();
ad.control.axis.grid.zero = true;
ad.control.axis.position = true;
ad.control.axis.limits = struct();
ad.control.axis.limits.auto = true;
ad.control.axis.limits.x = struct();
ad.control.axis.limits.x.min = 0;
ad.control.axis.limits.x.max = 1;
ad.control.axis.limits.y = struct();
ad.control.axis.limits.y.min = 0;
ad.control.axis.limits.y.max = 1;
ad.control.axis.limits.z = struct();
ad.control.axis.limits.z.min = 0;
ad.control.axis.limits.z.max = 1;
ad.control.axis.normalisation = 'none';
ad.control.axis.displayType = '2D plot';
% control.system - struct
ad.control.system = struct();
% Get username of current user
% In worst case, username is an empty string. So nothing should really rely
% on it.
% Windows style
ad.control.system.username = getenv('UserName');
% Unix style
if isempty(ad.control.system.username)
    ad.control.system.username = getenv('USER'); 
end
ad.control.system.platform = platform;
ad.control.system.matlab = version;
ad.control.system.trEPR = trEPRinfo('version');
% blc - struct
ad.blc = struct();
ad.blc.spectra = [];
ad.blc.corrFun = struct();
ad.blc.corrFun.values = [];
ad.blc.corrFun.type = '';
ad.blc.regions = struct();
ad.blc.regions.left = [];
ad.blc.regions.right = [];
ad.blc.regions.back = [];

setappdata(hMainFigure,'data',ad.data);
setappdata(hMainFigure,'origdata',ad.origdata);
setappdata(hMainFigure,'configuration',ad.configuration);
setappdata(hMainFigure,'control',ad.control);
setappdata(hMainFigure,'blc',ad.blc);

% Make the GUI visible.
set(hMainFigure,'Visible','on');
msgStr = 'BLC GUI window opened';
add2status(msgStr);

% Load data from Main GUI
mainGuiWindow = findobj('Tag','trepr_gui_mainwindow');
if (mainGuiWindow)
    admain = getappdata(mainGuiWindow);
    % Check for availability of necessary fields in appdata
    if (isfield(admain,'data') ~= 0)
        ad.data = admain.data;
        % Add BLC specific fields to each dataset
        for k = 1:length(ad.data)
            ad.data{k}.blc.fit = ad.configuration.fit;
            [y,~] = size(ad.data{k}.data);
            for l = 1:length(ad.data{k}.blc.fit.point)
                ad.data{k}.blc.fit.point(l).position = round(y/2);
            end
        end
        setappdata(hMainFigure,'data',ad.data);
        ad.origdata = admain.data;
        setappdata(hMainFigure,'origdata',ad.origdata);
    end
    if (isfield(admain,'control') ~= 0)
        ad.control = admain.control;
        ad.control.axis.position = true;
        setappdata(hMainFigure,'control',ad.control);
    end
    
    updateSpectra();
    update_position_display();
    update_fitarea_display();
    update_addpoint_display();
end

updateAxes();

if (nargout == 1)
    varargout{1} = hMainFigure;
end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%  Callbacks
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

function tbg_Callback(source,~)
    try 
        switchPanel(get(get(source,'SelectedObject'),'String'));
    catch exception
        try
            msgStr = ['An exception occurred. '...
                'The bug reporter should have been opened'];
            add2status(msgStr);
        catch exception2
            exception = addCause(exception2, exception);
            disp(msgStr);
        end
        try
            trEPRgui_bugreportwindow(exception);
        catch exception3
            % If even displaying the bug report window fails...
            exception = addCause(exception3, exception);
            throw(exception);
        end
    end
end

function fitarea_panel_slider_Callback(source,~,area)
    try
        mainWindow = guiGetWindowHandle(mfilename);
        % Get appdata from BLC GUI
        ad = getappdata(mainWindow);
        
        switch area
            case 'left'
                ad.data{ad.control.spectra.active}.blc.fit.area.left = ...
                    int16(get(source,'Value'));
            case 'right'
                ad.data{ad.control.spectra.active}.blc.fit.area.right = ...
                    int16(get(source,'Value'));
            case 'back'
                ad.data{ad.control.spectra.active}.blc.fit.area.back = ...
                    int16(get(source,'Value'));
        end
    
        % Set appdata from BLC GUI
        setappdata(mainWindow,'data',ad.data);
        
        updateAxes();
        update_position_display();
        update_fitarea_display();
    catch exception
        try
            msgStr = ['An exception occurred. '...
                'The bug reporter should have been opened'];
            add2status(msgStr);
        catch exception2
            exception = addCause(exception2, exception);
            disp(msgStr);
        end
        try
            trEPRgui_bugreportwindow(exception);
        catch exception3
            % If even displaying the bug report window fails...
            exception = addCause(exception3, exception);
            throw(exception);
        end
    end
end

function addpoints_panel_checkbox_Callback(source,~,point)
    try
        mainWindow = guiGetWindowHandle(mfilename);
        % Get handles from main window
        gh = guidata(mainWindow);
        
        % Get appdata from BLC GUI
        ad = getappdata(mainWindow);
        
        switch point
            case 1
                if get(source,'Value')
                    set(gh.addpoints_panel_pt1_edit,'Enable','On');
                    set(gh.addpoints_panel_pt1_slider,'Enable','On');
                    %set(gh.addpoints_panel_pt1_pushbutton,'Enable','On');
                    ad.data{ad.control.spectra.active}.blc.fit.point(1).active = true;
                else
                    set(gh.addpoints_panel_pt1_edit,'Enable','Off');
                    set(gh.addpoints_panel_pt1_slider,'Enable','Off');
                    %set(gh.addpoints_panel_pt1_pushbutton,'Enable','Off');
                    ad.data{ad.control.spectra.active}.blc.fit.point(1).active = false;
                end
            case 2
                if get(source,'Value')
                    set(gh.addpoints_panel_pt2_edit,'Enable','On');
                    set(gh.addpoints_panel_pt2_slider,'Enable','On');
                    %set(gh.addpoints_panel_pt2_pushbutton,'Enable','On');
                    ad.data{ad.control.spectra.active}.blc.fit.point(2).active = true;
                else
                    set(gh.addpoints_panel_pt2_edit,'Enable','Off');
                    set(gh.addpoints_panel_pt2_slider,'Enable','Off');
                    %set(gh.addpoints_panel_pt2_pushbutton,'Enable','Off');
                    ad.data{ad.control.spectra.active}.blc.fit.point(2).active = false;
                end
        end
        
        % Set appdata from BLC GUI
        setappdata(mainWindow,'data',ad.data);
        
        updateAxes();
        update_position_display();
        update_fitarea_display();
        update_addpoint_display();
    catch exception
        try
            msgStr = ['An exception occurred. '...
                'The bug reporter should have been opened'];
            add2status(msgStr);
        catch exception2
            exception = addCause(exception2, exception);
            disp(msgStr);
        end
        try
            trEPRgui_bugreportwindow(exception);
        catch exception3
            % If even displaying the bug report window fails...
            exception = addCause(exception3, exception);
            throw(exception);
        end
    end
end

function addpoints_panel_slider_Callback(source,~,point)
    try
        mainWindow = guiGetWindowHandle(mfilename);
        % Get appdata from BLC GUI
        ad = getappdata(mainWindow);
        
        ad.data{ad.control.spectra.active}.blc.fit.point(point).position = ...
            int16(get(source,'value'));
    
        % Set appdata from BLC GUI
        setappdata(mainWindow,'data',ad.data);
        
        updateAxes();
        update_position_display();
        update_fitarea_display();
        update_addpoint_display();
    catch exception
        try
            msgStr = ['An exception occurred. '...
                'The bug reporter should have been opened'];
            add2status(msgStr);
        catch exception2
            exception = addCause(exception2, exception);
            disp(msgStr);
        end
        try
            trEPRgui_bugreportwindow(exception);
        catch exception3
            % If even displaying the bug report window fails...
            exception = addCause(exception3, exception);
            throw(exception);
        end
    end
end

function position_slider_Callback(source,~)
    try
        mainWindow = guiGetWindowHandle(mfilename);
        % Get appdata from BLC GUI
        ad = getappdata(mainWindow);
        
        % Depending on display type settings
        switch ad.control.axis.displayType
            case '1D along x'
                ad.data{ad.control.spectra.active}.display.position.y = ...
                    int16(get(source,'value'));
            case '1D along y'
                ad.data{ad.control.spectra.active}.display.position.x = ...
                    int16(get(source,'value'));
            otherwise
                msg = sprintf('Display type %s currently unsupported',...
                    ad.control.axis.displayType);
                add2status(msg);
        end
        
        % Set appdata from BLC GUI
        setappdata(mainWindow,'data',ad.data);
        
        updateAxes();
        update_position_display();
    catch exception
        try
            msgStr = ['An exception occurred. '...
                'The bug reporter should have been opened'];
            add2status(msgStr);
        catch exception2
            exception = addCause(exception2, exception);
            disp(msgStr);
        end
        try
            trEPRgui_bugreportwindow(exception);
        catch exception3
            % If even displaying the bug report window fails...
            exception = addCause(exception3, exception);
            throw(exception);
        end
    end
end

function showposition_checkbox_Callback(source,~)
    try
        mainWindow = guiGetWindowHandle(mfilename);
        % Get appdata from BLC GUI
        ad = getappdata(mainWindow);
        
        ad.control.axis.position = get(source,'Value');
        
        % Set appdata from BLC GUI
        setappdata(mainWindow,'control',ad.control);
        
        % Update display
        updateAxes();
    catch exception
        try
            msgStr = ['An exception occurred. '...
                'The bug reporter should have been opened'];
            add2status(msgStr);
        catch exception2
            exception = addCause(exception2, exception);
            disp(msgStr);
        end
        try
            trEPRgui_bugreportwindow(exception);
        catch exception3
            % If even displaying the bug report window fails...
            exception = addCause(exception3, exception);
            throw(exception);
        end
    end
end

function visible_panel_listbox_Callback(source,~)
    try
        mainWindow = guiGetWindowHandle(mfilename);
        % Get appdata from BLC GUI
        ad = getappdata(mainWindow);
        
        ad.control.spectra.active = ad.control.spectra.visible(...
            get(source,'Value')...
            );
        
        % Set appdata from BLC GUI
        setappdata(mainWindow,'control',ad.control);
        
        updateAxes();
        update_position_display();
        update_fitarea_display();
        update_addpoint_display();
    catch exception
        try
            msgStr = ['An exception occurred. '...
                'The bug reporter should have been opened'];
            add2status(msgStr);
        catch exception2
            exception = addCause(exception2, exception);
            disp(msgStr);
        end
        try
            trEPRgui_bugreportwindow(exception);
        catch exception3
            % If even displaying the bug report window fails...
            exception = addCause(exception3, exception);
            throw(exception);
        end
    end
end

function displaytype_popupmenu_Callback(source,~)
    try
        % Get appdata of main window
        ad = getappdata(hMainFigure);

        % Get handles of main window
        gh = guihandles(hMainFigure);
        
        displayTypes = cellstr(get(source,'String'));
        ad.control.axis.displayType = displayTypes{get(source,'Value')};
        
        % Set appdata of main window
        setappdata(hMainFigure,'control',ad.control);

        % If no datasets are loaded, return
        % NOTE: As we return only here, the display type gets set for later
        if isempty(ad.data)
            return;
        end

        switch ad.control.axis.displayType
            case '2D plot'
                set(gh.position_slider,'Enable','Off');
                updateAxes()
            case '1D along x'
                set(gh.position_slider,'Enable','On');
                updateAxes()
            case '1D along y'
                set(gh.position_slider,'Enable','On');
                updateAxes()
            otherwise
                % unknown
                return;
        end
    catch exception
        try
            msgStr = ['An exception occurred. '...
                'The bug reporter should have been opened'];
            add2status(msgStr);
        catch exception2
            exception = addCause(exception2, exception);
            disp(msgStr);
        end
        try
            trEPRgui_bugreportwindow(exception);
        catch exception3
            % If even displaying the bug report window fails...
            exception = addCause(exception3, exception);
            throw(exception);
        end
    end
end

function correctionmethod_popupmenu_Callback(source,~)
    try
        % Get appdata of main window
        ad = getappdata(hMainFigure);

        % Get handles of main window
        gh = guihandles(hMainFigure);
        
        correctionMethods = cellstr(get(source,'String'));
        correctionMethod = correctionMethods{get(source,'Value')};
        
        switch correctionMethod
            case 'First n time traces'
                set(gh.fitfunction_popupmenu,'Enable','Off');
                set(gh.correctionmethod_description_text,'String',...
                    {['Average over the first n time traces '...
                    'and subtract this average from every time trace.'] ...
                    'Equivalent to subtraction of a polynomial of 0th order.'});
            case 'Last m time traces'
                set(gh.fitfunction_popupmenu,'Enable','Off');
                set(gh.correctionmethod_description_text,'String',...
                    {['Average over the last m time traces '...
                    'and subtract this average from every time trace.'] ...
                    'Equivalent to subtraction of a polynomial of 0th order.'});
            case 'Weighted average of first/last'
                set(gh.fitfunction_popupmenu,'Enable','Off');
                set(gh.correctionmethod_description_text,'String',...
                    'Equivalent to subtraction of a polynomial of 1st order.');
            case 'Subtract fitted baseline'
                set(gh.fitfunction_popupmenu,'Enable','On');
                set(gh.correctionmethod_description_text,'String',...
                    {['Fit a nonlinear baseline to the end of the spectrum '...
                    '(as displayed at the bottom left) and subtract '...
                    'it from each spectrum at each point in time.'] ...
                    'Currently doesn''t work.'});
            otherwise
                % unknown
                return;
        end
    catch exception
        try
            msgStr = ['An exception occurred. '...
                'The bug reporter should have been opened'];
            add2status(msgStr);
        catch exception2
            exception = addCause(exception2, exception);
            disp(msgStr);
        end
        try
            trEPRgui_bugreportwindow(exception);
        catch exception3
            % If even displaying the bug report window fails...
            exception = addCause(exception3, exception);
            throw(exception);
        end
    end
end

function pushbutton_Callback(~,~,action)
    try
        if isempty(action)
            return;
        end
        
        switch action
            case 'Close'
                if isfield(ad.blc,'spectra') && ~isempty(ad.blc.spectra)
                    msgStr = {...
                        'Baseline correction (BLC) successful.'...
                        'Now trying to rewrite BLC data to main GUI.'...
                        };
                    add2status(msgStr);
                    % Return BLC data to main GUI
                    for k=1:length(ad.blc.spectra)
                        % Remove blc field in data structure
                        if isfield(ad.data{ad.blc.spectra(k)},'blc')
                            ad.data{ad.blc.spectra(k)} = rmfield(...
                                ad.data{ad.blc.spectra(k)},...
                                'blc'...
                                );
                        end
                        status = refreshDatasetInMainGUI(...
                            ad.data{ad.blc.spectra(k)},...
                            ad.blc.spectra(k),...
                            'modified',true);
                        if status
                            disp('Hmm... some problems with appending baseline-correced dataset to main GUI.');
                        end
                    end
                else
                    msgStr = {...
                        'BLC GUI window closed.'...
                        'No baseline correction (BLC) has been performed. '...
                        'Alternatively, user discarded BLC.'
                        };
                    add2status(msgStr);
                end
                % Look for ACC GUI Help window and if its there, close as
                % well
                hHelpWindow = guiGetWindowHandle('trEPRgui_BLC_helpwindow');
                if ishandle(hHelpWindow)
                    delete(hHelpWindow);
                end
                delete(guiGetWindowHandle(mfilename));
                return;
            case 'showMaximum'
                mainWindow = guiGetWindowHandle(mfilename);
                % Get appdata from BLC GUI
                ad = getappdata(mainWindow);
                
                [~,ximax] = max(max(ad.data{ad.control.spectra.active}.data));
                [~,yimax] = max(ad.data{ad.control.spectra.active}.data(:,ximax));
                ad.data{ad.control.spectra.active}.display.position.x = ximax;
                ad.data{ad.control.spectra.active}.display.position.y = yimax;
                
                % Set appdata from BLC GUI
                setappdata(mainWindow,'data',ad.data);
                
                updateAxes();
                update_position_display();
                return;
            case 'PreviewCorrection'
                if_BLC('applyPreview');
                return;
            case 'ResetCorrection'
                if_BLC('resetPreview');
                return;
            case 'Apply'
                if_BLC('apply');
                return;
            case 'Discard'
                if_BLC('reset');
                return;
            otherwise
                return;
        end
    catch exception
        try
            msgStr = ['An exception occurred. '...
                'The bug reporter should have been opened'];
            add2status(msgStr);
        catch exception2
            exception = addCause(exception2, exception);
            disp(msgStr);
        end
        try
            trEPRgui_bugreportwindow(exception);
        catch exception3
            % If even displaying the bug report window fails...
            exception = addCause(exception3, exception);
            throw(exception);
        end
    end
end

function keypress_Callback(src,evt)
    try
        if isempty(evt.Character) && isempty(evt.Key)
            % In case "Character" is the empty string, i.e. only modifier key
            % was pressed...
            return;
        end
        mainWindow = guiGetWindowHandle(mfilename);
        % Get appdata from BLC GUI
        ad = getappdata(mainWindow);
        
        if ~isempty(evt.Modifier)
            if (strcmpi(evt.Modifier{1},'command')) || ...
                    (strcmpi(evt.Modifier{1},'control'))
                switch evt.Key
                    case 'w'
                        pushbutton_Callback(src,evt,'Close')
                        return;
                    case '1'
                        switchPanel('Display');
                        return;
                    case '2'
                        switchPanel('Parameters');
                        return;
                    case '3'
                        switchPanel('Correction');
                        return;
                    case 'x'
                        ad.control.axis.displayType = '1D along x';
                        setappdata(mainWindow,'control',ad.control);
                        updateAxes();
                        return;
                    case 'y'
                        ad.control.axis.displayType = '1D along y';
                        setappdata(mainWindow,'control',ad.control);
                        updateAxes();
                        return;
                    case 'z'
                        ad.control.axis.displayType = '2D plot';
                        setappdata(mainWindow,'control',ad.control);
                        updateAxes();
                        return;
                end
            end
        end
        switch evt.Key
            case 'f1'
                trEPRgui_BLC_helpwindow();
                return;
            otherwise
%                 disp(evt);
%                 fprintf('       Caller: %i\n\n',src);
                return;
        end
    catch exception
        try
            msgStr = ['An exception occurred. '...
                'The bug reporter should have been opened'];
            add2status(msgStr);
        catch exception2
            exception = addCause(exception2, exception);
            disp(msgStr);
        end
        try
            trEPRgui_bugreportwindow(exception);
        catch exception3
            % If even displaying the bug report window fails...
            exception = addCause(exception3, exception);
            throw(exception);
        end
    end
end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%  Utility functions
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

function switchPanel(panelName)
    try
        panels = [pp1 pp2 pp3];
        buttons = [tb1 tb2 tb3];
        switch panelName
            case 'Display'
                set(panels,'Visible','off');
                set(buttons,'Value',0);
                set(pp1,'Visible','on');
                set(tb1,'Value',1);
            case 'Parameters'
                set(panels,'Visible','off');
                set(buttons,'Value',0);
                set(pp2,'Visible','on');
                set(tb2,'Value',1);
            case 'Correction'
                set(panels,'Visible','off');
                set(buttons,'Value',0);
                set(pp3,'Visible','on');
                set(tb3,'Value',1);
            otherwise
        end
    catch exception
        try
            msgStr = ['An exception occurred. '...
                'The bug reporter should have been opened'];
            add2status(msgStr);
        catch exception2
            exception = addCause(exception2, exception);
            disp(msgStr);
        end
        try
            trEPRgui_bugreportwindow(exception);
        catch exception3
            % If even displaying the bug report window fails...
            exception = addCause(exception3, exception);
            throw(exception);
        end
    end 
end

function updateAxes()
    mainWindow = guiGetWindowHandle(mfilename);
    % Get appdata from BLC GUI
    ad = getappdata(mainWindow);

    % Get handles from main window
    gh = guidata(mainWindow);
    
    set(gh.axis2,'YTickLabel',[]);
    
    if isempty(ad.data) || isempty(ad.control.spectra.visible)
        return;
    end
    
    try
        [y,x] = size(ad.data{ad.control.spectra.active}.data);
        backarea = ad.data{ad.control.spectra.active}.blc.fit.area.back;
        leftarea = ad.data{ad.control.spectra.active}.blc.fit.area.left;
        rightarea = ad.data{ad.control.spectra.active}.blc.fit.area.right;

        % Set displayType popupmenu
        displayTypes = cellstr(...
            get(gh.results_panel_displaytype_popupmenu,'String'));
        [~,index] = max(strcmp(ad.control.axis.displayType,displayTypes));
        set(gh.results_panel_displaytype_popupmenu,'Value',index);
        
        cla(gh.axis1,'reset');
        axes(gh.axis1);
        switch ad.control.axis.displayType
            case '2D plot'
                % Disable position slider
                set(gh.position_slider,'Enable','off');
                
                hold on;
                % Plot 2D data
                imagesc(ad.data{ad.control.spectra.active}.data,'Parent',gh.axis1);
                if ad.control.axis.position
                    % Plot red line with position in time
                    plot(gh.axis1,...
                        [ad.data{ad.control.spectra.active}.display.position.x ...
                        ad.data{ad.control.spectra.active}.display.position.x],...
                        [1,y],...
                        'r-');
                    % Plot red line with position in field
                    plot(gh.axis1,...
                        [1,x],...
                        [ad.data{ad.control.spectra.active}.display.position.y ...
                        ad.data{ad.control.spectra.active}.display.position.y],...
                        'r-');
                end
                hold off;
                set(gh.axis1,'XLim',[1 x]);
                set(gh.axis1,'YLim',[1 y]);
                set(gh.axis1,'YDir','normal');
                xlabel(gh.axis1,'{\it time} / points');
                ylabel(gh.axis1,'{\it magnetic field} / points');
                
                % Plot patch indicating the averaged area at the end of the time
                % trace
                patch([x-backarea x-backarea x x],[1 y y 1],[0 0 0 0],...
                    'EdgeColor','none',...
                    'FaceColor','m',...
                    'FaceAlpha',0.4,...
                    'Parent',gh.axis1);
                % Plot patches indicating the fit areas
                patch([1 1 x x],[1 1+leftarea 1+leftarea 1],[0 0 0 0],...
                    'EdgeColor','none',...
                    'FaceColor','r',...
                    'FaceAlpha',0.4,...
                    'Parent',gh.axis1);
                patch([1 1 x x],[y-rightarea y y y-rightarea],[0 0 0 0],...
                    'EdgeColor','none',...
                    'FaceColor','r',...
                    'FaceAlpha',0.4,...
                    'Parent',gh.axis1);
            case '1D along x'
                % Enable position slider only if second axis has more than one value
                if (y>1)
                    set(gh.position_slider,...
                        'Min',1,'Max',y,...
                        'Value',...
                        ad.data{ad.control.spectra.active}.display.position.y,...
                        'SliderStep',[1/(y-1) 10/(y-1)],...
                        'Enable','on');
                else
                    set(gh.position_slider,...
                        'Enable','off'...
                        );
                end
                % Plot time trace at given position in spectrum
                hold on;
                plot(gh.axis1,...
                    1:1:x,...
                    ad.data{ad.control.spectra.active}.data(...
                    ad.data{ad.control.spectra.active}.display.position.y,:),...
                    'k-');
                set(gh.axis1,'XLim',[1 x]);
                z = [ min(min(ad.data{ad.control.spectra.active}.data)) ...
                    max(max(ad.data{ad.control.spectra.active}.data)) ];
                ZLim = [z(1)-((z(2)-z(1))/20) z(2)+((z(2)-z(1))/20)];
                set(gh.axis1,'YLim',ZLim);
                if ad.control.axis.position
                    % Plot red line with position in time
                    plot(gh.axis1,...
                        [ad.data{ad.control.spectra.active}.display.position.x ...
                        ad.data{ad.control.spectra.active}.display.position.x],...
                        ZLim,...
                        'r-');
                end
                hold off;
                set(gh.axis1,'YTickLabel',[]);
                xlabel(gh.axis1,'{\it time} / points');
                
                % Plot patch indicating the averaged area at the end of the time
                % trace
                patch([x-backarea x-backarea x x],...
                    [ZLim(1) ZLim(2) ZLim(2) ZLim(1)],[0 0 0 0],...
                    'EdgeColor','none',...
                    'FaceColor','m',...
                    'FaceAlpha',0.4,...
                    'Parent',gh.axis1);
            case '1D along y'
                % Enable position slider only if second axis has more than one value
                if (x>1)
                    set(gh.position_slider,...
                        'Min',1,'Max',x,...
                        'Value',...
                        ad.data{ad.control.spectra.active}.display.position.x,...
                        'SliderStep',[1/(x-1) 10/(x-1)],...
                        'Enable','on');
                else
                    set(gh.position_slider,...
                        'Enable','off'...
                        );
                end
                % Plot B0 spectrum at given position in time
                hold on;
                % Including this (redundand) line here seems to prevent
                % Matlab from crashing due to stupid errors (plot: vectors
                % must be of same length) when being too fast with the
                % sliders.
                [y,x] = size(ad.data{ad.control.spectra.active}.data);
                plot(gh.axis1,...
                    1:1:y,...
                    ad.data{ad.control.spectra.active}.data(...
                    :,ad.data{ad.control.spectra.active}.display.position.x),...
                    'k-');
                set(gh.axis1,'XLim',[1 y]);
                z = [ min(min(ad.data{ad.control.spectra.active}.data)) ...
                    max(max(ad.data{ad.control.spectra.active}.data)) ];
                ZLim = [z(1)-((z(2)-z(1))/20) z(2)+((z(2)-z(1))/20)];
                set(gh.axis1,'YLim',ZLim);
                if ad.control.axis.position
                    % Plot red line with position in time
                    plot(gh.axis1,...
                        [ad.data{ad.control.spectra.active}.display.position.y ...
                        ad.data{ad.control.spectra.active}.display.position.y],...
                        ZLim,...
                        'r-');
                end
                hold off;
                set(gh.axis1,'YTickLabel',[]);
                xlabel(gh.axis1,'{\it magnetic field} / points');
                
                % Plot patches indicating the fit areas
                patch(...
                    [1 1 leftarea+1 leftarea+1],...
                    [ZLim(1) ZLim(2) ZLim(2) ZLim(1)],[0 0 0 0],...
                    'EdgeColor','none',...
                    'FaceColor','r',...
                    'FaceAlpha',0.4,...
                    'Parent',gh.axis1);
                patch(...
                    [y-rightarea y-rightarea y y],...
                    [ZLim(1) ZLim(2) ZLim(2) ZLim(1)],[0 0 0 0],...
                    'EdgeColor','none',...
                    'FaceColor','r',...
                    'FaceAlpha',0.4,...
                    'Parent',gh.axis1);
        end
        
        % Plot averaged B0 spectra for fitting
        meanData = mean(ad.data{ad.control.spectra.active}.data(...
            :,x-ad.data{ad.control.spectra.active}.blc.fit.area.back:x...
            ),2);
        % Including this (redundand) line here seems to prevent
        % Matlab from crashing due to stupid errors (plot: vectors
        % must be of same length) when being too fast with the
        % sliders.
        y = length(meanData);
        z = [ min(meanData) max(meanData) ];
        ZLim = [z(1)-((z(2)-z(1))/20) z(2)+((z(2)-z(1))/20)];
        axes(gh.axis2);
        cla(gh.axis2,'reset');
        hold on;
        plot(gh.axis2,...
            1:1:length(meanData),...
            meanData,...
            'k-');
        if ~isempty(ad.blc.corrFun.values)
            plot(gh.axis2,...
                1:1:y,...
                ad.blc.corrFun.values,...
                'r-');
        else
        end
        for k=1:length(ad.data{ad.control.spectra.active}.blc.fit.point)
            if (ad.data{ad.control.spectra.active}.blc.fit.point(k).active)
                line(...
                    [ ad.data{ad.control.spectra.active}.blc.fit.point(k).position ...
                    ad.data{ad.control.spectra.active}.blc.fit.point(k).position ],...
                    [ ZLim(1) ZLim(2) ],...
                    'Color','r',...
                    'Parent',gh.axis2);
            end
        end
        hold off;
        set(gh.axis2,'XLim',[1 length(meanData)]);
        set(gh.axis2,'YLim',ZLim);
        set(gh.axis2,'YTickLabel',[]);
        xlabel(gh.axis2,'{\it magnetic field} / points');
        
        % Plot patches indicating the fit areas
        patch([1 1 leftarea+1 leftarea+1],[ZLim(1) ZLim(2) ZLim(2) ZLim(1)],[0 0 0 0],...
            'EdgeColor','none',...
            'FaceColor','r',...
            'FaceAlpha',0.4,...
            'Parent',gh.axis2);
        
        y = length(meanData);
        patch([y-rightarea y-rightarea y y],[ZLim(1) ZLim(2) ZLim(2) ZLim(1)],[0 0 0 0],...
            'EdgeColor','none',...
            'FaceColor','r',...
            'FaceAlpha',0.4,...
            'Parent',gh.axis2);

    catch exception
        try
            msgStr = ['An exception occurred. '...
                'The bug reporter should have been opened'];
            add2status(msgStr);
        catch exception2
            exception = addCause(exception2, exception);
            disp(msgStr);
        end
        try
            trEPRgui_bugreportwindow(exception);
        catch exception3
            % If even displaying the bug report window fails...
            exception = addCause(exception3, exception);
            throw(exception);
        end
    end 
end

function updateSpectra()
    try
        mainWindow = guiGetWindowHandle(mfilename);
        % Get appdata from BLC GUI
        ad = getappdata(mainWindow);
        
        if isempty(ad.data) || isempty(ad.control.spectra.visible)
            return;
        end
        
        % Get handle for visible spectra listbox
        gh = guidata(mainWindow);
        visLbox = gh.visible_panel_listbox;
        
        % Get indices of invisible spectra
        vis = ad.control.spectra.visible;
        
        % Get names for display in listbox
        labels = cell(0);
        for k=1:length(vis)
            labels{k} = ad.data{vis(k)}.label;
        end
        
        % Update status display
        set(visLbox,'String',labels);
        if (get(visLbox,'Value')>length(vis))
            set(visLbox,'Value',length(vis));
        end
        if ((get(visLbox,'Value')==0) && ~isempty(vis))
            set(visLbox,'Value',1);
        end
        
        % Highlight currently active
        if ad.control.spectra.active
            set(visLbox,'Value',find(vis==ad.control.spectra.active));
        end
        
        % Change enable status of pushbuttons and other elements
        set(gh.timepoint_panel_maximum_pushbutton,'Enable','on');
        
        [y,x] = size(ad.data{ad.control.spectra.active}.data);
        % Set timepoint slider
        set(gh.fitarea_panel_back_slider,'Min',1,'Max',x,...
            'Value',ad.data{ad.control.spectra.active}.blc.fit.area.back,...
            'SliderStep',[1/(x-1) 10/(x-1)],...
            'Enable','on');
        set(gh.fitarea_panel_left_slider,'Min',1,'Max',y,...
            'Value',ad.data{ad.control.spectra.active}.blc.fit.area.left,...
            'SliderStep',[1/(y-1) 10/(y-1)],...
            'Enable','on');
        set(gh.fitarea_panel_right_slider,'Min',1,'Max',y,...
            'Value',ad.data{ad.control.spectra.active}.blc.fit.area.right,...
            'SliderStep',[1/(y-1) 10/(y-1)],...
            'Enable','on');
        set(gh.addpoints_panel_pt1_slider,'Min',1,'Max',y,...
            'Value',ad.data{ad.control.spectra.active}.blc.fit.point(1).position,...
            'SliderStep',[1/(y-1) 10/(y-1)]...
            );
        set(gh.addpoints_panel_pt2_slider,'Min',1,'Max',y,...
            'Value',ad.data{ad.control.spectra.active}.blc.fit.point(2).position,...
            'SliderStep',[1/(y-1) 10/(y-1)]...
            );
    catch exception
        try
            msgStr = ['An exception occurred. '...
                'The bug reporter should have been opened'];
            add2status(msgStr);
        catch exception2
            exception = addCause(exception2, exception);
            disp(msgStr);
        end
        try
            trEPRgui_bugreportwindow(exception);
        catch exception3
            % If even displaying the bug report window fails...
            exception = addCause(exception3, exception);
            throw(exception);
        end
    end 
    
end

function update_position_display()
    mainWindow = guiGetWindowHandle(mfilename);
    % Get appdata from BLC GUI
    ad = getappdata(mainWindow);

    if isempty(ad.data) || isempty(ad.control.spectra.visible)
        return;
    end
    
    % Get handle for visible spectra listbox
    gh = guidata(mainWindow);

    try
        % Set position in time edit boxes
        set(gh.sliderposition_y_index_edit,...
            'String',...
            num2str(ad.data{ad.control.spectra.active}.display.position.y));
        % Set unit
        [y,~] = size(ad.data{ad.control.spectra.active}.data);
        y = linspace(1,y,y);
        if (isfield(ad.data{ad.control.spectra.active},'axes') ...
                && isfield(ad.data{ad.control.spectra.active}.axes,'y') ...
                && isfield(ad.data{ad.control.spectra.active}.axes.y,'values') ...
                && not (isempty(ad.data{ad.control.spectra.active}.axes.y.values)))
            y = ad.data{ad.control.spectra.active}.axes.y.values;
        end
        set(gh.sliderposition_y_unit_edit,...
            'String',...
            num2str(y(ad.data{ad.control.spectra.active}.display.position.y)));
        
        % Set position in time edit boxes
        set(gh.sliderposition_x_index_edit,...
            'String',...
            num2str(ad.data{ad.control.spectra.active}.display.position.x));
        % Set unit
        [~,x] = size(ad.data{ad.control.spectra.active}.data);
        x = linspace(1,x,x);
        if (isfield(ad.data{ad.control.spectra.active},'axes') ...
                && isfield(ad.data{ad.control.spectra.active}.axes,'x') ...
                && isfield(ad.data{ad.control.spectra.active}.axes.x,'values') ...
                && not (isempty(ad.data{ad.control.spectra.active}.axes.x.values)))
            x = ad.data{ad.control.spectra.active}.axes.x.values;
        end
        set(gh.sliderposition_x_unit_edit,...
            'String',...
            num2str(x(ad.data{ad.control.spectra.active}.display.position.x)));
        
        % Set slider
        switch ad.control.axis.displayType
            case '1D along x'
                set(gh.position_slider,'Value',...
                    ad.data{ad.control.spectra.active}.display.position.y);
            case '1D along y'
                set(gh.position_slider,'Value',...
                    ad.data{ad.control.spectra.active}.display.position.x);
        end
    catch exception
        try
            msgStr = ['An exception occurred. '...
                'The bug reporter should have been opened'];
            add2status(msgStr);
        catch exception2
            exception = addCause(exception2, exception);
            disp(msgStr);
        end
        try
            trEPRgui_bugreportwindow(exception);
        catch exception3
            % If even displaying the bug report window fails...
            exception = addCause(exception3, exception);
            throw(exception);
        end
    end 
end

function update_fitarea_display()
    mainWindow = guiGetWindowHandle(mfilename);
    % Get appdata from BLC GUI
    ad = getappdata(mainWindow);

    if isempty(ad.data) || isempty(ad.control.spectra.visible)
        return;
    end
    
    % Get handle for visible spectra listbox
    gh = guidata(mainWindow);

    try
        % Set position in edit boxes
        set(gh.fitarea_panel_left_edit,...
            'String',...
            num2str(ad.data{ad.control.spectra.active}.blc.fit.area.left));
        set(gh.fitarea_panel_right_edit,...
            'String',...
            num2str(ad.data{ad.control.spectra.active}.blc.fit.area.right));
        set(gh.fitarea_panel_back_edit,...
            'String',...
            num2str(ad.data{ad.control.spectra.active}.blc.fit.area.back));
        % Set slider
        set(gh.fitarea_panel_left_slider,'Value',...
            ad.data{ad.control.spectra.active}.blc.fit.area.left);
        set(gh.fitarea_panel_right_slider,'Value',...
            ad.data{ad.control.spectra.active}.blc.fit.area.right);
        set(gh.fitarea_panel_back_slider,'Value',...
            ad.data{ad.control.spectra.active}.blc.fit.area.back);
    catch exception
        try
            msgStr = ['An exception occurred. '...
                'The bug reporter should have been opened'];
            add2status(msgStr);
        catch exception2
            exception = addCause(exception2, exception);
            disp(msgStr);
        end
        try
            trEPRgui_bugreportwindow(exception);
        catch exception3
            % If even displaying the bug report window fails...
            exception = addCause(exception3, exception);
            throw(exception);
        end
    end 
end

function update_addpoint_display()
    try
        mainWindow = guiGetWindowHandle(mfilename);
        % Get appdata from BLC GUI
        ad = getappdata(mainWindow);
        
        if isempty(ad.data) || isempty(ad.control.spectra.visible)
            return;
        end
        
        % Get handle for visible spectra listbox
        gh = guidata(mainWindow);
        
        % Set position in edit boxes
        set(gh.addpoints_panel_pt1_edit,...
            'String',...
            num2str(ad.data{ad.control.spectra.active}.blc.fit.point(1).position));
        set(gh.addpoints_panel_pt2_edit,...
            'String',...
            num2str(ad.data{ad.control.spectra.active}.blc.fit.point(2).position));
        % Set slider
        set(gh.addpoints_panel_pt1_slider,'Value',...
            ad.data{ad.control.spectra.active}.blc.fit.point(1).position);
        set(gh.addpoints_panel_pt2_slider,'Value',...
            ad.data{ad.control.spectra.active}.blc.fit.point(2).position);
    catch exception
        try
            msgStr = ['An exception occurred. '...
                'The bug reporter should have been opened'];
            add2status(msgStr);
        catch exception2
            exception = addCause(exception2, exception);
            disp(msgStr);
        end
        try
            trEPRgui_bugreportwindow(exception);
        catch exception3
            % If even displaying the bug report window fails...
            exception = addCause(exception3, exception);
            throw(exception);
        end
    end 
end

function if_BLC(action)
    try
        mainWindow = guiGetWindowHandle(mfilename);
        % Get appdata and gui handles from BLC GUI
        ad = getappdata(mainWindow);
        gh = guidata(mainWindow);
        
        if isempty(ad.data) || isempty(ad.control.spectra.visible)
            return;
        end
        
        % Get correction method
        correctionMethods = cellstr(...
            get(gh.correctionmethod_popupmenu,'String'));
        correctionMethod = char(correctionMethods(...
            get(gh.correctionmethod_popupmenu,'Value')...
            ));
        ad.blc.regions.left = ...
            str2double(get(gh.fitarea_panel_left_edit,'String'));
        ad.blc.regions.right = ...
            str2double(get(gh.fitarea_panel_right_edit,'String'));
        ad.blc.regions.back = ...
            str2double(get(gh.fitarea_panel_back_edit,'String'));
        
        switch action
            case 'applyPreview'
                switch correctionMethod
                    case 'First n time traces'
                        [y,x] = size(ad.data{ad.control.spectra.active}.data);
                        ad.blc.corrFun.values = ones(y,1) * mean(mean(...
                            ad.data{ad.control.spectra.active}.data(...
                            1:ad.blc.regions.left,...
                            end-ad.blc.regions.back:end)));
                        setappdata(mainWindow,'blc',ad.blc);
                        updateAxes();
                        return;
                    case 'Last m time traces'
                        [y,x] = size(ad.data{ad.control.spectra.active}.data);
                        ad.blc.corrFun.values = ones(y,1) * mean(mean(...
                            ad.data{ad.control.spectra.active}.data(...
                            end-ad.blc.regions.right:end,...
                            end-ad.blc.regions.back:end)));
                        setappdata(mainWindow,'blc',ad.blc);
                        updateAxes();
                        return;
                    case 'Weighted average of first/last'
                        [y,x] = size(ad.data{ad.control.spectra.active}.data);
                        left = mean(mean(...
                            ad.data{ad.control.spectra.active}.data(...
                            1:ad.blc.regions.left,...
                            end-ad.blc.regions.back:end)));
                        right = mean(mean(...
                            ad.data{ad.control.spectra.active}.data(...
                            end-ad.blc.regions.right:end,...
                            end-ad.blc.regions.back:end)));
                        ad.blc.corrFun.values = linspace(left,right,y);
                        setappdata(mainWindow,'blc',ad.blc);
                        updateAxes();
                        return;
                    otherwise
                        disp('Unknown correction method');
                end
            case 'resetPreview'
                ad.blc.corrFun.values = [];
                setappdata(mainWindow,'blc',ad.blc);
                updateAxes();
                return;
            case 'apply'
                ad.data{ad.control.spectra.active}.data = trEPRBGC(...
                    ad.data{ad.control.spectra.active}.data, ...
                    'numBGprofiles',...
                    [ad.blc.regions.left ad.blc.regions.right] ...
                    );
                % Add record to history
                ad.data{ad.control.spectra.active}.history{end+1} = struct(...
                    'date',datestr(now,31),...
                    'method','trEPRBGC',...
                    'system',struct(...
                    'username',ad.control.system.username,...
                    'platform',ad.control.system.platform,...
                    'matlab',ad.control.system.matlab,...
                    'trEPR',ad.control.system.trEPR...
                    ),...
                    'parameters',struct(...
                    'numBGprofiles',...
                    [ad.blc.regions.left ad.blc.regions.right]...
                    ),...
                    'info',''...
                    );
                ad.blc.spectra = ...
                    [ ad.blc.spectra ad.control.spectra.active ];
                ad.blc.corrFun.values = [];
                setappdata(mainWindow,'data',ad.data);
                setappdata(mainWindow,'blc',ad.blc);
                updateAxes();
                return;
            case 'reset'
                ad.blc.spectra(ad.blc.spectra==ad.control.spectra.active) = [];
                ad.blc.corrFun.values = [];
                ad.data{ad.control.spectra.active}.data = ...
                    ad.origdata{ad.control.spectra.active}.data;
                setappdata(mainWindow,'data',ad.data);
                setappdata(mainWindow,'blc',ad.blc);
                updateAxes();
                return;
            otherwise
                disp('Unknown action');
                return;
        end
    catch exception
        try
            msgStr = ['An exception occurred. '...
                'The bug reporter should have been opened'];
            add2status(msgStr);
        catch exception2
            exception = addCause(exception2, exception);
            disp(msgStr);
        end
        try
            trEPRgui_bugreportwindow(exception);
        catch exception3
            % If even displaying the bug report window fails...
            exception = addCause(exception3, exception);
            throw(exception);
        end
    end 
end

end
