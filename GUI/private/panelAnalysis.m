function handle = panelAnalysis(parentHandle,position)
% PANELANALYSIS Add a panel displaying some analysis controls to a gui
%       Should only be called from within a GUI defining function.
%
%       Arguments: parent Handle and position vector.
%
%       Returns the handle of the added panel.

% Copyright (c) 2011-15, Till Biskup
% 2015-10-18

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%  Construct the components
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

defaultBackground = get(parentHandle,'Color');

handle = uipanel('Tag','analysis_panel',...
    'parent',parentHandle,...
    'Title','Data analysis',...
    'FontUnit','Pixel','Fontsize',12,...
    'FontWeight','bold',...
    'BackgroundColor',defaultBackground,...
    'Visible','off',...
    'Units','pixels','Position',position);

% Create the panel
panel_size = get(handle,'Position');

uicontrol('Tag','analysis_panel_description',...
    'Style','text',...
    'Parent',handle,...
    'BackgroundColor',defaultBackground,...
    'Units','Pixels',...
    'FontUnit','Pixel','Fontsize',12,...
    'HorizontalAlignment','Left',...
    'FontAngle','oblique',...
    'Position',[10 panel_size(4)-60 panel_size(3)-20 30],...
    'String',{'Analysis tools, such as MW frequency drift, net polarisation, ...'}...
    );

handle_p1 = uipanel('Tag','analysis_panel_mwfrequencydrift_panel',...
    'Parent',handle,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10 panel_size(4)-130 panel_size(3)-20 60],...
    'Title','MW Frequency drift'...
    );
uicontrol('Tag','analysis_panel_mwfrequencydrift_description',...
    'Style','text',...
    'Parent',handle_p1,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'HorizontalAlignment','Left',...
    'FontAngle','oblique',...
    'Position',[10 10 panel_size(3)-110 30],...
    'String',{'Analyse MW frequency drift of current dataset.'}...
    );
uicontrol('Tag','analysis_panel_mwfrequencydrift_pushbutton',...
    'Style','pushbutton',...
    'Parent',handle_p1,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[panel_size(3)-90 10 60 30],...
    'String','Show',...
    'TooltipString','Plot MW frequency drift for currently active dataset',...
    'Callback',{@pushbutton_Callback,'MWfreqDriftPlot'}...
    );

handle_p2 = uipanel('Tag','analysis_panel_netpolarisation_panel',...
    'Parent',handle,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10 panel_size(4)-200 panel_size(3)-20 60],...
    'Title','Net polarisation'...
    );
uicontrol('Tag','analysis_panel_netpolarisation_description',...
    'Style','text',...
    'Parent',handle_p2,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'HorizontalAlignment','Left',...
    'FontAngle','oblique',...
    'Position',[10 10 panel_size(3)-110 30],...
    'String',{'Analyse net polarisation of current dataset.'}...
    );
uicontrol('Tag','analysis_panel_netpolarisation_pushbutton',...
    'Style','pushbutton',...
    'Parent',handle_p2,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[panel_size(3)-90 10 60 30],...
    'String','Show',...
    'TooltipString','Plot net polarisation as function of time for currently active dataset',...
    'Callback',{@pushbutton_Callback,'NetPolarisationPlot'}...
    );

handle_p3 = uipanel('Tag','analysis_panel_bgpositions_panel',...
    'Parent',handle,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10 panel_size(4)-290 panel_size(3)-20 80],...
    'Title','BG positions'...
    );
uicontrol('Tag','analysis_panel_showbgpositions_checkbox',...
    'Style','checkbox',...
    'Parent',handle_p3,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10 40 (panel_size(3)-70) 20],...
    'String',' Show BG positions',...
    'TooltipString',sprintf('%s\n%s\n%s',...
    'Toggle between displaying background scan positions.',...
    'Depending on the recording mode, background scans are performed',...
    'regularly throughout the measurement whose position (in time) is shown here.'),...
    'Value',0,...
    'Callback',{@checkbox_Callback,'BGpositions'}...
    );
uicontrol('Tag','analysis_panel_bgpositions_offset_text',...
    'Style','text',...
    'Parent',handle_p3,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'HorizontalAlignment','left',...
    'Units','Pixels',...
    'Position',[10 10 150 20],...
    'TooltipString','...',...
    'String','Offset (field steps)'...
    );
uicontrol('Tag','analysis_panel_bgpositions_offset_edit',...
    'Style','edit',...
    'Parent',handle_p3,...
    'BackgroundColor',[1 1 1],...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[140 10 60 25],...
    'String','0',...
    'TooltipString','...',...
    'Callback',{@edit_Callback,'BGpositionsShift'}...
    );
uicontrol('Tag','analysis_panel_bgpositions_help_pushbutton',...
    'Style','pushbutton',...
    'Parent',handle_p3,...
    'BackgroundColor',defaultBackground,...
    'ForegroundColor',[0 0 1],...
    'FontUnit','Pixel','Fontsize',12,...
    'FontWeight','bold',...
    'String','?',...
    'TooltipString','Display help about displaying BG positions',...
    'Position',[panel_size(3)-55 10 25 25],...
    'Enable','on',...
    'Callback',{@pushbutton_Callback,'BGpositionsHelp'}...
    );


end % End main function

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%  Callbacks
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

function pushbutton_Callback(~,~,action)

try
    if isempty(action)
        return;
    end
    
    % Get appdata of main window
    mainWindow = trEPRguiGetWindowHandle();
    ad = getappdata(mainWindow);

    active = ad.control.data.active;
    
    switch lower(action)
        case 'mwfreqdriftplot'
            if ~ad.control.data.active
                return;
            end
            if isscalar(ad.data{active}.parameters.bridge.MWfrequency.value) && ...
                    ~isfield(ad.data{active}.parameters.bridge.MWfrequency,'values') && ...
                    (~isfield(ad.data{active}.parameters.bridge.calibration,'values') || ...
                    length(ad.data{active}.parameters.bridge.calibration.values) < 2)
                msgbox('Currently active dataset has not enough frequency values.',...
                    'Frequency Drift Plot','warn');
                trEPRmsg(['Frequency drift analysis failed: ' ...
                    'Dataset has not enough frequency values.'],...
                    'warning');
                return;
            end
            trEPRgui_MWfrequencyDriftwindow();
        case 'netpolarisationplot'
            if ~ad.control.data.active
                return;
            end
            if isscalar(ad.data{active}.axes.data(1).values) || ...
                    isscalar(ad.data{active}.axes.data(2).values)
                msgbox('Currently active dataset has insufficient dimensions for net polarisation analysis.',...
                    'Net Polarisation Plot','warn');
                trEPRmsg(['Net polarisation analysis failed: ' ...
                    'Dataset has insufficient dimensions.'],...
                    'warning');
                return;
            end
            trEPRgui_NetPolarisationwindow();
        case 'bgpositionshelp'
            trEPRgui_helpwindow();
        otherwise
            trEPRoptionUnknown(action);
            return;
    end
catch exception
    trEPRexceptionHandling(exception)
end

end

function checkbox_Callback(source,~,action)

try
    if isempty(action)
        return;
    end
    
    % Get appdata and GUI handles of main GUI
    mainWindow = trEPRguiGetWindowHandle();
    ad = getappdata(mainWindow);
    
    switch lower(action)
        case 'bgpositions'
            ad.control.axis.BGpositions.enable = get(source,'Value');
        otherwise
            trEPRoptionUnknown(action);
            return;
    end
    setappdata(mainWindow,'control',ad.control);
    
    % Update main axis
    update_mainAxis();
catch exception
    trEPRexceptionHandling(exception)
end

end

function edit_Callback(source,~,action)

try
    if isempty(action)
        return;
    end
    
    % Get appdata and handles of main GUI
    mainWindow = trEPRguiGetWindowHandle();
    ad = getappdata(mainWindow);
    
    active = ad.control.data.active;
    if isempty(active) && ~active
        return;
    end
    
    value = trEPRguiSanitiseNumericInput(get(source,'String'));
    if isnan(value)
        update_displayPanel();
        return;
    end
    
    switch action
        case 'BGpositionsShift'
            ad.control.axis.BGpositions.shift = value;
        otherwise
            trEPRoptionUnknown(action);
            return;
    end
    setappdata(mainWindow,'control',ad.control);
    % Update main axis
    update_mainAxis();
catch exception
    trEPRexceptionHandling(exception)
end

end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%  Utility functions
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
