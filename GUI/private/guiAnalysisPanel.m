function handle = guiAnalysisPanel(parentHandle,position)
% GUIANALYSISPANEL Add a panel displaying some analysis controls to a gui
%       Should only be called from within a GUI defining function.
%
%       Arguments: parent Handle and position vector.
%
%       Returns the handle of the added panel.

% (c) 2011-13, Till Biskup
% 2013-10-29

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%  Construct the components
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

defaultBackground = get(parentHandle,'Color');

handle = uipanel('Tag','analysis_panel',...
    'parent',parentHandle,...
    'Title','Data analysis',...
    'FontUnit','Pixel','Fontsize',12,...
    'FontWeight','bold',...
    'BackgroundColor',defaultBackground,...
    'Visible','off',...
    'Units','pixels','Position',position);

% Create the "Help" panel
handle_size = get(handle,'Position');
uicontrol('Tag','analysis_panel_description',...
    'Style','text',...
    'Parent',handle,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'HorizontalAlignment','Left',...
    'FontAngle','oblique',...
    'Position',[10 handle_size(4)-60 handle_size(3)-20 30],...
    'String',{'Diverse analysis tools such as data fitting, simulations, deconvolution (SVD), ...'}...
    );

handle_p1 = uipanel('Tag','analysis_panel_dataexport_panel',...
    'Parent',handle,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10 handle_size(4)-170 handle_size(3)-20 100],...
    'Title','Export data'...
    );
uicontrol('Tag','analysis_panel_dataexport_description',...
    'Style','text',...
    'Parent',handle_p1,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'HorizontalAlignment','Left',...
    'FontAngle','oblique',...
    'Position',[10 35 handle_size(3)-40 40],...
    'String',{'Export currently active dataset for external analysis.'}...
    );
uicontrol('Tag','analysis_panel_dataexport_format_text',...
    'Style','text',...
    'Parent',handle_p1,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'HorizontalAlignment','left',...
    'Units','Pixels',...
    'Position',[10 15 60 20],...
    'String','Format'...
    );
uicontrol('Tag','analysis_panel_dataexport_format_popupmenu',...
    'Style','popupmenu',...
    'Parent',handle_p1,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[handle_size(3)-190 15 100 20],...
    'String','glotaran',...
    'TooltipString','Select type of graphics file'...
    );
uicontrol('Tag','analysis_panel_dataexport_pushbutton',...
    'Style','pushbutton',...
    'Parent',handle_p1,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[handle_size(3)-90 10 60 30],...
    'String','Export',...
    'TooltipString','Export current dataset in a format understood by glotaran',...
    'Callback',{@pushbutton_Callback,'Export'}...
    );

handle_p2 = uipanel('Tag','analysis_panel_mwfrequencydrift_panel',...
    'Parent',handle,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10 handle_size(4)-240 handle_size(3)-20 60],...
    'Title','MW Frequency drift'...
    );
uicontrol('Tag','analysis_panel_mwfrequencydrift_description',...
    'Style','text',...
    'Parent',handle_p2,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'HorizontalAlignment','Left',...
    'FontAngle','oblique',...
    'Position',[10 10 handle_size(3)-110 30],...
    'String',{'Analyse MW frequency drift of current dataset.'}...
    );
uicontrol('Tag','analysis_panel_mwfrequencydrift_pushbutton',...
    'Style','pushbutton',...
    'Parent',handle_p2,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[handle_size(3)-90 10 60 30],...
    'String','Show',...
    'TooltipString','Plot MW frequency drift for currently active dataset',...
    'Callback',{@pushbutton_Callback,'MWfreqDriftPlot'}...
    );

handle_p3 = uipanel('Tag','analysis_panel_netpolarisation_panel',...
    'Parent',handle,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10 handle_size(4)-310 handle_size(3)-20 60],...
    'Title','Net polarisation'...
    );
uicontrol('Tag','analysis_panel_netpolarisation_description',...
    'Style','text',...
    'Parent',handle_p3,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'HorizontalAlignment','Left',...
    'FontAngle','oblique',...
    'Position',[10 10 handle_size(3)-110 30],...
    'String',{'Analyse net polarisation of current dataset.'}...
    );
uicontrol('Tag','analysis_panel_netpolarisation_pushbutton',...
    'Style','pushbutton',...
    'Parent',handle_p3,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[handle_size(3)-90 10 60 30],...
    'String','Show',...
    'TooltipString','Plot net polarisation as function of time for currently active dataset',...
    'Callback',{@pushbutton_Callback,'NetPolarisationPlot'}...
    );


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%  Initialization tasks
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%  Callbacks
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


function pushbutton_Callback(~,~,action)
    try
        if isempty(action)
            return;
        end
        
        % Get appdata of main window
        mainWindow = trEPRguiGetWindowHandle();
        ad = getappdata(mainWindow);
        
        % Get handles of main window
        gh = guihandles(mainWindow);

        switch lower(action)
            case 'export'
                if ~ad.control.spectra.active
                    return;
                end

                % Get export format
                exportFormats = cellstr(...
                    get(gh.analysis_panel_dataexport_format_popupmenu,'String'));
                exportFormat = exportFormats{...
                    get(gh.analysis_panel_dataexport_format_popupmenu,'Value')};
                                
                switch exportFormat
                    case 'glotaran'
                        % Generate default file name if possible, be very defensive
                        if ad.control.spectra.active
                            [~,f,~] = ...
                                fileparts(ad.data{ad.control.spectra.active}.file.name);
                            fileNameSuggested = f;
                            clear p f e;
                        else
                            fileNameSuggested = '';
                        end
                        % Ask user for file name
                        [fileName,pathName] = uiputfile(...
                            sprintf('*.%s','ascii'),...
                            'Get filename to export figure to',...
                            fileNameSuggested);
                        % If user aborts process, return
                        if fileName == 0
                            trEPRmsg(...
                                ['Export of dataset aborted (presumably by user): '...
                                'No filename.'],'info');
                            return;
                        end
                        % Create filename with full path
                        fileName = fullfile(pathName,fileName);
                        
                        trEPRbusyWindow('start',...
                            'Trying to export dataset...<br />please wait.');
                        
                        % Export using export4glotaran
                        status = trEPRexport4glotaran(...
                            ad.data{ad.control.spectra.active},fileName);
                        if status
                            trEPRmsg(status,'warning');
                            trEPRbusyWindow('stop',...
                                'Trying to export dataset...<br /><b>failed</b>.');
                        else
                            trEPRbusyWindow('stop',...
                                'Trying to export dataset...<br /><b>done</b>.');
                            trEPRbusyWindow('deletedelayed');
                            msgStr{1} = sprintf('Exported dataset %i to format %s',...
                                ad.control.spectra.active,exportFormat);
                            msgStr{end+1} = ['Label: ' ...
                                ad.data{ad.control.spectra.active}.label];
                            msgStr{end+1} = ['File:  ' fileName ];
                            trEPRmsg(msgStr,'info');
                        end
                        
                    otherwise
                        fprintf('%s%s "%s"\n',...
                            'trEPRgui : guiAnalysisPanel() : ',...
                            'pushbutton_Callback(): Unknown export format',...
                            exportFormat);
                        return;
                end
            case 'mwfreqdriftplot'
                if ~ad.control.spectra.active
                    return;
                end
                active = ad.control.spectra.active;
                if isscalar(ad.data{active}.parameters.bridge.MWfrequency.value) && ...
                        ~isfield(ad.data{active}.parameters.bridge.MWfrequency,'values') && ...
                        (~isfield(ad.data{active}.parameters.bridge.calibration,'values') || ...
                        length(ad.data{active}.parameters.bridge.calibration.values) < 2)
                    msgbox('Currently active dataset has not enough frequency values.',...
                        'Frequency Drift Plot','warn');
                    trEPRmsg(['Frequency drift analysis failed: ' ...
                        'Dataset has not enough frequency values.'],...
                        'warning');
                    return;
                end
                trEPRgui_MWfrequencyDriftwindow();
            case 'netpolarisationplot'
                if ~ad.control.spectra.active
                    return;
                end
                active = ad.control.spectra.active;
                if isscalar(ad.data{active}.axes.x.values) || ...
                        isscalar(ad.data{active}.axes.y.values)
                    msgbox('Currently active dataset has insufficient dimensions for net polarisation analysis.',...
                        'Net Polarisation Plot','warn');
                    trEPRmsg(['Net polarisation analysis failed: ' ...
                        'Dataset has insufficient dimensions.'],...
                        'warning');
                    return;
                end
                trEPRgui_NetPolarisationwindow();
            otherwise
                st = dbstack;
                trEPRmsg(...
                    [st.name ' : unknown action "' action '"'],...
                    'warning');
                return;
        end
    catch exception
        try
            msgStr = ['An exception occurred in ' ...
                exception.stack(1).name  '.'];
            trEPRmsg(msgStr,'error');
        catch exception2
            exception = addCause(exception2, exception);
            disp(msgStr);
        end
        try
            trEPRgui_bugreportwindow(exception);
        catch exception3
            % If even displaying the bug report window fails...
            exception = addCause(exception3, exception);
            throw(exception);
        end
    end
end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%  Utility functions
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

end