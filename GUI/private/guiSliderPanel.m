function handle = guiSliderPanel(parentHandle,position)
% GUIWELCOMEPANEL Add a panel for slider value display to a gui
%       Should only be called from within a GUI defining function.
%
%       Arguments: parent Handle and position vector.
%       TODO: Add guidata and appdata to list of arguments
%
%       Returns the handle of the added panel.

% Copyright (c) 2011-14, Till Biskup
% 2014-07-25

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%  Construct the components
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

defaultBackground = get(parentHandle,'Color');

% Variables that definitely have to be stored otherwise (appdata.configure)
sl1_bgcolor = [1.0 0.7 0.7];
sl2_bgcolor = [1.0 1.0 0.8];
sl3_bgcolor = [0.8 1.0 1.0];

handle = uipanel('Tag','slider_panel',...
    'parent',parentHandle,...
    'Title','Slider values',...
    'FontUnit','Pixel','Fontsize',12,...
    'FontWeight','bold',...
    'BackgroundColor',defaultBackground,...
    'Visible','off',...
    'Units','pixels','Position',position);

% Create the "Slider values" panel
handle_size = get(handle,'Position');
uicontrol('Tag','slider_panel_description',...
    'Style','text',...
    'Parent',handle,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'HorizontalAlignment','Left',...
    'FontAngle','oblique',...
    'Position',[10 handle_size(4)-60 handle_size(3)-20 30],...
    'String',{'Display values of the sliders attached to the main axes (on the left)'}...
    );

handle_p1 = uipanel('Tag','slider_panel_position_panel',...
    'Parent',handle,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10 handle_size(4)-175 handle_size(3)-20 105],...
    'Title','Position'...
    );
uicontrol('Tag','slider_panel_position_index_text',...
    'Style','text',...
    'Parent',handle_p1,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[60 60 (handle_size(3)-90)/2 25],...
    'String','index'...
    );
uicontrol('Tag','slider_panel_position_unit_text',...
    'Style','text',...
    'Parent',handle_p1,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[60+(handle_size(3)-90)/2 60 (handle_size(3)-90)/2 25],...
    'String','unit'...
    );
uicontrol('Tag','slider_panel_position_x_text',...
    'Style','text',...
    'Parent',handle_p1,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10 40 35 20],...
    'String','x'...
    );
uicontrol('Tag','slider_panel_position_x_index_edit',...
    'Style','edit',...
    'Parent',handle_p1,...
    'BackgroundColor',sl1_bgcolor,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[60 40 (handle_size(3)-90)/2 25],...
    'String','0',...
    'Callback',{@edit_Callback,'position_xindex'}...
    );
uicontrol('Tag','slider_panel_position_x_unit_edit',...
    'Style','edit',...
    'Parent',handle_p1,...
    'BackgroundColor',sl1_bgcolor,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[60+(handle_size(3)-90)/2 40 (handle_size(3)-90)/2 25],...
    'String','0',...
    'Callback',{@edit_Callback,'position_xunit'}...
    );
uicontrol('Tag','slider_panel_position_y_text',...
    'Style','text',...
    'Parent',handle_p1,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10 10 35 20],...
    'String','y'...
    );
uicontrol('Tag','slider_panel_position_y_index_edit',...
    'Style','edit',...
    'Parent',handle_p1,...
    'BackgroundColor',sl1_bgcolor,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[60 10 (handle_size(3)-90)/2 25],...
    'String','0',...
    'Callback',{@edit_Callback,'position_yindex'}...
    );
uicontrol('Tag','slider_panel_position_y_unit_edit',...
    'Style','edit',...
    'Parent',handle_p1,...
    'BackgroundColor',sl1_bgcolor,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[60+(handle_size(3)-90)/2 10 (handle_size(3)-90)/2 25],...
    'String','0',...
    'Callback',{@edit_Callback,'position_yunit'}...
    );

handle_p2 = uipanel('Tag','slider_panel_scaling_panel',...
    'Parent',handle,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10 handle_size(4)-320 handle_size(3)-20 135],...
    'Title','Scaling'...
    );
uicontrol('Tag','slider_panel_scaling_index_text',...
    'Style','text',...
    'Parent',handle_p2,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[60 90 (handle_size(3)-90)/2 25],...
    'String','factor'...
    );
uicontrol('Tag','slider_panel_scaling_unit_text',...
    'Style','text',...
    'Parent',handle_p2,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[60+(handle_size(3)-90)/2 90 (handle_size(3)-90)/2 25],...
    'String','Delta in units',...
    'TooltipString','Difference to unscaled in units' ...
    );
uicontrol('Tag','slider_panel_scaling_x_text',...
    'Style','text',...
    'Parent',handle_p2,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10 70 35 20],...
    'String','x'...
    );
uicontrol('Tag','slider_panel_scaling_x_index_edit',...
    'Style','edit',...
    'Parent',handle_p2,...
    'BackgroundColor',sl2_bgcolor,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[60 70 (handle_size(3)-90)/2 25],...
    'String','0',...
    'Callback',{@edit_Callback,'scaling_xindex'}...
    );
uicontrol('Tag','slider_panel_scaling_x_unit_edit',...
    'Style','edit',...
    'Parent',handle_p2,...
    'BackgroundColor',sl2_bgcolor,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[60+(handle_size(3)-90)/2 70 (handle_size(3)-90)/2 25],...
    'String','0',...
    'Callback',{@edit_Callback,'scaling_xunit'}...
    );
uicontrol('Tag','slider_panel_scaling_y_text',...
    'Style','text',...
    'Parent',handle_p2,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10 40 35 20],...
    'String','y'...
    );
uicontrol('Tag','slider_panel_scaling_y_index_edit',...
    'Style','edit',...
    'Parent',handle_p2,...
    'BackgroundColor',sl2_bgcolor,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[60 40 (handle_size(3)-90)/2 25],...
    'String','0',...
    'Callback',{@edit_Callback,'scaling_yindex'}...
    );
uicontrol('Tag','slider_panel_scaling_y_unit_edit',...
    'Style','edit',...
    'Parent',handle_p2,...
    'BackgroundColor',sl2_bgcolor,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[60+(handle_size(3)-90)/2 40 (handle_size(3)-90)/2 25],...
    'String','0',...
    'Callback',{@edit_Callback,'scaling_yunit'}...
    );
uicontrol('Tag','slider_panel_scaling_z_text',...
    'Style','text',...
    'Parent',handle_p2,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10 10 35 20],...
    'String','z'...
    );
uicontrol('Tag','slider_panel_scaling_z_index_edit',...
    'Style','edit',...
    'Parent',handle_p2,...
    'BackgroundColor',sl2_bgcolor,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[60 10 (handle_size(3)-90)/2 25],...
    'String','0',...
    'Callback',{@edit_Callback,'scaling_zindex'}...
    );
uicontrol('Tag','slider_panel_scaling_z_unit_edit',...
    'Style','edit',...
    'Parent',handle_p2,...
    'BackgroundColor',sl2_bgcolor,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[60+(handle_size(3)-90)/2 10 (handle_size(3)-90)/2 25],...
    'String','0',...
    'Callback',{@edit_Callback,'scaling_zunit'}...
    );

handle_p3 = uipanel('Tag','slider_panel_displacement_panel',...
    'Parent',handle,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10 handle_size(4)-465 handle_size(3)-20 135],...
    'Title','Displacement'...
    );
uicontrol('Tag','slider_panel_displacement_index_text',...
    'Style','text',...
    'Parent',handle_p3,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[60 90 (handle_size(3)-90)/2 25],...
    'String','index'...
    );
uicontrol('Tag','slider_panel_displacement_unit_text',...
    'Style','text',...
    'Parent',handle_p3,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[60+(handle_size(3)-90)/2 90 (handle_size(3)-90)/2 25],...
    'String','unit'...
    );
uicontrol('Tag','slider_panel_displacement_x_text',...
    'Style','text',...
    'Parent',handle_p3,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10 70 35 20],...
    'String','x'...
    );
uicontrol('Tag','slider_panel_displacement_x_index_edit',...
    'Style','edit',...
    'Parent',handle_p3,...
    'BackgroundColor',sl3_bgcolor,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[60 70 (handle_size(3)-90)/2 25],...
    'String','0',...
    'Callback',{@edit_Callback,'displacement_xindex'}...
    );
uicontrol('Tag','slider_panel_displacement_x_unit_edit',...
    'Style','edit',...
    'Parent',handle_p3,...
    'BackgroundColor',sl3_bgcolor,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[60+(handle_size(3)-90)/2 70 (handle_size(3)-90)/2 25],...
    'String','0',...
    'Callback',{@edit_Callback,'displacement_xunit'}...
    );
uicontrol('Tag','slider_panel_displacement_y_text',...
    'Style','text',...
    'Parent',handle_p3,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10 40 35 20],...
    'String','y'...
    );
uicontrol('Tag','slider_panel_displacement_y_index_edit',...
    'Style','edit',...
    'Parent',handle_p3,...
    'BackgroundColor',sl3_bgcolor,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[60 40 (handle_size(3)-90)/2 25],...
    'String','0',...
    'Callback',{@edit_Callback,'displacement_yindex'}...
    );
uicontrol('Tag','slider_panel_displacement_y_unit_edit',...
    'Style','edit',...
    'Parent',handle_p3,...
    'BackgroundColor',sl3_bgcolor,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[60+(handle_size(3)-90)/2 40 (handle_size(3)-90)/2 25],...
    'String','0',...
    'Callback',{@edit_Callback,'displacement_yunit'}...
    );
uicontrol('Tag','slider_panel_displacement_z_text',...
    'Style','text',...
    'Parent',handle_p3,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10 10 35 20],...
    'String','z'...
    );
uicontrol('Tag','slider_panel_displacement_z_index_edit',...
    'Style','edit',...
    'Parent',handle_p3,...
    'BackgroundColor',sl3_bgcolor,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[60 10 (handle_size(3)-90)/2 25],...
    'String','0',...
    'Callback',{@edit_Callback,'displacement_zindex'}...
    );
uicontrol('Tag','slider_panel_displacement_z_unit_edit',...
    'Style','edit',...
    'Parent',handle_p3,...
    'BackgroundColor',sl3_bgcolor,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[60+(handle_size(3)-90)/2 10 (handle_size(3)-90)/2 25],...
    'String','0',...
    'Callback',{@edit_Callback,'displacement_zunit'}...
    );


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%  Initialization tasks
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%  Callbacks
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

function edit_Callback(source,~,action)
    try        
        % Get appdata and gui handles of main window
        mainWindow = trEPRguiGetWindowHandle;
        ad = getappdata(mainWindow);
        gh = guidata(mainWindow);

        active = ad.control.spectra.active;
        
        if ~active || isempty(active)
            return;
        end
        
        % Be as robust as possible: if there is no axes, default is indices
        [y,x] = size(ad.data{active}.data);
        x = linspace(1,x,x);
        y = linspace(1,y,y);
        if (isfield(ad.data{active},'axes') ...
                && isfield(ad.data{active}.axes,'x') ...
                && isfield(ad.data{active}.axes.x,'values') ...
                && not (isempty(ad.data{active}.axes.x.values)))
            x = ad.data{active}.axes.x.values;
        end
        if (isfield(ad.data{active},'axes') ...
                && isfield(ad.data{active}.axes,'y') ...
                && isfield(ad.data{active}.axes.y,'values') ...
                && not (isempty(ad.data{active}.axes.y.values)))
            y = ad.data{active}.axes.y.values;
        end
        
        switch lower(action)
            case 'position_xindex'
                value = trEPRguiSanitiseNumericInput(...
                    get(source,'String'),1:length(x),'round',true);
                ad.data{active}.display.position.x = value;
            case 'position_xunit'
                value = trEPRguiSanitiseNumericInput(...
                    get(source,'String'),x,'map',true);
                ad.data{active}.display.position.x = find(x==value);
            case 'position_yindex'
                value = trEPRguiSanitiseNumericInput(...
                    get(source,'String'),1:length(y),'round',true);
                ad.data{active}.display.position.y = value;
            case 'position_yunit'
                value = trEPRguiSanitiseNumericInput(...
                    get(source,'String'),y,'map',true);
                ad.data{active}.display.position.y = find(y==value);
            case 'displacement_xindex'
                value = trEPRguiSanitiseNumericInput(...
                    get(source,'String'),-length(x):length(x));
                ad.data{active}.display.displacement.x = value;
            case 'displacement_xunit'
                vector = -(x(2)-x(1))*length(x):x(2)-x(1):(x(2)-x(1))*length(x);
                value = trEPRguiSanitiseNumericInput(...
                    get(source,'String'),vector,'map',true);
                ad.data{active}.display.displacement.x = ...
                    find(vector==value)-(length(vector)+1)/2;
            case 'displacement_yindex'
                value = trEPRguiSanitiseNumericInput(...
                    get(source,'String'),-length(y):length(y));
                ad.data{active}.display.displacement.y = value;
            case 'displacement_yunit'
                vector = -(y(2)-y(1))*length(y):y(2)-y(1):(y(2)-y(1))*length(y);
                value = trEPRguiSanitiseNumericInput(...
                    get(source,'String'),vector,'map',true);
                ad.data{active}.display.displacement.y = ...
                    find(vector==value)-(length(vector)+1)/2;
            case 'displacement_zindex'
                value = trEPRguiSanitiseNumericInput(get(source,'String'),...
                    [get(gh.vert3_slider,'Min'),get(gh.vert3_slider,'Max')]);
                ad.data{active}.display.displacement.z = value;
            case 'displacement_zunit'
                if ad.control.axis.normalisation.enable
                    if strcmpi(ad.control.axis.normalisation.dimension,'1D')
                        switch lower(ad.control.axis.normalisation.type)
                            case 'pk-pk'
                                z = [0 1];
                            case 'area'
                                z(1) = min(min(ad.data{active}.data/...
                                    sum(sum(ad.data{active}.data))));
                                z(2) = max(max(ad.data{active}.data/...
                                    sum(sum(ad.data{active}.data))));
                            case 'max'
                                z(1) = min(min(ad.data{active}.data/...
                                    max(max(ad.data{active}.data))));
                                z(2) = max(max(ad.data{active}.data/...
                                    max(max(ad.data{active}.data))));
                            case 'min'
                                z(1) = min(min(ad.data{active}.data/...
                                    min(min(ad.data{active}.data))));
                                z(2) = max(max(ad.data{active}.data/...
                                    min(min(ad.data{active}.data))));
                        end
                    else
                        switch lower(ad.control.axis.normalisation.type)
                            case 'pk-pk'
                                z = [0 1];
                            case 'area'
                                z(1) = min(min(ad.data{active}.data/...
                                    sum(sum(ad.data{active}.data))));
                                z(2) = max(max(ad.data{active}.data/...
                                    sum(sum(ad.data{active}.data))));
                            case 'max'
                                z(1) = min(min(ad.data{active}.data/...
                                    max(max(ad.data{active}.data))));
                                z(2) = max(max(ad.data{active}.data/...
                                    max(max(ad.data{active}.data))));
                            case 'min'
                                z(1) = min(min(ad.data{active}.data/...
                                    min(min(ad.data{active}.data))));
                                z(2) = max(max(ad.data{active}.data/...
                                    min(min(ad.data{active}.data))));
                        end
                    end
                else
                    z(1) = min(min(ad.data{active}.data));
                    z(2) = max(max(ad.data{active}.data));
                    
                end
                value = trEPRguiSanitiseNumericInput(get(source,'String'),...
                    [z(1)-z(2),abs(z(1)-z(2))]);                
                % "round" is due to rounding mistakes that otherwise make
                % problems with the slider values...
                % If you don't understand what's going on here, DON'T TOUCH!
                ad.data{active}.display.displacement.z = ...
                    round(...
                    value*(...
                    (max(max(ad.data{active}.data)) - ...
                    min(min(ad.data{active}.data)))/(z(2)-z(1))...
                    )*1e7)/1e7;
            case 'scaling_xindex'
                value = trEPRguiSanitiseNumericInput(get(source,'String'),...
                    [1/((get(gh.horz1_slider,'Max')*2)),...
                    (get(gh.horz1_slider,'Max')*2)]);
                ad.data{active}.display.scaling.x = value;
            case 'scaling_xunit'
                value = trEPRguiSanitiseNumericInput(get(source,'String'),...
                    [-(x(end)-x(1))/(get(gh.horz1_slider,'Max')*2),...
                    (x(end)-x(1)*(get(gh.horz1_slider,'Max')))]);
                ad.data{active}.display.scaling.x = 1+value/(x(end)-x(1));
            case 'scaling_yindex'
                value = trEPRguiSanitiseNumericInput(get(source,'String'),...
                    [1/((get(gh.horz1_slider,'Max')*2)),...
                    (get(gh.horz1_slider,'Max')*2)]);
                ad.data{active}.display.scaling.y = value;
            case 'scaling_yunit'
                value = trEPRguiSanitiseNumericInput(get(source,'String'),...
                    [-(y(end)-y(1))/(get(gh.horz1_slider,'Max')*2),...
                    (y(end)-y(1)*(get(gh.horz1_slider,'Max')))]);
                ad.data{active}.display.scaling.y = 1+value/(y(end)-y(1));
            case 'scaling_zindex'
                value = trEPRguiSanitiseNumericInput(get(source,'String'),...
                    [1/((get(gh.vert2_slider,'Max')*2)),...
                    (get(gh.vert2_slider,'Max')*2)]);
                ad.data{active}.display.scaling.z = value;
            case 'scaling_zunit'
                if ad.control.axis.normalisation.enable
                    if strcmpi(ad.control.axis.normalisation.dimension,'1D')
                        switch lower(ad.control.axis.normalisation.type)
                            case 'pk-pk'
                                z = [0 1];
                            case 'area'
                                z(1) = min(min(ad.data{active}.data/...
                                    sum(sum(ad.data{active}.data))));
                                z(2) = max(max(ad.data{active}.data/...
                                    sum(sum(ad.data{active}.data))));
                            case 'max'
                                z(1) = min(min(ad.data{active}.data/...
                                    max(max(ad.data{active}.data))));
                                z(2) = max(max(ad.data{active}.data/...
                                    max(max(ad.data{active}.data))));
                            case 'min'
                                z(1) = min(min(ad.data{active}.data/...
                                    min(min(ad.data{active}.data))));
                                z(2) = max(max(ad.data{active}.data/...
                                    min(min(ad.data{active}.data))));
                        end
                    else
                        switch lower(ad.control.axis.normalisation.type)
                            case 'pk-pk'
                                z = [0 1];
                            case 'area'
                                z(1) = min(min(ad.data{active}.data/...
                                    sum(sum(ad.data{active}.data))));
                                z(2) = max(max(ad.data{active}.data/...
                                    sum(sum(ad.data{active}.data))));
                            case 'max'
                                z(1) = min(min(ad.data{active}.data/...
                                    max(max(ad.data{active}.data))));
                                z(2) = max(max(ad.data{active}.data/...
                                    max(max(ad.data{active}.data))));
                            case 'min'
                                z(1) = min(min(ad.data{active}.data/...
                                    min(min(ad.data{active}.data))));
                                z(2) = max(max(ad.data{active}.data/...
                                    min(min(ad.data{active}.data))));
                        end
                    end
                else
                    z(1) = min(min(ad.data{ad.control.spectra.active}.data));
                    z(2) = max(max(ad.data{ad.control.spectra.active}.data));
                    
                end
                value = trEPRguiSanitiseNumericInput(get(source,'String'),...
                    [-(z(2)-z(1))/(get(gh.vert2_slider,'Max')*2),...
                    (z(2)-z(1)*(get(gh.vert2_slider,'Max')))]);
                ad.data{ad.control.spectra.active}.display.scaling.z = ...
                    1+value/(z(2)-z(1));
            otherwise
                trEPRoptionUnknown(action);
                return;
        end
        
        % If value is empty or NaN after conversion to numeric, restore
        % previous entry and return
        if isempty(value) || isnan(value)
            % Update slider panel
            update_sliderPanel();
            return;
        end
        
        % Update appdata of main window
        setappdata(mainWindow,'data',ad.data);
        
        % Update slider panel
        update_sliderPanel();
        
        %Update main axis
        update_mainAxis();
    catch exception
        trEPRexceptionHandling(exception)
    end
end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%  Utility functions
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

end
