function handle = guiDisplayPanel(parentHandle,position)
% GUIWELCOMEPANEL Add a panel for display settings to a gui
%       Should only be called from within a GUI defining function.
%
%       Arguments: parent Handle and position vector.
%       TODO: Add guidata and appdata to list of arguments
%
%       Returns the handle of the added panel.

% (Leave a blank line following the help.)

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%  Construct the components
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

defaultBackground = get(parentHandle,'Color');

handle = uipanel('Tag','display_panel',...
    'parent',parentHandle,...
    'Title','Display settings',...
    'FontUnit','Pixel','Fontsize',12,...
    'FontWeight','bold',...
    'BackgroundColor',defaultBackground,...
    'Visible','off',...
    'Units','pixels','Position',position);

% Create the "Display settings" panel
handle_size = get(handle,'Position');
uicontrol('Tag','display_panel_description',...
    'Style','text',...
    'Parent',handle,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'HorizontalAlignment','Left',...
    'FontAngle','oblique',...
    'Position',[10 handle_size(4)-60 handle_size(3)-20 30],...
    'String',{'Set display (axis) properties, export graphics and 1D data, ...'}...
    );

% Create buttongroup to switch between subpanels (pages)
hpbg = uibuttongroup('Tag','display_panel_pages_buttongroup',...
    'Parent',handle,...
    'BackgroundColor',defaultBackground,...
    'BorderType','none',...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10 handle_size(4)-100 handle_size(3)-20 30],...
    'SelectionChangeFcn',{@pages_buttongroup_Callback}...
    );
uicontrol('Tag','display_panel_page1_pushbutton',...
    'Style','Toggle',...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'String','1',...
    'TooltipString','Page 1: Axis labels and limits',...
    'pos',[handle_size(3)-20-(((handle_size(3)-20)/6)*6) 0 (handle_size(3)-20)/6 30],...
    'parent',hpbg,...
    'HandleVisibility','off',...
    'Value',1);
uicontrol('Tag','display_panel_page2_pushbutton',...
    'Style','Toggle',...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'String','2',...
    'TooltipString','Page 2: Grid, legend, normalise, highlight current dataset',...
    'pos',[handle_size(3)-20-(((handle_size(3)-20)/6)*5) 0 (handle_size(3)-20)/6 30],...
    'parent',hpbg,...
    'HandleVisibility','off',...
    'Value',0);
uicontrol('Tag','display_panel_page3_pushbutton',...
    'Style','Toggle',...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'String','3',...
    'TooltipString','Page 3: Line settings of currently active dataset',...
    'pos',[handle_size(3)-20-(((handle_size(3)-20)/6)*4) 0 (handle_size(3)-20)/6 30],...
    'parent',hpbg,...
    'HandleVisibility','off',...
    'Value',0);
uicontrol('Tag','display_panel_page4_pushbutton',...
    'Style','Toggle',...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'String','4',...
    'TooltipString','Page 4: Export figure and 1D data',...
    'pos',[handle_size(3)-20-(((handle_size(3)-20)/6)*3) 0 (handle_size(3)-20)/6 30],...
    'parent',hpbg,...
    'HandleVisibility','off',...
    'Value',0);
uicontrol('Tag','display_panel_page5_pushbutton',...
    'Style','Toggle',...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'String','5',...
    'TooltipString','Page 5: 3D display',...
    'pos',[handle_size(3)-20-(((handle_size(3)-20)/6)*2) 0 (handle_size(3)-20)/6 30],...
    'parent',hpbg,...
    'HandleVisibility','off',...
    'Value',0);
uicontrol('Tag','display_panel_page6_pushbutton',...
    'Style','Toggle',...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'String','6',...
    'TooltipString','Page 6: g-axis',...
    'pos',[handle_size(3)-20-(((handle_size(3)-20)/6)) 0 (handle_size(3)-20)/6 30],...
    'parent',hpbg,...
    'HandleVisibility','off',...
    'Value',0);

% Create subpanels (pages)
handle_pp1 = uipanel('Tag','display_panel_page1_panel',...
    'Parent',handle,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'BorderType','none',...
    'Units','Pixels',...
    'Position',[10 10 handle_size(3)-20 handle_size(4)-110]...
    );
handle_pp2 = uipanel('Tag','display_panel_page2_panel',...
    'Parent',handle,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'BorderType','none',...
    'Units','Pixels',...
    'Position',[10 10 handle_size(3)-20 handle_size(4)-110],...
    'Visible','Off'...
    );
handle_pp3 = uipanel('Tag','display_panel_page3_panel',...
    'Parent',handle,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'BorderType','none',...
    'Units','Pixels',...
    'Position',[10 10 handle_size(3)-20 handle_size(4)-110],...
    'Visible','Off'...
    );
handle_pp4 = uipanel('Tag','display_panel_page4_panel',...
    'Parent',handle,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'BorderType','none',...
    'Units','Pixels',...
    'Position',[10 10 handle_size(3)-20 handle_size(4)-110],...
    'Visible','Off'...
    );
handle_pp5 = uipanel('Tag','display_panel_page5_panel',...
    'Parent',handle,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'BorderType','none',...
    'Units','Pixels',...
    'Position',[10 10 handle_size(3)-20 handle_size(4)-110],...
    'Visible','Off'...
    );
handle_pp6 = uipanel('Tag','display_panel_page6_panel',...
    'Parent',handle,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'BorderType','none',...
    'Units','Pixels',...
    'Position',[10 10 handle_size(3)-20 handle_size(4)-110],...
    'Visible','Off'...
    );

handle_p1 = uipanel('Tag','display_panel_axislabels_panel',...
    'Parent',handle_pp1,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[0 handle_size(4)-300 handle_size(3)-20 180],...
    'Title','Axis labels'...
    );
uicontrol('Tag','display_panel_axislabels_measure_text',...
    'Style','text',...
    'Parent',handle_p1,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[60 130 (handle_size(3)-90)/2 25],...
    'String','Measure'...
    );
uicontrol('Tag','display_panel_axislabels_unit_text',...
    'Style','text',...
    'Parent',handle_p1,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[60+(handle_size(3)-90)/2 130 (handle_size(3)-90)/2 25],...
    'String','Unit'...
    );
uicontrol('Tag','display_panel_axislabels_x_text',...
    'Style','text',...
    'Parent',handle_p1,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10 110 35 20],...
    'String','x'...
    );
uicontrol('Tag','display_panel_axislabels_x_measure_edit',...
    'Style','edit',...
    'Parent',handle_p1,...
    'BackgroundColor',[1 1 1],...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[60 110 (handle_size(3)-90)/2 25],...
    'String','index',...
    'Callback',{@axislabels_edit_Callback,'xmeasure'}...
    );
uicontrol('Tag','display_panel_axislabels_x_unit_edit',...
    'Style','edit',...
    'Parent',handle_p1,...
    'BackgroundColor',[1 1 1],...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[60+(handle_size(3)-90)/2 110 (handle_size(3)-90)/2 25],...
    'String','points',...
    'Callback',{@axislabels_edit_Callback,'xunit'}...
    );
uicontrol('Tag','display_panel_axislabels_y_text',...
    'Style','text',...
    'Parent',handle_p1,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10 80 35 20],...
    'String','y'...
    );
uicontrol('Tag','display_panel_axislabels_y_measure_edit',...
    'Style','edit',...
    'Parent',handle_p1,...
    'BackgroundColor',[1 1 1],...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[60 80 (handle_size(3)-90)/2 25],...
    'String','index',...
    'Callback',{@axislabels_edit_Callback,'ymeasure'}...
    );
uicontrol('Tag','display_panel_axislabels_y_unit_edit',...
    'Style','edit',...
    'Parent',handle_p1,...
    'BackgroundColor',[1 1 1],...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[60+(handle_size(3)-90)/2 80 (handle_size(3)-90)/2 25],...
    'String','points',...
    'Callback',{@axislabels_edit_Callback,'yunit'}...
    );
uicontrol('Tag','display_panel_axislabels_z_text',...
    'Style','text',...
    'Parent',handle_p1,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10 50 35 20],...
    'String','z'...
    );
uicontrol('Tag','display_panel_axislabels_z_measure_edit',...
    'Style','edit',...
    'Parent',handle_p1,...
    'BackgroundColor',[1 1 1],...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[60 50 (handle_size(3)-90)/2 25],...
    'String','index',...
    'Callback',{@axislabels_edit_Callback,'zmeasure'}...
    );
uicontrol('Tag','display_panel_axislabels_z_unit_edit',...
    'Style','edit',...
    'Parent',handle_p1,...
    'BackgroundColor',[1 1 1],...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[60+(handle_size(3)-90)/2 50 (handle_size(3)-90)/2 25],...
    'String','points',...
    'Callback',{@axislabels_edit_Callback,'zunit'}...
    );
uicontrol('Tag','display_panel_axislabels_getfromactivedataset_pushbutton',...
    'Style','pushbutton',...
    'Parent',handle_p1,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[60 10 handle_size(3)-90 30],...
    'String','Get from active dataset',...
    'TooltipString','Try to determine axis labels from currently active dataset',...
    'Enable','Off',...
    'Callback',{@axislabels_getfromactivedataset_pushbutton_Callback}...
    );

handle_p2 = uipanel('Tag','display_panel_axislimits_panel',...
    'Parent',handle_pp1,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[0 handle_size(4)-480 handle_size(3)-20 170],...
    'Title','Axis limits'...
    );
uicontrol('Tag','display_panel_axislimits_min_text',...
    'Style','text',...
    'Parent',handle_p2,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[60 120 (handle_size(3)-90)/2 25],...
    'String','min'...
    );
uicontrol('Tag','display_panel_axislimits_max_text',...
    'Style','text',...
    'Parent',handle_p2,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[60+(handle_size(3)-90)/2 120 (handle_size(3)-90)/2 25],...
    'String','max'...
    );
uicontrol('Tag','display_panel_axislimits_x_text',...
    'Style','text',...
    'Parent',handle_p2,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10 100 35 20],...
    'String','x'...
    );
uicontrol('Tag','display_panel_axislimits_x_min_edit',...
    'Style','edit',...
    'Parent',handle_p2,...
    'BackgroundColor',[1 1 1],...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[60 100 (handle_size(3)-90)/2 25],...
    'String','0',...
    'Callback',{@axislimits_edit_Callback,'xmin'}...
    );
uicontrol('Tag','display_panel_axislimits_x_max_edit',...
    'Style','edit',...
    'Parent',handle_p2,...
    'BackgroundColor',[1 1 1],...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[60+(handle_size(3)-90)/2 100 (handle_size(3)-90)/2 25],...
    'String','1',...
    'Callback',{@axislimits_edit_Callback,'xmax'}...
    );
uicontrol('Tag','display_panel_axislimits_y_text',...
    'Style','text',...
    'Parent',handle_p2,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10 70 35 20],...
    'String','y'...
    );
uicontrol('Tag','display_panel_axislimits_y_min_edit',...
    'Style','edit',...
    'Parent',handle_p2,...
    'BackgroundColor',[1 1 1],...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[60 70 (handle_size(3)-90)/2 25],...
    'String','0',...
    'Callback',{@axislimits_edit_Callback,'ymin'}...
    );
uicontrol('Tag','display_panel_axislimits_y_max_edit',...
    'Style','edit',...
    'Parent',handle_p2,...
    'BackgroundColor',[1 1 1],...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[60+(handle_size(3)-90)/2 70 (handle_size(3)-90)/2 25],...
    'String','1',...
    'Callback',{@axislimits_edit_Callback,'ymax'}...
    );
uicontrol('Tag','display_panel_axislimits_z_text',...
    'Style','text',...
    'Parent',handle_p2,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10 40 35 20],...
    'String','z'...
    );
uicontrol('Tag','display_panel_axislimits_z_min_edit',...
    'Style','edit',...
    'Parent',handle_p2,...
    'BackgroundColor',[1 1 1],...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[60 40 (handle_size(3)-90)/2 25],...
    'String','-1',...
    'Callback',{@axislimits_edit_Callback,'zmin'}...
    );
uicontrol('Tag','display_panel_axislimits_z_max_edit',...
    'Style','edit',...
    'Parent',handle_p2,...
    'BackgroundColor',[1 1 1],...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[60+(handle_size(3)-90)/2 40 (handle_size(3)-90)/2 25],...
    'String','1',...
    'Callback',{@axislimits_edit_Callback,'zmax'}...
    );
uicontrol('Tag','display_panel_axislimits_auto_checkbox',...
    'Style','checkbox',...
    'Parent',handle_p2,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[60 10 handle_size(3)-90 20],...
    'String',' Determine automatically',...
    'TooltipString',sprintf('%s\n%s','Automatically set axis limits to best fit',...
    '(In 1D display mode: Valid for all currently displayed datasets)'),...
    'Value',1,...
    'Callback',{@axislimits_auto_checkbox_Callback}...
    );

handle_p3 = uipanel('Tag','display_panel_grid_panel',...
    'Parent',handle_pp2,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[0 handle_size(4)-180 handle_size(3)-20 60],...
    'Title','Grid'...
    );
uicontrol('Tag','display_panel_grid_x_togglebutton',...
    'Style','Toggle',...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'String','X',...
    'TooltipString','Show grid in x',...
    'pos',[handle_size(3)-30-(((handle_size(3)-40)/4)*4) 10 (handle_size(3)-40)/4 30],...
    'parent',handle_p3,...
    'HandleVisibility','off',...
    'Value',0,...
    'Callback',{@grid_x_togglebutton_Callback}...
    );
uicontrol('Tag','display_panel_grid_y_togglebutton',...
    'Style','Toggle',...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'String','Y',...
    'TooltipString','Show grid in y',...
    'pos',[handle_size(3)-30-(((handle_size(3)-40)/4)*3) 10 (handle_size(3)-40)/4 30],...
    'parent',handle_p3,...
    'HandleVisibility','off',...
    'Value',0,...
    'Callback',{@grid_y_togglebutton_Callback}...
    );
uicontrol('Tag','display_panel_grid_minor_togglebutton',...
    'Style','Toggle',...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'String','minor',...
    'TooltipString',sprintf('%s\n%s','Show minor grid',...
    '(Works only in combination with X or Y grid)'),...
    'pos',[handle_size(3)-30-(((handle_size(3)-40)/4)*2) 10 (handle_size(3)-40)/4 30],...
    'parent',handle_p3,...
    'HandleVisibility','off',...
    'Value',0,...
    'Callback',{@grid_minor_togglebutton_Callback}...
    );
uicontrol('Tag','display_panel_grid_zero_togglebutton',...
    'Style','Toggle',...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'String','zero',...
    'TooltipString','Show dashed line at zero',...
    'pos',[handle_size(3)-30-(((handle_size(3)-40)/4)) 10 (handle_size(3)-40)/4 30],...
    'parent',handle_p3,...
    'HandleVisibility','off',...
    'Value',1,...
    'Callback',{@grid_zero_togglebutton_Callback}...
    );


handle_p4 = uipanel('Tag','display_panel_legend_panel',...
    'Parent',handle_pp2,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[0 handle_size(4)-250 handle_size(3)-20 60],...
    'Title','Legend display and position'...
    );
uicontrol('Tag','display_panel_legend_auto_togglebutton',...
    'Style','Toggle',...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'String','auto',...
    'TooltipString','Display legend automatically (in best position)',...
    'pos',[10 10 (handle_size(3)-40)/5 30],...
    'parent',handle_p4,...
    'HandleVisibility','off',...
    'Value',0,...
    'Callback',{@grid_legend_togglebutton_Callback}...
    );
uicontrol('Tag','display_panel_legend_nw_togglebutton',...
    'Style','Toggle',...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'String','NW',...
    'TooltipString','Display legend in upper left corner',...
    'pos',[handle_size(3)-30-(((handle_size(3)-50)/5)*4) 10 (handle_size(3)-50)/5 30],...
    'parent',handle_p4,...
    'HandleVisibility','off',...
    'Value',0,...
    'Callback',{@grid_legend_togglebutton_Callback}...
    );
uicontrol('Tag','display_panel_legend_ne_togglebutton',...
    'Style','Toggle',...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'String','NE',...
    'TooltipString','Display legend in upper right corner',...
    'pos',[handle_size(3)-30-(((handle_size(3)-50)/5)*3) 10 (handle_size(3)-50)/5 30],...
    'parent',handle_p4,...
    'HandleVisibility','off',...
    'Value',0,...
    'Callback',{@grid_legend_togglebutton_Callback}...
    );
uicontrol('Tag','display_panel_legend_sw_togglebutton',...
    'Style','Toggle',...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'String','SW',...
    'TooltipString','Display legend in lower left corner',...
    'pos',[handle_size(3)-30-(((handle_size(3)-50)/5)*2) 10 (handle_size(3)-50)/5 30],...
    'parent',handle_p4,...
    'HandleVisibility','off',...
    'Value',0,...
    'Callback',{@grid_legend_togglebutton_Callback}...
    );
uicontrol('Tag','display_panel_legend_se_togglebutton',...
    'Style','Toggle',...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'String','SE',...
    'TooltipString','Display legend in lower right corner',...
    'pos',[handle_size(3)-30-(((handle_size(3)-50)/5)) 10 (handle_size(3)-50)/5 30],...
    'parent',handle_p4,...
    'HandleVisibility','off',...
    'Value',0,...
    'Callback',{@grid_legend_togglebutton_Callback}...
    );

handle_p5 = uipanel('Tag','display_panel_normalise_panel',...
    'Parent',handle_pp2,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[0 handle_size(4)-320 handle_size(3)-20 60],...
    'Title','Normalise'...
    );
uicontrol('Tag','display_panel_normalise_pkpk_togglebutton',...
    'Style','Toggle',...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'String','Pk-Pk = 1',...
    'TooltipString','Normalise peak-peak to 1',...
    'pos',[handle_size(3)-30-(((handle_size(3)-40)/2)*2) 10 (handle_size(3)-40)/2 30],...
    'parent',handle_p5,...
    'HandleVisibility','off',...
    'Value',0,...
    'Callback',{@normalise_togglebutton_Callback}...
    );
uicontrol('Tag','display_panel_normalise_amplitude_togglebutton',...
    'Style','Toggle',...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'String','amplitude = 1',...
    'TooltipString','Normalise amplitude to 1',...
    'pos',[handle_size(3)-30-(((handle_size(3)-40)/2)) 10 (handle_size(3)-40)/2 30],...
    'parent',handle_p5,...
    'HandleVisibility','off',...
    'Value',0,...
    'Callback',{@normalise_togglebutton_Callback}...
    );

handle_p6 = uipanel('Tag','display_panel_highlight_panel',...
    'Parent',handle_pp2,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[0 handle_size(4)-450 handle_size(3)-20 120],...
    'Title','Highlight of current dataset'...
    );
uicontrol('Tag','display_panel_highlight_checkbox',...
    'Style','checkbox',...
    'Parent',handle_p6,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[80 75 handle_size(3)-100 20],...
    'String',' Highlight active',...
    'TooltipString','Toggle between highlighting currently active dataset',...
    'Value',1,...
    'Callback',{@highlight_checkbox_Callback}...
    );
uicontrol('Tag','display_panel_highlight_method_text',...
    'Style','text',...
    'Parent',handle_p6,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10 40 60 20],...
    'String','Method'...
    );
uicontrol('Tag','display_panel_highlight_value_text',...
    'Style','text',...
    'Parent',handle_p6,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10 10 60 20],...
    'String','Value'...
    );
uicontrol('Tag','display_panel_highlight_method_popupmenu',...
    'Style','popupmenu',...
    'Parent',handle_p6,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[80 40 handle_size(3)-105 20],...
    'String','color|linewidth|linestyle|marker',...
    'TooltipString','Choose a highlighting method for currently active dataset',...
    'Callback',{@highlight_method_popupmenu_Callback}...
    );
uicontrol('Tag','display_panel_highlight_value_popupmenu',...
    'Style','popupmenu',...
    'Parent',handle_p6,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[80 10 handle_size(3)-105 20],...
    'String','blue|green|red|cyan|magenta|yellow|black',...
    'TooltipString','Choose a highlighting value for currently active dataset',...
    'Callback',{@highlight_value_popupmenu_Callback}...
    );

handle_p7 = uipanel('Tag','display_panel_datasets_panel',...
    'Parent',handle_pp3,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[0 handle_size(4)-220 handle_size(3)-20 100],...
    'Title','Select dataset'...
    );
uicontrol('Tag','display_panel_datasets_listbox',...
    'Style','listbox',...
    'Parent',handle_p7,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10 10 handle_size(3)-40 70],...
    'String','',...
    'Enable','Off',...
    'Callback',{@datasets_listbox_Callback}...
    );

handle_p8 = uipanel('Tag','display_panel_colour_panel',...
    'Parent',handle_pp3,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[0 handle_size(4)-330 handle_size(3)-20 100],...
    'Title','Colour'...
    );
uicontrol('Tag','display_panel_colour_type_text',...
    'Style','text',...
    'Parent',handle_p8,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10 50 40 20],...
    'String','Type'...
    );
uicontrol('Tag','display_panel_colour_type_popupmenu',...
    'Style','popupmenu',...
    'Parent',handle_p8,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[60 50 (handle_size(3)-90)/2 20],...
    'String','name|RGB',...
    'Enable','inactive',...
    'Callback',{@colour_type_popupmenu_Callback}...
    );
uicontrol('Tag','display_panel_colour_type2_popupmenu',...
    'Style','popupmenu',...
    'Parent',handle_p8,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[60+((handle_size(3)-90)/2) 50 (handle_size(3)-90)/2 20],...
    'String','b|g|r|c|m|y|k',...
    'Callback',{@colour_type2_popupmenu_Callback}...
    );
uicontrol('Tag','display_panel_colour_type_text',...
    'Style','text',...
    'Parent',handle_p8,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10 10 40 20],...
    'String','RGB'...
    );
uicontrol('Tag','display_panel_colour_r_edit',...
    'Style','edit',...
    'Parent',handle_p8,...
    'BackgroundColor',[1 1 1],...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[60 10 (handle_size(3)-90)/3 25],...
    'String','1',...
    'Enable','Off',...
    'Callback',{@display_edit_Callback,'colourr'}...
    );
uicontrol('Tag','display_panel_colour_g_edit',...
    'Style','edit',...
    'Parent',handle_p8,...
    'BackgroundColor',[1 1 1],...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[60+(handle_size(3)-90)/3 10 (handle_size(3)-90)/3 25],...
    'String','0',...
    'Enable','Off',...
    'Callback',{@display_edit_Callback,'colourg'}...
    );
uicontrol('Tag','display_panel_colour_b_edit',...
    'Style','edit',...
    'Parent',handle_p8,...
    'BackgroundColor',[1 1 1],...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[60+(handle_size(3)-90)/3*2 10 (handle_size(3)-90)/3 25],...
    'String','0',...
    'Enable','Off',...
    'Callback',{@display_edit_Callback,'colourb'}...
    );

handle_p9 = uipanel('Tag','display_panel_line_panel',...
    'Parent',handle_pp3,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[0 handle_size(4)-460 handle_size(3)-20 120],...
    'Title','Line settings'...
    );
uicontrol('Tag','display_panel_linewidth_text',...
    'Style','text',...
    'Parent',handle_p9,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10 70 60 20],...
    'String','Width'...
    );
uicontrol('Tag','display_panel_linewidth_popupmenu',...
    'Style','popupmenu',...
    'Parent',handle_p9,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[80 70 handle_size(3)-105 20],...
    'String','1 px|2 px|3 px|4 px|5 px',...
    'Callback',{@linewidth_popupmenu_Callback}...
    );
uicontrol('Tag','display_panel_linestyle_text',...
    'Style','text',...
    'Parent',handle_p9,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10 40 60 20],...
    'String','Style'...
    );
uicontrol('Tag','display_panel_linestyle_popupmenu',...
    'Style','popupmenu',...
    'Parent',handle_p9,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[80 40 handle_size(3)-105 20],...
    'String','solid|dashed|dotted|dash-dotted|none',...
    'Callback',{@linestyle_popupmenu_Callback}...
    );
uicontrol('Tag','display_panel_linemarker_text',...
    'Style','text',...
    'Parent',handle_p9,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10 10 60 20],...
    'String','Marker'...
    );
uicontrol('Tag','display_panel_linemarker_popupmenu',...
    'Style','popupmenu',...
    'Parent',handle_p9,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[80 10 handle_size(3)-105 20],...
    'String',['none|plus|circle|asterisk|point|cross|square|diamond|'...
    'triangle up|triangle down|triangle right|triangle left|'...
    'pentagram|hexagram'],...
    'Callback',{@linemarker_popupmenu_Callback}...
    );

handle_p10 = uipanel('Tag','display_panel_axesexport_panel',...
    'Parent',handle_pp4,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[0 handle_size(4)-240 handle_size(3)-20 120],...
    'Title','Export figure'...
    );
uicontrol('Tag','display_panel_axesexport_description',...
    'Style','text',...
    'Parent',handle_p10,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'HorizontalAlignment','Left',...
    'FontAngle','oblique',...
    'Position',[10 70 handle_size(3)-40 20],...
    'String',{'Export current axes.'}...
    );
uicontrol('Tag','display_panel_axesexport_format_text',...
    'Style','text',...
    'Parent',handle_p10,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'HorizontalAlignment','left',...
    'Units','Pixels',...
    'Position',[10 40 60 20],...
    'String','Format'...
    );
uicontrol('Tag','display_panel_axesexport_format_popupmenu',...
    'Style','popupmenu',...
    'Parent',handle_p10,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[handle_size(3)-190 45 160 20],...
    'String','default|square|fullwidth|fullwidthhalfheight|halfwidth',...
    'Enable','inactive',...
    'TooltipString','Select format of exported graphics'...
    );
uicontrol('Tag','display_panel_axesexport_filetype_text',...
    'Style','text',...
    'Parent',handle_p10,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'HorizontalAlignment','left',...
    'Units','Pixels',...
    'Position',[10 10 60 20],...
    'String','File type'...
    );
uicontrol('Tag','display_panel_axesexport_filetype_popupmenu',...
    'Style','popupmenu',...
    'Parent',handle_p10,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[handle_size(3)-190 15 100 20],...
    'String','fig|eps|pdf|png',...
    'TooltipString','Select type of graphics file'...
    );
uicontrol('Tag','display_panel_axesexport_pushbutton',...
    'Style','pushbutton',...
    'Parent',handle_p10,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[handle_size(3)-90 10 60 30],...
    'String','Export',...
    'TooltipString','Export current axis to graphics file with given format',...
    'Callback',{@axesexport_pushbutton_Callback}...
    );

handle_p11 = uipanel('Tag','display_panel_dataexport_panel',...
    'Parent',handle_pp4,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[0 handle_size(4)-410 handle_size(3)-20 160],...
    'Title','Export 1D data'...
    );
uicontrol('Tag','display_panel_dataexport_description',...
    'Style','text',...
    'Parent',handle_p11,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'HorizontalAlignment','Left',...
    'FontAngle','oblique',...
    'Position',[10 110 handle_size(3)-40 20],...
    'String',{'Export currently active 1D dataset.'}...
    );
uicontrol('Tag','display_panel_dataexport_header_text',...
    'Style','text',...
    'Parent',handle_p11,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'HorizontalAlignment','left',...
    'Units','Pixels',...
    'Position',[10 80 150 20],...
    'TooltipString','Character(s) the header starts with; default: "%" (Matlab)',...
    'String','Header starts with'...
    );
uicontrol('Tag','display_panel_dataexport_header_edit',...
    'Style','edit',...
    'Parent',handle_p11,...
    'BackgroundColor',[1 1 1],...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[170 80 60 25],...
    'String','%',...
    'TooltipString','Character the header should start with'...
    );
uicontrol('Tag','display_panel_dataexport_includeaxis_checkbox',...
    'Style','checkbox',...
    'Parent',handle_p11,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10 50 handle_size(3)-20 20],...
    'String',' include axis as first column',...
    'TooltipString','Toggle between including or excluding axis values',...
    'Value',1 ...
    );
uicontrol('Tag','display_panel_dataexport_filetype_text',...
    'Style','text',...
    'Parent',handle_p11,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'HorizontalAlignment','left',...
    'Units','Pixels',...
    'Position',[10 10 60 20],...
    'String','File type'...
    );
uicontrol('Tag','display_panel_dataexport_filetype_popupmenu',...
    'Style','popupmenu',...
    'Parent',handle_p11,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[handle_size(3)-190 15 100 20],...
    'String','ASCII',...
    'TooltipString','Select type of data file'...
    );
uicontrol('Tag','display_panel_dataexport_pushbutton',...
    'Style','pushbutton',...
    'Parent',handle_p11,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[handle_size(3)-90 10 60 30],...
    'String','Export',...
    'TooltipString',sprintf('%s\n%s',...
    'Export currently active dataset in current (x or y) display',...
    'to file with given type'),...
    'Callback',{@dataexport_pushbutton_Callback}...
    );

handle_p12 = uipanel('Tag','display_panel_3Ddisplay_panel',...
    'Parent',handle_pp5,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[0 handle_size(4)-430 handle_size(3)-20 310],...
    'Title','3D display'...
    );
uicontrol('Tag','display_panel_3D_reducing_text',...
    'Style','text',...
    'Parent',handle_p12,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'HorizontalAlign','left',...
    'FontAngle','italic',...
    'Units','Pixels',...
    'Position',[10 260 80 20],...
    'TooltipString','Set parameters to reduce data points in x and y',...
    'String','Reducing'...
    );
uicontrol('Tag','display_panel_3D_x_text',...
    'Style','text',...
    'Parent',handle_p12,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[100 260 (handle_size(3)-130)/2 20],...
    'String','x'...
    );
uicontrol('Tag','display_panel_3D_y_text',...
    'Style','text',...
    'Parent',handle_p12,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[100+(handle_size(3)-130)/2 260 (handle_size(3)-130)/2 20],...
    'String','y'...
    );
uicontrol('Tag','display_panel_3D_original_text',...
    'Style','text',...
    'Parent',handle_p12,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'HorizontalAlign','left',...
    'Units','Pixels',...
    'Position',[10 230 80 20],...
    'TooltipString','Original size of currently active dataset in datapoints in x and y',...
    'String','Original'...
    );
uicontrol('Tag','display_panel_3D_original_x_edit',...
    'Style','edit',...
    'Parent',handle_p12,...
    'BackgroundColor',[.9 .9 .9],...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[100 230 (handle_size(3)-130)/2 25],...
    'String','1',...
    'Enable','inactive',...
    'TooltipString','Original size of currently active dataset in x dimension'...
    );
uicontrol('Tag','display_panel_3D_original_y_edit',...
    'Style','edit',...
    'Parent',handle_p12,...
    'BackgroundColor',[.9 .9 .9],...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[100+(handle_size(3)-130)/2 230 (handle_size(3)-130)/2 25],...
    'String','1',...
    'Enable','inactive',...
    'TooltipString','Original size of currently active dataset in y dimension'...
    );
uicontrol('Tag','display_panel_3D_factor_text',...
    'Style','text',...
    'Parent',handle_p12,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'HorizontalAlign','left',...
    'Units','Pixels',...
    'Position',[10 200 80 20],...
    'TooltipString','Factor by which to reduce the number of datapoints in x and y',...
    'String','Factor'...
    );
uicontrol('Tag','display_panel_3D_factor_x_edit',...
    'Style','edit',...
    'Parent',handle_p12,...
    'BackgroundColor',[1 1 1],...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[100 200 (handle_size(3)-130)/2 25],...
    'String','1',...
    'TooltipString','Factor by which to reduce the number of datapoints in x',...
    'Callback',{@show3d_edit_Callback,'xfactor'}...
    );
uicontrol('Tag','display_panel_3D_factor_y_edit',...
    'Style','edit',...
    'Parent',handle_p12,...
    'BackgroundColor',[1 1 1],...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[100+(handle_size(3)-130)/2 200 (handle_size(3)-130)/2 25],...
    'String','1',...
    'TooltipString','Factor by which to reduce the number of datapoints in y',...
    'Callback',{@show3d_edit_Callback,'yfactor'}...
    );
uicontrol('Tag','display_panel_3D_size_text',...
    'Style','text',...
    'Parent',handle_p12,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'HorizontalAlign','left',...
    'Units','Pixels',...
    'Position',[10 170 80 20],...
    'TooltipString','Size of dataset with current reducing factor',...
    'String','Size'...
    );
uicontrol('Tag','display_panel_3D_size_x_edit',...
    'Style','edit',...
    'Parent',handle_p12,...
    'BackgroundColor',[.9 .9 .9],...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[100 170 (handle_size(3)-130)/2 25],...
    'String','1',...
    'Enable','inactive'...
    );
uicontrol('Tag','display_panel_3D_size_y_edit',...
    'Style','edit',...
    'Parent',handle_p12,...
    'BackgroundColor',[.9 .9 .9],...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[100+(handle_size(3)-130)/2 170 (handle_size(3)-130)/2 25],...
    'String','1',...
    'Enable','inactive'...
    );
uicontrol('Tag','display_panel_offset_text',...
    'Style','text',...
    'Parent',handle_p12,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'HorizontalAlign','left',...
    'FontAngle','italic',...
    'Units','Pixels',...
    'Position',[10 140 80 20],...
    'TooltipString','Offset by which to shift the (reduced) data from left in x and y',...
    'String','Offset'...
    );
uicontrol('Tag','display_panel_offset_auto_checkbox',...
    'Style','checkbox',...
    'Parent',handle_p12,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[100 140 handle_size(3)-120 20],...
    'String',' automatic',...
    'TooltipString','Toggle between automatic and manual offset',...
    'Value',1 ...
    );
uicontrol('Tag','display_panel_3D_offset_type_popupmenu',...
    'Style','popupmenu',...
    'Parent',handle_p12,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10 110 80 20],...
    'String','left|right',...
    'TooltipString','Select type of offset'...
    );
uicontrol('Tag','display_panel_3D_offset_x_edit',...
    'Style','edit',...
    'Parent',handle_p12,...
    'BackgroundColor',[1 1 1],...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[100 110 (handle_size(3)-130)/2 25],...
    'String','0',...
    'TooltipString','Offset by which to shift the (reduced) data in x',...
    'Callback',{@show3d_edit_Callback,'xoffset'}...
    );
uicontrol('Tag','display_panel_3D_offset_y_edit',...
    'Style','edit',...
    'Parent',handle_p12,...
    'BackgroundColor',[1 1 1],...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[100+(handle_size(3)-130)/2 110 (handle_size(3)-130)/2 25],...
    'String','0',...
    'TooltipString','Offset by which to shift the (reduced) data in y',...
    'Callback',{@show3d_edit_Callback,'yoffset'}...
    );
uicontrol('Tag','display_panel_3D_display_type_text',...
    'Style','text',...
    'Parent',handle_p12,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'HorizontalAlignment','left',...
    'FontAngle','italic',...
    'Units','Pixels',...
    'Position',[10 70 60 20],...
    'String','Type'...
    );
uicontrol('Tag','display_panel_3D_display_type_popupmenu',...
    'Style','popupmenu',...
    'Parent',handle_p12,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[handle_size(3)-190 75 100 20],...
    'String','surf|surfc|mesh|trisurf|trimesh',...
    'TooltipString','Select type of 3D representation'...
    );
uicontrol('Tag','display_panel_3D_show_pushbutton',...
    'Style','pushbutton',...
    'Parent',handle_p12,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[handle_size(3)-90 70 60 30],...
    'String','Show',...
    'TooltipString',sprintf('%s\n%s',...
    'Show currently active dataset in given representation',...
    'as 3D display'),...
    'Callback',{@show3d_pushbutton_Callback}...
    );
uicontrol('Tag','display_panel_3D_format_text',...
    'Style','text',...
    'Parent',handle_p12,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'HorizontalAlignment','left',...
    'Units','Pixels',...
    'Position',[10 40 60 20],...
    'String','Format'...
    );
uicontrol('Tag','display_panel_3D_format_popupmenu',...
    'Style','popupmenu',...
    'Parent',handle_p12,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[handle_size(3)-190 45 160 20],...
    'String','default|square|fullwidth|fullwidthhalfheight|halfwidth',...
    'Enable','inactive',...
    'TooltipString','Select format of exported graphics'...
    );
uicontrol('Tag','display_panel_axesexport_filetype_text',...
    'Style','text',...
    'Parent',handle_p12,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'HorizontalAlignment','left',...
    'Units','Pixels',...
    'Position',[10 10 60 20],...
    'String','File type'...
    );
uicontrol('Tag','display_panel_3D_filetype_popupmenu',...
    'Style','popupmenu',...
    'Parent',handle_p12,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[handle_size(3)-190 15 100 20],...
    'String','fig|eps|pdf|png',...
    'TooltipString','Select type of graphics file'...
    );
uicontrol('Tag','display_panel_3D_export_pushbutton',...
    'Style','pushbutton',...
    'Parent',handle_p12,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[handle_size(3)-90 10 60 30],...
    'String','Export',...
    'TooltipString',sprintf('%s\n%s',...
    'Export 3D representation of currently active dataset',...
    'to graphics file with given format'),...
    'Callback',{@export3d_pushbutton_Callback}...
    );

handle_p13 = uipanel('Tag','display_panel_gaxis_panel',...
    'Parent',handle_pp6,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[0 handle_size(4)-180 handle_size(3)-20 60],...
    'Title','g axis'...
    );
uicontrol('Tag','display_panel_gaxis_description',...
    'Style','text',...
    'Parent',handle_p13,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'HorizontalAlignment','Left',...
    'FontAngle','oblique',...
    'Position',[10 10 handle_size(3)-40 20],...
    'String','High tech shit. Comes later...'...
    );

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%  Initialization tasks
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%  Callbacks
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

function pages_buttongroup_Callback(source,~)
    try
        page_panels = [handle_pp1 handle_pp2 handle_pp3 handle_pp4...
            handle_pp5 handle_pp6];
        val = get(get(source,'SelectedObject'),'String');
        switch val
            case '1'
                set(page_panels,'Visible','off');
                set(handle_pp1,'Visible','on');
            case '2'
                set(page_panels,'Visible','off');
                set(handle_pp2,'Visible','on');
            case '3'
                set(page_panels,'Visible','off');
                set(handle_pp3,'Visible','on');
            case '4'
                set(page_panels,'Visible','off');
                set(handle_pp4,'Visible','on');
            case '5'
                set(page_panels,'Visible','off');
                set(handle_pp5,'Visible','on');
            case '6'
                set(page_panels,'Visible','off');
                set(handle_pp6,'Visible','on');
        end
    catch exception
        try
            msgStr = ['An exception occurred. '...
                'The bug reporter should have been opened'];
            add2status(msgStr);
        catch exception2
            exception = addCause(exception2, exception);
            disp(msgStr);
        end
        try
            trEPRgui_bugreportwindow(exception);
        catch exception3
            % If even displaying the bug report window fails...
            exception = addCause(exception3, exception);
            throw(exception);
        end
    end
end

function axislabels_edit_Callback(source,~,label)
    try
        % Get appdata of main window
        mainWindow = guiGetWindowHandle;
        ad = getappdata(mainWindow);
        
        switch label
            case 'xmeasure'
                ad.control.axis.labels.x.measure = get(source,'String');
            case 'xunit'
                ad.control.axis.labels.x.unit = get(source,'String');
            case 'ymeasure'
                ad.control.axis.labels.y.measure = get(source,'String');
            case 'yunit'
                ad.control.axis.labels.y.unit = get(source,'String');
            case 'zmeasure'
                ad.control.axis.labels.z.measure = get(source,'String');
            case 'zunit'
                ad.control.axis.labels.z.unit = get(source,'String');
            otherwise
                msgstr = { 'Unknown axis label in callback function call.' ...
                    sprintf('Function "%s" in file "%s"',...
                    'axislabels_edit_Callback',...
                    mfilename ...
                    )...
                    };
                status = add2status(msgstr);
                return;
        end
        
        % Update appdata of main window
        setappdata(mainWindow,'control',ad.control);
        
        %Update main axis
        update_mainAxis();
    catch exception
        try
            msgStr = ['An exception occurred. '...
                'The bug reporter should have been opened'];
            add2status(msgStr);
        catch exception2
            exception = addCause(exception2, exception);
            disp(msgStr);
        end
        try
            trEPRgui_bugreportwindow(exception);
        catch exception3
            % If even displaying the bug report window fails...
            exception = addCause(exception3, exception);
            throw(exception);
        end
    end
end

function axislabels_getfromactivedataset_pushbutton_Callback(~,~)
    try
        % Get appdata of main window
        mainWindow = guiGetWindowHandle;
        ad = getappdata(mainWindow);
        
        if (isempty(ad.control.spectra.active))
            return;
        end
        
        if (isfield(ad.data{ad.control.spectra.active},'axes'))
            if (isfield(ad.data{ad.control.spectra.active}.axes,'x') && ...
                    isfield(ad.data{ad.control.spectra.active}.axes.x,'measure'))
                ad.control.axis.labels.x.measure = ...
                    ad.data{ad.control.spectra.active}.axes.x.measure;
            end
            if (isfield(ad.data{ad.control.spectra.active}.axes,'x') && ...
                    isfield(ad.data{ad.control.spectra.active}.axes.x,'unit'))
                ad.control.axis.labels.x.unit = ...
                    ad.data{ad.control.spectra.active}.axes.x.unit;
            end
            if (isfield(ad.data{ad.control.spectra.active}.axes,'y') && ...
                    isfield(ad.data{ad.control.spectra.active}.axes.y,'measure'))
                ad.control.axis.labels.y.measure = ...
                    ad.data{ad.control.spectra.active}.axes.y.measure;
            end
            if (isfield(ad.data{ad.control.spectra.active}.axes,'y') && ...
                    isfield(ad.data{ad.control.spectra.active}.axes.y,'unit'))
                ad.control.axis.labels.y.unit = ...
                    ad.data{ad.control.spectra.active}.axes.y.unit;
            end
            if (isfield(ad.data{ad.control.spectra.active}.axes,'z') && ...
                    isfield(ad.data{ad.control.spectra.active}.axes.z,'measure'))
                ad.control.axis.labels.z.measure = ...
                    ad.data{ad.control.spectra.active}.axes.z.measure;
            end
            if (isfield(ad.data{ad.control.spectra.active}.axes,'z') && ...
                    isfield(ad.data{ad.control.spectra.active}.axes.z,'unit'))
                ad.control.axis.labels.z.unit = ...
                    ad.data{ad.control.spectra.active}.axes.z.unit;
            end
        end
        
        % Update appdata of main window
        setappdata(mainWindow,'control',ad.control);
        
        % Update display panel
        update_displayPanel();
        
        %Update main axis
        update_mainAxis();
    catch exception
        try
            msgStr = ['An exception occurred. '...
                'The bug reporter should have been opened'];
            add2status(msgStr);
        catch exception2
            exception = addCause(exception2, exception);
            disp(msgStr);
        end
        try
            trEPRgui_bugreportwindow(exception);
        catch exception3
            % If even displaying the bug report window fails...
            exception = addCause(exception3, exception);
            throw(exception);
        end
    end
end

function axislimits_edit_Callback(source,~,limit)
    try
        % Get appdata of main window
        mainWindow = guiGetWindowHandle;
        ad = getappdata(mainWindow);
        
        switch limit
            case 'xmin'
                ad.control.axis.limits.x.min = str2double(get(source,'String'));
            case 'xmax'
                % Test whether value is larger than min for same axis
                if (str2num(get(source,'String')) > ad.control.axis.limits.x.min)
                    ad.control.axis.limits.x.max = str2double(get(source,'String'));
                else
                    set(source,'String',num2str(ad.control.axis.limits.x.max));
                    msgstr = 'Upper limit of an axis must be always bigger than lower limit.';
                    status = add2status(msgstr);
                    return;
                end
            case 'ymin'
                ad.control.axis.limits.y.min = str2double(get(source,'String'));
            case 'ymax'
                % Test whether value is larger than min for same axis
                if (str2num(get(source,'String')) > ad.control.axis.limits.y.min)
                    ad.control.axis.limits.y.max = str2double(get(source,'String'));
                else
                    set(source,'String',num2str(ad.control.axis.limits.y.max));
                    msgstr = 'Upper limit of an axis must be always bigger than lower limit.';
                    status = add2status(msgstr);
                    return;
                end
            case 'zmin'
                ad.control.axis.limits.z.min = str2double(get(source,'String'));
            case 'zmax'
                % Test whether value is larger than min for same axis
                if (str2num(get(source,'String')) > ad.control.axis.limits.z.min)
                    ad.control.axis.limits.z.max = str2double(get(source,'String'));
                else
                    set(source,'String',num2str(ad.control.axis.limits.z.max));
                    msgstr = 'Upper limit of an axis must be always bigger than lower limit.';
                    status = add2status(msgstr);
                    return;
                end
            otherwise
                msgstr = { 'Unknown axis limit in callback function call.' ...
                    sprintf('Function "%s" in file "%s"',...
                    'axislimits_edit_Callback',...
                    mfilename ...
                    )...
                    };
                status = add2status(msgstr);
                return;
        end
        
        % Update appdata of main window
        setappdata(mainWindow,'control',ad.control);
        
        %Update main axis
        update_mainAxis();
    catch exception
        try
            msgStr = ['An exception occurred. '...
                'The bug reporter should have been opened'];
            add2status(msgStr);
        catch exception2
            exception = addCause(exception2, exception);
            disp(msgStr);
        end
        try
            trEPRgui_bugreportwindow(exception);
        catch exception3
            % If even displaying the bug report window fails...
            exception = addCause(exception3, exception);
            throw(exception);
        end
    end
end

function axislimits_auto_checkbox_Callback(source,~)
    try
        % Get appdata of main window
        mainWindow = guiGetWindowHandle;
        ad = getappdata(mainWindow);
        
        ad.control.axis.limits.auto = get(source,'Value');
        
        % Update appdata of main window
        setappdata(mainWindow,'control',ad.control);
        
        % Update display panel
        update_displayPanel();
        
        %Update main axis
        update_mainAxis();
    catch exception
        try
            msgStr = ['An exception occurred. '...
                'The bug reporter should have been opened'];
            add2status(msgStr);
        catch exception2
            exception = addCause(exception2, exception);
            disp(msgStr);
        end
        try
            trEPRgui_bugreportwindow(exception);
        catch exception3
            % If even displaying the bug report window fails...
            exception = addCause(exception3, exception);
            throw(exception);
        end
    end
end

function highlight_checkbox_Callback(source,~)
    try
        % Get appdata of main window
        mainWindow = guiGetWindowHandle;
        ad = getappdata(mainWindow);
        
        % Get handles of main window
        gh = guihandles(mainWindow);
        
        if (get(source,'Value'))
            set(gh.display_panel_highlight_method_popupmenu,...
                'Enable','On');
            set(gh.display_panel_highlight_value_popupmenu,...
                'Enable','On');
            highlightTypes = ...
                cellstr(get(gh.display_panel_highlight_method_popupmenu,'String'));
            highlightType = ...
                highlightTypes{get(gh.display_panel_highlight_method_popupmenu,'Value')};
            ad.control.axis.highlight.method = highlightType;
        else
            set(gh.display_panel_highlight_method_popupmenu,...
                'Enable','Off');
            set(gh.display_panel_highlight_value_popupmenu,...
                'Enable','Off');
            ad.control.axis.highlight.method = '';
        end
        
        % Update appdata of main window
        setappdata(mainWindow,'control',ad.control);
        
        %Update main axis
        update_mainAxis();
    catch exception
        try
            msgStr = ['An exception occurred. '...
                'The bug reporter should have been opened'];
            add2status(msgStr);
        catch exception2
            exception = addCause(exception2, exception);
            disp(msgStr);
        end
        try
            trEPRgui_bugreportwindow(exception);
        catch exception3
            % If even displaying the bug report window fails...
            exception = addCause(exception3, exception);
            throw(exception);
        end
    end
end

function highlight_method_popupmenu_Callback(source,eventdata)
    try
        % Get appdata of main window
        mainWindow = guiGetWindowHandle;
        ad = getappdata(mainWindow);
        
        % Get handles of main window
        gh = guihandles(mainWindow);
        
        highlightTypes = cellstr(get(source,'String'));
        highlightType = highlightTypes{get(source,'Value')};
        ad.control.axis.highlight.method = highlightType;
        
        switch highlightType
            case 'color'
                set(gh.display_panel_highlight_value_popupmenu,...
                    'String','blue|green|red|cyan|magenta|yellow|black');
                set(gh.display_panel_highlight_value_popupmenu,...
                    'Value',1);
            case 'linewidth'
                set(gh.display_panel_highlight_value_popupmenu,...
                    'String','1 px|2 px|3 px|4 px|5 px');
                set(gh.display_panel_highlight_value_popupmenu,...
                    'Value',1);
            case 'linestyle'
                set(gh.display_panel_highlight_value_popupmenu,...
                    'String','solid|dashed|dotted|dash-dotted');
                set(gh.display_panel_highlight_value_popupmenu,...
                    'Value',1);
            case 'marker'
                set(gh.display_panel_highlight_value_popupmenu,...
                    'String','plus|circle|asterisk|point|cross|square|diamond|triangle up|triangle down|triangle right|triangle left|pentagram|hexagram');
                set(gh.display_panel_highlight_value_popupmenu,...
                    'Value',1);
            otherwise
                msg = sprintf('Highlight type %s currently unsupported',highlightType);
                add2status(msg);
        end
        
        % Update appdata of main window
        setappdata(mainWindow,'control',ad.control);
        
        % Update highlight_value_popupmenu
        highlight_value_popupmenu_Callback(source,eventdata);
        
        %Update main axis
        update_mainAxis();
    catch exception
        try
            msgStr = ['An exception occurred. '...
                'The bug reporter should have been opened'];
            add2status(msgStr);
        catch exception2
            exception = addCause(exception2, exception);
            disp(msgStr);
        end
        try
            trEPRgui_bugreportwindow(exception);
        catch exception3
            % If even displaying the bug report window fails...
            exception = addCause(exception3, exception);
            throw(exception);
        end
    end
end

function highlight_value_popupmenu_Callback(source,eventdata)
    try
        % Get appdata of main window
        mainWindow = guiGetWindowHandle;
        ad = getappdata(mainWindow);
        
        % Get handles of main window
        gh = guihandles(mainWindow);
        
        highlightValues = ...
            cellstr(get(gh.display_panel_highlight_value_popupmenu,'String'));
        highlightValue = ...
            highlightValues{get(gh.display_panel_highlight_value_popupmenu,'Value')};
        
        highlight = struct();
        highlight.color = struct(...
            'blue','b',...
            'green','g',...
            'red','r',...
            'cyan','c',...
            'magenta','m',...
            'yellow','y',...
            'black','k');
        highlight.linewidth = struct(...
            'n1px',1,...
            'n2px',2,...
            'n3px',3,...
            'n4px',4,...
            'n5px',5);
        highlight.linestyle = struct(...
            'solid','-',...
            'dashed','--',...
            'dotted',':',...
            'dashdotted','-.');
        highlight.marker = struct(...
            'plus','+',...
            'circle','o',...
            'asterisk','*',...
            'point','.',...
            'cross','x',...
            'square','s',...
            'diamond','d',...
            'triangleup','^',...
            'triangledown','v',...
            'triangleright','>',...
            'triangleleft','<',...
            'pentagram','p',...
            'hexagram','h');
        
        ad.control.axis.highlight.value = ...
            getfield(getfield(highlight,ad.control.axis.highlight.method),...
            regexprep(strrep(strrep(highlightValue,' ',''),'-',''),'^([0-9])','n$1'));
        
        % Update appdata of main window
        setappdata(mainWindow,'control',ad.control);
        
        %Update main axis
        update_mainAxis();
    catch exception
        try
            msgStr = ['An exception occurred. '...
                'The bug reporter should have been opened'];
            add2status(msgStr);
        catch exception2
            exception = addCause(exception2, exception);
            disp(msgStr);
        end
        try
            trEPRgui_bugreportwindow(exception);
        catch exception3
            % If even displaying the bug report window fails...
            exception = addCause(exception3, exception);
            throw(exception);
        end
    end
end

function grid_x_togglebutton_Callback(source,eventdata)
    try
        % Get appdata of main window
        mainWindow = guiGetWindowHandle;
        ad = getappdata(mainWindow);
        
        if (get(source,'Value'))
            ad.control.axis.grid.x = 'on';
        else
            ad.control.axis.grid.x = 'off';
        end
        
        % Update appdata of main window
        setappdata(mainWindow,'control',ad.control);
        
        %Update main axis
        update_mainAxis();
    catch exception
        try
            msgStr = ['An exception occurred. '...
                'The bug reporter should have been opened'];
            add2status(msgStr);
        catch exception2
            exception = addCause(exception2, exception);
            disp(msgStr);
        end
        try
            trEPRgui_bugreportwindow(exception);
        catch exception3
            % If even displaying the bug report window fails...
            exception = addCause(exception3, exception);
            throw(exception);
        end
    end
end

function grid_y_togglebutton_Callback(source,~)
    try
        % Get appdata of main window
        mainWindow = guiGetWindowHandle;
        ad = getappdata(mainWindow);
        
        if (get(source,'Value'))
            ad.control.axis.grid.y = 'on';
        else
            ad.control.axis.grid.y = 'off';
        end
        
        % Update appdata of main window
        setappdata(mainWindow,'control',ad.control);
        
        %Update main axis
        update_mainAxis();
    catch exception
        try
            msgStr = ['An exception occurred. '...
                'The bug reporter should have been opened'];
            add2status(msgStr);
        catch exception2
            exception = addCause(exception2, exception);
            disp(msgStr);
        end
        try
            trEPRgui_bugreportwindow(exception);
        catch exception3
            % If even displaying the bug report window fails...
            exception = addCause(exception3, exception);
            throw(exception);
        end
    end
end

function grid_minor_togglebutton_Callback(source,~)
    try
        % Get appdata of main window
        mainWindow = guiGetWindowHandle;
        ad = getappdata(mainWindow);
        
        if (get(source,'Value'))
            ad.control.axis.grid.minor = 'on';
        else
            ad.control.axis.grid.minor = 'off';
        end
        
        % Update appdata of main window
        setappdata(mainWindow,'control',ad.control);
        
        %Update main axis
        update_mainAxis();
    catch exception
        try
            msgStr = ['An exception occurred. '...
                'The bug reporter should have been opened'];
            add2status(msgStr);
        catch exception2
            exception = addCause(exception2, exception);
            disp(msgStr);
        end
        try
            trEPRgui_bugreportwindow(exception);
        catch exception3
            % If even displaying the bug report window fails...
            exception = addCause(exception3, exception);
            throw(exception);
        end
    end
end

function grid_zero_togglebutton_Callback(source,~)
    try
        % Get appdata of main window
        mainWindow = guiGetWindowHandle;
        ad = getappdata(mainWindow);
        
        ad.control.axis.grid.zero = get(source,'Value');
        
        % Update appdata of main window
        setappdata(mainWindow,'control',ad.control);
        
        % Update main axis
        update_mainAxis();
    catch exception
        try
            msgStr = ['An exception occurred. '...
                'The bug reporter should have been opened'];
            add2status(msgStr);
        catch exception2
            exception = addCause(exception2, exception);
            disp(msgStr);
        end
        try
            trEPRgui_bugreportwindow(exception);
        catch exception3
            % If even displaying the bug report window fails...
            exception = addCause(exception3, exception);
            throw(exception);
        end
    end
end

function grid_legend_togglebutton_Callback(source,~)
    try
        % Get appdata of main window
        mainWindow = guiGetWindowHandle;
        ad = getappdata(mainWindow);
        
        % Get handles of main window
        gh = guihandles(mainWindow);
        
        % For some currently unknown reason, findobj seems not to work. The
        % parent handle behaves weird...
        legendButtons = [...
            gh.display_panel_legend_auto_togglebutton ...
            gh.display_panel_legend_nw_togglebutton ...
            gh.display_panel_legend_ne_togglebutton ...
            gh.display_panel_legend_sw_togglebutton ...
            gh.display_panel_legend_se_togglebutton ...
            ];
        
        switch source
            case gh.display_panel_legend_auto_togglebutton
                if (get(source,'Value'))
                    ad.control.axis.legend.location = 'Best';
                    set(legendButtons,'Value',0);
                    set(source,'Value',1);
                else
                    ad.control.axis.legend.location = 'none';
                    set(legendButtons,'Value',0);
                end
            case gh.display_panel_legend_nw_togglebutton
                if (get(source,'Value'))
                    ad.control.axis.legend.location = 'NorthWest';
                    set(legendButtons,'Value',0);
                    set(source,'Value',1);
                else
                    ad.control.axis.legend.location = 'none';
                    set(legendButtons,'Value',0);
                end
            case gh.display_panel_legend_ne_togglebutton
                if (get(source,'Value'))
                    ad.control.axis.legend.location = 'NorthEast';
                    set(legendButtons,'Value',0);
                    set(source,'Value',1);
                else
                    ad.control.axis.legend.location = 'none';
                    set(legendButtons,'Value',0);
                end
            case gh.display_panel_legend_sw_togglebutton
                if (get(source,'Value'))
                    ad.control.axis.legend.location = 'SouthWest';
                    set(legendButtons,'Value',0);
                    set(source,'Value',1);
                else
                    ad.control.axis.legend.location = 'none';
                    set(legendButtons,'Value',0);
                end
            case gh.display_panel_legend_se_togglebutton
                if (get(source,'Value'))
                    ad.control.axis.legend.location = 'SouthEast';
                    set(legendButtons,'Value',0);
                    set(source,'Value',1);
                else
                    ad.control.axis.legend.location = 'none';
                    set(legendButtons,'Value',0);
                end
        end
        
        % Update appdata of main window
        setappdata(mainWindow,'control',ad.control);
        
        %Update main axis
        update_mainAxis();
    catch exception
        try
            msgStr = ['An exception occurred. '...
                'The bug reporter should have been opened'];
            add2status(msgStr);
        catch exception2
            exception = addCause(exception2, exception);
            disp(msgStr);
        end
        try
            trEPRgui_bugreportwindow(exception);
        catch exception3
            % If even displaying the bug report window fails...
            exception = addCause(exception3, exception);
            throw(exception);
        end
    end
end

function normalise_togglebutton_Callback(source,~)
    try
        % Get appdata of main window
        mainWindow = guiGetWindowHandle;
        ad = getappdata(mainWindow);
        
        % Get handles of main window
        gh = guihandles(mainWindow);
        
        % For some currently unknown reason, findobj seems not to work. The
        % parent handle behaves weird...
        normaliseButtons = [...
            gh.display_panel_normalise_pkpk_togglebutton ...
            gh.display_panel_normalise_amplitude_togglebutton ...
            ];
        
        switch source
            case gh.display_panel_normalise_pkpk_togglebutton
                if (get(source,'Value'))
                    ad.control.axis.normalisation = 'pkpk';
                    set(normaliseButtons,'Value',0);
                    set(source,'Value',1);
                else
                    ad.control.axis.normalisation = 'none';
                    set(normaliseButtons,'Value',0);
                end
            case gh.display_panel_normalise_amplitude_togglebutton
                if (get(source,'Value'))
                    ad.control.axis.normalisation = 'amplitude';
                    set(normaliseButtons,'Value',0);
                    set(source,'Value',1);
                else
                    ad.control.axis.normalisation = 'none';
                    set(normaliseButtons,'Value',0);
                end
        end
        
        % Update appdata of main window
        setappdata(mainWindow,'control',ad.control);
        
        %Update main axis
        update_mainAxis();
        
        %Update slider panel
        update_sliderPanel();
    catch exception
        try
            msgStr = ['An exception occurred. '...
                'The bug reporter should have been opened'];
            add2status(msgStr);
        catch exception2
            exception = addCause(exception2, exception);
            disp(msgStr);
        end
        try
            trEPRgui_bugreportwindow(exception);
        catch exception3
            % If even displaying the bug report window fails...
            exception = addCause(exception3, exception);
            throw(exception);
        end
    end
end

function datasets_listbox_Callback(~,~)
    try
        % Get appdata of main window
        mainWindow = guiGetWindowHandle;
        ad = getappdata(mainWindow);
        
        % Get handles of main window
        gh = guihandles(mainWindow);
        
        ad.control.spectra.active = ad.control.spectra.visible(...
            get(gh.display_panel_datasets_listbox,'Value')...
            );
        
        % Update appdata of main window
        setappdata(mainWindow,'control',ad.control);
        
        % If user double clicked on list entry
        if strcmp(get(gcf,'SelectionType'),'open')
            datasetChangeLabel(ad.control.spectra.active);
        end
        
        % Update display panel
        update_displayPanel();
        
        % Update processing panel
        update_processingPanel();
        
        % Update slider panel
        update_sliderPanel();
        
        % Update visible spectra listboxes (in diverse panels!)
        update_visibleSpectra();
        
        %Update main axis
        update_mainAxis();
    catch exception
        try
            msgStr = ['An exception occurred. '...
                'The bug reporter should have been opened'];
            add2status(msgStr);
        catch exception2
            exception = addCause(exception2, exception);
            disp(msgStr);
        end
        try
            trEPRgui_bugreportwindow(exception);
        catch exception3
            % If even displaying the bug report window fails...
            exception = addCause(exception3, exception);
            throw(exception);
        end
    end
end

function colour_type_popupmenu_Callback(source,~)
    try
        % Get handles and appdata of main window
        mainWindow = guiGetWindowHandle;
        gh = guihandles(mainWindow);
        ad = getappdata(mainWindow);
        
        colourTypes = cellstr(get(source,'String'));
        colourType = colourTypes{get(source,'Value')};
        
        switch colourType
            case 'name'
                set(gh.display_panel_colour_type2_popupmenu,'Value',1);
                set(gh.display_panel_colour_type2_popupmenu,'String',...
                    'b|g|r|c|m|y|k'...
                    );
                if ad.control.spectra.active && ...
                        ischar(ad.data{ad.control.spectra.active}.line.color)
                    set(gh.display_panel_colour_type2_popupmenu,...
                        'Value',strfind('bgrcmyk',...
                        ad.data{ad.control.spectra.active}.line.color));
                end
                set(gh.display_panel_colour_r_edit,'Enable','Off');
                set(gh.display_panel_colour_g_edit,'Enable','Off');
                set(gh.display_panel_colour_b_edit,'Enable','Off');
            case 'RGB'
                set(gh.display_panel_colour_type2_popupmenu,'Value',1);
                set(gh.display_panel_colour_type2_popupmenu,'String',...
                    '0-1|0-255|0-FF'...
                    );
                set(gh.display_panel_colour_r_edit,'Enable','On');
                set(gh.display_panel_colour_g_edit,'Enable','On');
                set(gh.display_panel_colour_b_edit,'Enable','On');
            otherwise
                % That shall never happen
                add2status('trEPRgui_infowindow(): Unknown colour type');
        end
    catch exception
        try
            msgStr = ['An exception occurred. '...
                'The bug reporter should have been opened'];
            add2status(msgStr);
        catch exception2
            exception = addCause(exception2, exception);
            disp(msgStr);
        end
        try
            trEPRgui_bugreportwindow(exception);
        catch exception3
            % If even displaying the bug report window fails...
            exception = addCause(exception3, exception);
            throw(exception);
        end
    end
end

function colour_type2_popupmenu_Callback(source,~)
    try
        % Get appdata of main window
        mainWindow = guiGetWindowHandle;
        ad = getappdata(mainWindow);

        % Get handles of main window
        gh = guihandles(mainWindow);

        colourTypes = ...
            cellstr(get(gh.display_panel_colour_type_popupmenu,'String'));
        colourType = ...
            colourTypes{get(gh.display_panel_colour_type_popupmenu,'Value')};
                
        switch colourType
            case 'name'
                colourNames = cellstr(get(source,'String'));
                if ad.control.spectra.active
                    ad.data{ad.control.spectra.active}.line.color = ...
                        colourNames{get(source,'Value')};
                    % Update appdata of main window
                    setappdata(mainWindow,'data',ad.data);
                    % Update main axes
                    update_mainAxis();
                end
            case 'RGB'
            otherwise
                % That shall never happen
                add2status('trEPRgui : guiDisplayPanel: Unknown colour type');
        end
    catch exception
        try
            msgStr = ['An exception occurred. '...
                'The bug reporter should have been opened'];
            add2status(msgStr);
        catch exception2
            exception = addCause(exception2, exception);
            disp(msgStr);
        end
        try
            trEPRgui_bugreportwindow(exception);
        catch exception3
            % If even displaying the bug report window fails...
            exception = addCause(exception3, exception);
            throw(exception);
        end
    end
end

function linewidth_popupmenu_Callback(~,~)
    try
        % Get appdata of main window
        mainWindow = guiGetWindowHandle;
        ad = getappdata(mainWindow);

        % Get handles of main window
        gh = guihandles(mainWindow);

        lineWidths = ...
            cellstr(get(gh.display_panel_linewidth_popupmenu,'String'));
        lineWidth = ...
            lineWidths{get(gh.display_panel_linewidth_popupmenu,'Value')};
                
        if ad.control.spectra.active
            ad.data{ad.control.spectra.active}.line.width = ...
                str2double(lineWidth(1));
            % Update appdata of main window
            setappdata(mainWindow,'data',ad.data);
            % Update main axes
            update_mainAxis();
        end
    catch exception
        try
            msgStr = ['An exception occurred. '...
                'The bug reporter should have been opened'];
            add2status(msgStr);
        catch exception2
            exception = addCause(exception2, exception);
            disp(msgStr);
        end
        try
            trEPRgui_bugreportwindow(exception);
        catch exception3
            % If even displaying the bug report window fails...
            exception = addCause(exception3, exception);
            throw(exception);
        end
    end
end

function linestyle_popupmenu_Callback(~,~)
    try
        % Get appdata of main window
        mainWindow = guiGetWindowHandle;
        ad = getappdata(mainWindow);

        % Get handles of main window
        gh = guihandles(mainWindow);

        lineStyles = ...
            cellstr(get(gh.display_panel_linestyle_popupmenu,'String'));
        lineStyle = ...
            lineStyles{get(gh.display_panel_linestyle_popupmenu,'Value')};
                
        if ad.control.spectra.active
            switch lineStyle
                case 'solid'
                    ad.data{ad.control.spectra.active}.line.style = '-';
                case 'dashed'
                    ad.data{ad.control.spectra.active}.line.style = '--';
                case 'dotted'
                    ad.data{ad.control.spectra.active}.line.style = ':';
                case 'dash-dotted'
                    ad.data{ad.control.spectra.active}.line.style = '-.';
                case 'none'
                    ad.data{ad.control.spectra.active}.line.style = 'none';
                otherwise
                    % That shall never happen
                    add2status('trEPRgui : guiDisplayPanel: Unknown line style');
            end
            % Update appdata of main window
            setappdata(mainWindow,'data',ad.data);
            % Update main axes
            update_mainAxis();
        end
    catch exception
        try
            msgStr = ['An exception occurred. '...
                'The bug reporter should have been opened'];
            add2status(msgStr);
        catch exception2
            exception = addCause(exception2, exception);
            disp(msgStr);
        end
        try
            trEPRgui_bugreportwindow(exception);
        catch exception3
            % If even displaying the bug report window fails...
            exception = addCause(exception3, exception);
            throw(exception);
        end
    end
end

function linemarker_popupmenu_Callback(~,~)
    try
        % Get appdata of main window
        mainWindow = guiGetWindowHandle;
        ad = getappdata(mainWindow);

        % Get handles of main window
        gh = guihandles(mainWindow);

        lineMarkers = ...
            cellstr(get(gh.display_panel_linemarker_popupmenu,'String'));
        lineMarker = ...
            lineMarkers{get(gh.display_panel_linemarker_popupmenu,'Value')};
                
        if ad.control.spectra.active
            switch lineMarker
                case 'none'
                    ad.data{ad.control.spectra.active}.line.marker = 'none';
                case 'plus'
                    ad.data{ad.control.spectra.active}.line.marker = '+';
                case 'circle'
                    ad.data{ad.control.spectra.active}.line.marker = 'o';
                case 'asterisk'
                    ad.data{ad.control.spectra.active}.line.marker = '*';
                case 'point'
                    ad.data{ad.control.spectra.active}.line.marker = '.';
                case 'cross'
                    ad.data{ad.control.spectra.active}.line.marker = 'x';
                case 'square'
                    ad.data{ad.control.spectra.active}.line.marker = 's';
                case 'diamond'
                    ad.data{ad.control.spectra.active}.line.marker = 'd';
                case 'triangle up'
                    ad.data{ad.control.spectra.active}.line.marker = '^';
                case 'triangle down'
                    ad.data{ad.control.spectra.active}.line.marker = 'v';
                case 'triangle right'
                    ad.data{ad.control.spectra.active}.line.marker = '<';
                case 'triangle left'
                    ad.data{ad.control.spectra.active}.line.marker = '>';
                case 'pentagram'
                    ad.data{ad.control.spectra.active}.line.marker = 'p';
                case 'hexagram'
                    ad.data{ad.control.spectra.active}.line.marker = 'h';
                otherwise
                    % That shall never happen
                    add2status('trEPRgui : guiDisplayPanel: Unknown line marker');
            end
            % Update appdata of main window
            setappdata(mainWindow,'data',ad.data);
            % Update main axes
            update_mainAxis();
        end
    catch exception
        try
            msgStr = ['An exception occurred. '...
                'The bug reporter should have been opened'];
            add2status(msgStr);
        catch exception2
            exception = addCause(exception2, exception);
            disp(msgStr);
        end
        try
            trEPRgui_bugreportwindow(exception);
        catch exception3
            % If even displaying the bug report window fails...
            exception = addCause(exception3, exception);
            throw(exception);
        end
    end
end

function axesexport_pushbutton_Callback(~,~)
    try
        % Get appdata and handles of main window
        mainWindow = guiGetWindowHandle;
        ad = getappdata(mainWindow);
        gh = guihandles(mainWindow);

        % Open new figure window
        newFig = figure();
        
        % Make new figure window invisible
        set(newFig,'Visible','off');
        
        % Plot into new figure window
        update_mainAxis(newFig);

        % Get file type to save to
        fileTypes = cellstr(...
            get(gh.display_panel_axesexport_filetype_popupmenu,'String'));
        fileType = fileTypes{...
            get(gh.display_panel_axesexport_filetype_popupmenu,'Value')};
        
        % Generate default file name if possible, be very defensive
        if ad.control.spectra.visible
            [p,f,e] = ...
                fileparts(ad.data{ad.control.spectra.visible(1)}.filename);
            fileNameSuggested = f;
            clear p f e;
        else
            fileNameSuggested = '';
        end
        
        % Ask user for file name
        [fileName,pathName] = uiputfile(...
            sprintf('*.%s',fileType),...
            'Get filename to export figure to',...
            fileNameSuggested);
        % If user aborts process, return
        if fileName == 0
            return;
        end
        % Create filename with full path
        fileName = fullfile(pathName,fileName);
        
        % Save figure, depending on settings for file type and format
        status = fig2file(newFig,fileName,fileType);
        if status
            add2status(status);
        end
        
        % Close figure window
        close(newFig);
    catch exception
        try
            msgStr = ['An exception occurred. '...
                'The bug reporter should have been opened'];
            add2status(msgStr);
        catch exception2
            exception = addCause(exception2, exception);
            disp(msgStr);
        end
        try
            trEPRgui_bugreportwindow(exception);
        catch exception3
            % If even displaying the bug report window fails...
            exception = addCause(exception3, exception);
            throw(exception);
        end
    end
end

function dataexport_pushbutton_Callback(~,~)
    try
        % Get appdata and handles of main window
        mainWindow = guiGetWindowHandle;
        ad = getappdata(mainWindow);
        gh = guihandles(mainWindow);

        % Get file type to save to
        fileTypes = cellstr(...
            get(gh.display_panel_dataexport_filetype_popupmenu,'String'));
        fileType = fileTypes{...
            get(gh.display_panel_dataexport_filetype_popupmenu,'Value')};
        
        % Generate default file name if possible, be very defensive
        if ad.control.spectra.visible
            [p,f,e] = ...
                fileparts(ad.data{ad.control.spectra.visible(1)}.filename);
            fileNameSuggested = [f '-1Dcrosssection'];
            clear p f e;
        else
            fileNameSuggested = '';
        end
        
        switch fileType
            case 'ASCII'
                fileExtension = 'dat';
            otherwise
                fileExtension = '';
        end
        
        % Ask user for file name
        [fileName,pathName] = uiputfile(...
            sprintf('*.%s',fileExtension),...
            'Get filename to save 1D cross section of currently active dataset to',...
            fileNameSuggested);
        % If user aborts process, return
        if fileName == 0
            return;
        end
        % Create filename with full path
        fileName = fullfile(pathName,fileName);
        
        % Create parameters structure
        export1Dparameters = struct();
        switch ad.control.axis.displayType
            case '1D along x'
                export1Dparameters.crosssection.direction = 'x';
                export1Dparameters.crosssection.position = ...
                    ad.data{ad.control.spectra.active}.display.position.y;
            case '1D along y'
                export1Dparameters.crosssection.direction = 'y';
                export1Dparameters.crosssection.position = ...
                    ad.data{ad.control.spectra.active}.display.position.x;
            otherwise
                msg = 'Cannot determine cross section direction (2D mode)';
                add2status(msg);
        end
        export1Dparameters.header.character = ...
            get(gh.display_panel_dataexport_header_edit,'String');
        export1Dparameters.axis.include = ...
            get(gh.display_panel_dataexport_includeaxis_checkbox,'Value');
        export1Dparameters.file.type = fileType;
        export1Dparameters.file.overwrite = 1;
        
        % Save 1D cross section, depending on settings for file type and
        % additional parameters
        status = trEPRexport1D(...
            ad.data{ad.control.spectra.active},fileName,export1Dparameters);
        if status
            add2status(status);
        end
    catch exception
        try
            msgStr = ['An exception occurred. '...
                'The bug reporter should have been opened'];
            add2status(msgStr);
        catch exception2
            exception = addCause(exception2, exception);
            disp(msgStr);
        end
        try
            trEPRgui_bugreportwindow(exception);
        catch exception3
            % If even displaying the bug report window fails...
            exception = addCause(exception3, exception);
            throw(exception);
        end
    end
end

function show3d_edit_Callback(source,~,label)
    try
        % Get appdata and handles of main window
        mainWindow = guiGetWindowHandle;
        ad = getappdata(mainWindow);
        gh = guihandles(mainWindow);
        
        switch label
            case 'xfactor'
                if isnan(str2double(get(source,'String')))
                    set(source,'String','1');
                end
                if (round(str2double(get(source,'String'))) < 1)
                    set(source,'String','1');
                end
                set(gh.display_panel_3D_size_x_edit,'String',...
                    num2str(floor(str2double(...
                    get(gh.display_panel_3D_original_x_edit,'String'))/...
                    round(str2double(get(source,'String')))))...
                    );
                set(source,'String',...
                    round(str2double(get(source,'String'))));
            case 'yfactor'
                if isnan(str2double(get(source,'String')))
                    set(source,'String','1');
                end
                if (round(str2double(get(source,'String'))) < 1)
                    set(source,'String','1');
                end
                set(gh.display_panel_3D_size_y_edit,'String',...
                    num2str(floor(str2double(...
                    get(gh.display_panel_3D_original_y_edit,'String'))/...
                    round(str2double(get(source,'String')))))...
                    );
                set(source,'String',...
                    round(str2double(get(source,'String'))));
            case 'xoffset'
                [~,dimx] = size(ad.data{ad.control.spectra.active}.data);
                if isnan(str2double(get(source,'String')))
                    set(source,'String','0');
                end
                if (round(str2double(get(source,'String'))) < 0)
                    set(source,'String','0');
                end
                if (round(str2double(get(source,'String'))) > dimx-str2double(...
                        get(gh.display_panel_3D_size_x_edit,'String')))
                    set(source,'String',num2str(...
                        dimx-str2double(...
                        get(gh.display_panel_3D_size_x_edit,'String'))));
                end
                set(source,'String',...
                    round(str2double(get(source,'String'))));
            case 'yoffset'
                [dimy,~] = size(ad.data{ad.control.spectra.active}.data);
                if isnan(str2double(get(source,'String')))
                    set(source,'String','0');
                end
                if (round(str2double(get(source,'String'))) < 0)
                    set(source,'String','0');
                end
                if (round(str2double(get(source,'String'))) > dimy-str2double(...
                        get(gh.display_panel_3D_size_y_edit,'String')))
                    set(source,'String',num2str(...
                        dimy-str2double(...
                        get(gh.display_panel_3D_size_y_edit,'String'))));
                end
                set(source,'String',...
                    round(str2double(get(source,'String'))));
            otherwise
                msgstr = { 'Unknown label in callback function call.' ...
                    sprintf('Function "%s" in file "%s"',...
                    'threeDdisplay_edit_Callback',...
                    mfilename ...
                    )...
                    };
                status = add2status(msgstr);
                return;
        end
    catch exception
        try
            msgStr = ['An exception occurred. '...
                'The bug reporter should have been opened'];
            add2status(msgStr);
        catch exception2
            exception = addCause(exception2, exception);
            disp(msgStr);
        end
        try
            trEPRgui_bugreportwindow(exception);
        catch exception3
            % If even displaying the bug report window fails...
            exception = addCause(exception3, exception);
            throw(exception);
        end
    end
end

function show3d_pushbutton_Callback(~,~)
    try
        % Make 3D representation window effectively a singleton
        singleton = findobj('Tag','trepr_gui_3Drepresentation');
        if (singleton)
            figure(singleton);
            return;
        end

        % Get appdata and handles of main window
        mainWindow = guiGetWindowHandle;
        ad = getappdata(mainWindow);
        gh = guihandles(mainWindow);
        
        % Return if there is no currently active spectrum
        if isempty(ad.control.spectra.active) || ~ad.control.spectra.active 
            return;
        end
                
        % Get 3D representation type
        representationTypes = cellstr(...
            get(gh.display_panel_3D_display_type_popupmenu,'String'));
        representationType = representationTypes{...
            get(gh.display_panel_3D_display_type_popupmenu,'Value')};        
        
        % Create parameters struct for threeDrepresentation
        threeDrepresentationParameters = struct(...
            'type', representationType...
            );
        threeDrepresentationParameters.size.x = ...
            str2double(get(gh.display_panel_3D_size_x_edit,'String'));
        threeDrepresentationParameters.size.y = ...
            str2double(get(gh.display_panel_3D_size_y_edit,'String'));
        
        if get(gh.display_panel_offset_auto_checkbox,'Value')
            threeDrepresentationParameters.offset.type = 'automatic';
        else
            offsetTypes = cellstr(...
                get(gh.display_panel_3D_offset_type_popupmenu,'String'));
            offsetType = offsetTypes{...
                get(gh.display_panel_3D_offset_type_popupmenu,'Value')};
            threeDrepresentationParameters.offset.type = offsetType;
            threeDrepresentationParameters.offset.x = ...
                str2double(get(gh.display_panel_3D_offset_x_edit,'String'));
            threeDrepresentationParameters.offset.y = ...
                str2double(get(gh.display_panel_3D_offset_y_edit,'String'));
        end
        
        figHandle = threeDrepresentation(...
            ad.data{ad.control.spectra.active},...
            threeDrepresentationParameters);
        
        % Set tag for figure window containing 3D representation
        set(figHandle,'Tag','trepr_gui_3Drepresentation');

    catch exception
        try
            msgStr = ['An exception occurred. '...
                'The bug reporter should have been opened'];
            add2status(msgStr);
        catch exception2
            exception = addCause(exception2, exception);
            disp(msgStr);
        end
        try
            trEPRgui_bugreportwindow(exception);
        catch exception3
            % If even displaying the bug report window fails...
            exception = addCause(exception3, exception);
            throw(exception);
        end
    end
end

function export3d_pushbutton_Callback(~,~)
    try
        % Look for 3D representation window
        figHandle = findobj('Tag','trepr_gui_3Drepresentation');
        if isempty(figHandle)
            return;
        end
        
        % Get appdata and handles of main window
        mainWindow = guiGetWindowHandle;
        ad = getappdata(mainWindow);
        gh = guihandles(mainWindow);
        
        % Set focus on figure window with 3D representation
        figure(figHandle);

        % Get file type to save to
        fileTypes = cellstr(...
            get(gh.display_panel_3D_filetype_popupmenu,'String'));
        fileType = fileTypes{...
            get(gh.display_panel_3D_filetype_popupmenu,'Value')};
        
        % Generate default file name if possible, be very defensive
        if ad.control.spectra.visible
            [p,f,e] = ...
                fileparts(ad.data{ad.control.spectra.active}.filename);
            fileNameSuggested = [f '-3D'];
            clear p f e;
        else
            fileNameSuggested = '';
        end
        
        % Ask user for file name
        [fileName,pathName] = uiputfile(...
            sprintf('*.%s',fileType),...
            'Get filename to export 3D representation to',...
            fileNameSuggested);
        % If user aborts process, return
        if fileName == 0
            return;
        end
        % Create filename with full path
        fileName = fullfile(pathName,fileName);
        
        % Save figure, depending on settings for file type and format
        status = fig2file(figHandle,fileName,fileType);
        if status
            add2status(msg);
        end
        
    catch exception
        try
            msgStr = ['An exception occurred. '...
                'The bug reporter should have been opened'];
            add2status(msgStr);
        catch exception2
            exception = addCause(exception2, exception);
            disp(msgStr);
        end
        try
            trEPRgui_bugreportwindow(exception);
        catch exception3
            % If even displaying the bug report window fails...
            exception = addCause(exception3, exception);
            throw(exception);
        end
    end
end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%  Utility functions
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

function datasetChangeLabel(index)
    try
        % Get appdata of main window
        mainWindow = guiGetWindowHandle;
        ad = getappdata(mainWindow);
        
        ad.data{index}.label = trEPRgui_setLabelWindow(ad.data{index}.label);
        % Update appdata of main window
        setappdata(mainWindow,'data',ad.data);
        
        % Add status message (mainly for debug reasons)
        % IMPORTANT: Has to go AFTER setappdata
        msgStr = cell(0,1);
        msgStr{end+1} = sprintf(...
            'Changed label of dataset %i to "%s"',...
            ad.control.spectra.active,...
            ad.data{index}.label);
        invStr = sprintf('%i ',ad.control.spectra.invisible);
        visStr = sprintf('%i ',ad.control.spectra.visible);
        msgStr{end+1} = sprintf(...
            'Currently invisible: [ %s]; currently visible: [ %s]; total: %i',...
            invStr,visStr,length(ad.data));
        add2status(msgStr);
        clear msgStr;
    catch exception
        try
            msgStr = ['An exception occurred. '...
                'The bug reporter should have been opened'];
            add2status(msgStr);
        catch exception2
            exception = addCause(exception2, exception);
            disp(msgStr);
        end
        try
            trEPRgui_bugreportwindow(exception);
        catch exception3
            % If even displaying the bug report window fails...
            exception = addCause(exception3, exception);
            throw(exception);
        end
    end
end

end