function handle = guiProcessingPanel(parentHandle,position)
% GUIPROCESSINGPANEL Add a panel for general preprocessing to a gui
%       Should only be called from within a GUI defining function.
%
%       Arguments: parent Handle and position vector.
%
%       Returns the handle of the added panel.

% (c) 2011-13, Till Biskup
% 2013-02-17

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%  Construct the components
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

defaultBackground = get(parentHandle,'Color');

handle = uipanel('Tag','processing_panel',...
    'parent',parentHandle,...
    'Title','Data processing',...
    'FontUnit','Pixel','Fontsize',12,...
    'FontWeight','bold',...
    'BackgroundColor',defaultBackground,...
    'Visible','off',...
    'Units','pixels','Position',position);

% Create the "Processing" panel
handle_size = get(handle,'Position');
% uicontrol('Tag','panel_processing_description',...
%     'Style','text',...
%     'Parent',handle,...
%     'BackgroundColor',defaultBackground,...
%     'FontUnit','Pixel','Fontsize',12,...
%     'Units','Pixels',...
%     'HorizontalAlignment','Left',...
%     'FontUnit','Pixel','Fontsize',12,...
%     'FontAngle','oblique',...
%     'Position',[10 handle_size(4)-60 handle_size(3)-20 30],...
%     'String',{'Diverse data processing functions, such as filters, compensations, ...'}...
%     );

% Create buttongroup to switch between subpanels (pages)
hpbg = uibuttongroup('Tag','processing_panel_pages_buttongroup',...
    'Parent',handle,...
    'BackgroundColor',defaultBackground,...
    'BorderType','none',...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10 handle_size(4)-60 handle_size(3)-20 30],...
    'SelectionChangeFcn',{@pages_buttongroup_Callback}...
    );
uicontrol('Tag','processing_panel_page1_pushbutton',...
    'Style','Toggle',...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'String','1',...
    'TooltipString','Page 1: POC, BGC, BLC, ACC, Smoothing',...
    'pos',[0 0 (handle_size(3)-20)/3 30],...
    'parent',hpbg,...
    'HandleVisibility','off',...
    'Value',1);
uicontrol('Tag','processing_panel_page2_pushbutton',...
    'Style','Toggle',...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'String','2',...
    'TooltipString','Page 2: MFE related functions',...
    'pos',[(((handle_size(3)-20)/3)) 0 (handle_size(3)-20)/3 30],...
    'parent',hpbg,...
    'HandleVisibility','off',...
    'Value',0);
uicontrol('Tag','processing_panel_page3_pushbutton',...
    'Style','Toggle',...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'String','3',...
    'TooltipString','Page 3: Arithmetics',...
    'pos',[(((handle_size(3)-20)/3)*2) 0 (handle_size(3)-20)/3 30],...
    'parent',hpbg,...
    'HandleVisibility','off',...
    'Value',0);

% Create subpanels (pages)
handle_pp1 = uipanel('Tag','processing_panel_page1_panel',...
    'Parent',handle,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'BorderType','none',...
    'Units','Pixels',...
    'Position',[5 10 handle_size(3)-10 handle_size(4)-60]...
    );
handle_pp2 = uipanel('Tag','processing_panel_page2_panel',...
    'Parent',handle,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'BorderType','none',...
    'Units','Pixels',...
    'Position',[5 10 handle_size(3)-10 handle_size(4)-60],...
    'Visible','Off'...
    );
handle_pp3 = uipanel('Tag','processing_panel_page3_panel',...
    'Parent',handle,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'BorderType','none',...
    'Units','Pixels',...
    'Position',[5 10 handle_size(3)-10 handle_size(4)-60],...
    'Visible','Off'...
    );

handle_p11 = uipanel('Tag','processing_panel_datasets_panel',...
    'Parent',handle_pp1,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[5 handle_size(4)-180 handle_size(3)-20 100],...
    'Title','Select dataset'...
    );
uicontrol('Tag','processing_panel_datasets_listbox',...
    'Style','listbox',...
    'Parent',handle_p11,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10 10 handle_size(3)-40 70],...
    'String','',...
    'Enable','Off',...
    'Callback',{@listbox_Callback,'datasets'}...
    );

handle_p12 = uipanel('Tag','processing_panel_corrections_panel',...
    'Parent',handle_pp1,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[5 handle_size(4)-250 handle_size(3)-20 60],...
    'Title','Standard corrections'...
    );
uicontrol('Tag','processing_panel_corrections_pretrigger_pushbutton',...
    'Style','pushbutton',...
    'Parent',handle_p12,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10 10 floor((handle_size(3)-40)/2) 30],...
    'String','Offset',...
    'TooltipString','Perform pretrigger offset correction (POC)',...
    'Callback',{@corrections_pushbutton_Callback,'POC'}...
    );
uicontrol('Tag','processing_panel_corrections_background_pushbutton',...
    'Style','pushbutton',...
    'Parent',handle_p12,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[floor((handle_size(3)-40)/2)+10 10 floor((handle_size(3)-40)/2) 30],...
    'String','Background',...
    'TooltipString','Perform basic background correction (BGC)',...
    'Callback',{@corrections_pushbutton_Callback,'BGC'}...
    );

handle_p13 = uipanel('Tag','processing_panel_processing_panel',...
    'Parent',handle_pp1,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[5 handle_size(4)-320 handle_size(3)-20 60],...
    'Title','Advanced corrections (dialogues)'...
    );
uicontrol('Tag','processing_panel_corrections_baseline_pushbutton',...
    'Style','pushbutton',...
    'Parent',handle_p13,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10 10 floor((handle_size(3)-40)/2) 30],...
    'String','Baseline...',...
    'TooltipString','Open baseline correction (BLC) GUI',...
    'Callback',{@corrections_pushbutton_Callback,'BLC'}...
    );
uicontrol('Tag','processing_panel_corrections_accumulate_pushbutton',...
    'Style','pushbutton',...
    'Parent',handle_p13,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[floor((handle_size(3)-40)/2)+10 10 floor((handle_size(3)-40)/2) 30],...
    'String','Accumulate...',...
    'TooltipString','Open accumulation (ACC) GUI',...
    'Callback',{@corrections_pushbutton_Callback,'ACC'}...
    );

handle_p14 = uipanel('Tag','processing_panel_average_panel',...
    'Parent',handle_pp1,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[5 handle_size(4)-470 handle_size(3)-20 140],...
    'Title','Smoothing (running average filter)'...
    );
uicontrol('Tag','processing_panel_average_type_text',...
    'Style','text',...
    'Parent',handle_p14,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10 90 35 20],...
    'String','type'...
    );
uicontrol('Tag','processing_panel_average_type_popupmenu',...
    'Style','popupmenu',...
    'Parent',handle_p14,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[55 95 handle_size(3)-80 20],...
    'String','boxcar',...
    'TooltipString','Choose filter type for smoothing'...
    );
uicontrol('Tag','processing_panel_average_points_text',...
    'Style','text',...
    'Parent',handle_p14,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[60 60 (handle_size(3)-90)/2 25],...
    'String','points'...
    );
uicontrol('Tag','processing_panel_average_unit_text',...
    'Style','text',...
    'Parent',handle_p14,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[60+(handle_size(3)-90)/2 60 (handle_size(3)-90)/2 25],...
    'String','unit'...
    );
uicontrol('Tag','processing_panel_average_x_text',...
    'Style','text',...
    'Parent',handle_p14,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10 40 35 20],...
    'String','x'...
    );
uicontrol('Tag','processing_panel_average_x_points_edit',...
    'Style','edit',...
    'Parent',handle_p14,...
    'BackgroundColor',[1 1 1],...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[60 40 (handle_size(3)-90)/2 25],...
    'String','1',...
    'Callback',{@edit_Callback,'xindex'}...
    );
uicontrol('Tag','processing_panel_average_x_unit_edit',...
    'Style','edit',...
    'Parent',handle_p14,...
    'BackgroundColor',[1 1 1],...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[60+(handle_size(3)-90)/2 40 (handle_size(3)-90)/2 25],...
    'String','0',...
    'Callback',{@edit_Callback,'xunit'}...
    );
uicontrol('Tag','processing_panel_average_y_text',...
    'Style','text',...
    'Parent',handle_p14,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10 10 35 20],...
    'String','y'...
    );
uicontrol('Tag','processing_panel_average_y_points_edit',...
    'Style','edit',...
    'Parent',handle_p14,...
    'BackgroundColor',[1 1 1],...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[60 10 (handle_size(3)-90)/2 25],...
    'String','1',...
    'Callback',{@edit_Callback,'yindex'}...
    );
uicontrol('Tag','processing_panel_average_y_unit_edit',...
    'Style','edit',...
    'Parent',handle_p14,...
    'BackgroundColor',[1 1 1],...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[60+(handle_size(3)-90)/2 10 (handle_size(3)-90)/2 25],...
    'String','0',...
    'Callback',{@edit_Callback,'yunit'}...
    );


handle_p21 = uipanel('Tag','processing_panel_datasets2_panel',...
    'Parent',handle_pp2,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[5 handle_size(4)-180 handle_size(3)-20 100],...
    'Title','Select dataset'...
    );
uicontrol('Tag','processing_panel_datasets2_listbox',...
    'Style','listbox',...
    'Parent',handle_p21,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10 10 handle_size(3)-40 70],...
    'String','',...
    'Enable','Off',...
    'Callback',{@listbox_Callback,'datasets2'}...
    );

handle_p22 = uipanel('Tag','processing_panel_scaling_panel',...
    'Parent',handle_pp2,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[5 handle_size(4)-250 handle_size(3)-20 60],...
    'Title','Scaling (intensity)'...
    );
uicontrol('Tag','processing_panel_scaling_text',...
    'Style','text',...
    'Parent',handle_p22,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10 12 50 20],...
    'String','Factor'...
    );
uicontrol('Tag','processing_panel_scaling_edit',...
    'Style','edit',...
    'Parent',handle_p22,...
    'BackgroundColor',[1 1 1],...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[70 12 (handle_size(3)-170) 25],...
    'String','1',...
    'Callback',{@edit_Callback,'scale'}...
    );
uicontrol('Tag','processing_panel_scaling_pushbutton',...
    'Style','pushbutton',...
    'Parent',handle_p22,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[handle_size(3)-90 10 60 30],...
    'String','Scale',...
    'TooltipString','<html>Scale dataset in z direction (intensity)<br />by given factor</html>',...
    'Callback',{@pushbutton_Callback,'scale'}...
    );


handle_p31 = uipanel('Tag','processing_panel_primary_panel',...
    'Parent',handle_pp3,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[5 handle_size(4)-160 handle_size(3)-20 80],...
    'Title','Primary dataset'...
    );
uicontrol('Tag','processing_panel_primary_listbox',...
    'Style','listbox',...
    'Parent',handle_p31,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10 10 handle_size(3)-40 50],...
    'String','',...
    'Enable','Off',...
    'Callback',{@listbox_Callback,'primary'}...
    );

uicontrol('Tag','processing_panel_function_popupmenu',...
    'Style','popupmenu',...
    'Parent',handle_pp3,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[5 handle_size(4)-190 handle_size(3)-20 20],...
    'String','addition|subtraction',...
    'Value',2,...
    'TooltipString','Choose function'...
    );

handle_p32 = uipanel('Tag','processing_panel_secondary_panel',...
    'Parent',handle_pp3,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[5 handle_size(4)-280 handle_size(3)-20 80],...
    'Title','Secondary dataset'...
    );
uicontrol('Tag','processing_panel_secondary_listbox',...
    'Style','listbox',...
    'Parent',handle_p32,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10 10 handle_size(3)-40 50],...
    'String','',...
    'Enable','Off',...
    'Callback',{@listbox_Callback,'secondary'}...
    );

uicontrol('Tag','processing_panel_corrections_baseline_pushbutton',...
    'Style','pushbutton',...
    'Parent',handle_pp3,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[5 handle_size(4)-320 floor((handle_size(3)-20)/3) 30],...
    'String','Show',...
    'TooltipString','Open baseline correction (BLC) GUI',...
    'Callback',{@pushbutton_Callback,'Show'}...
    );
uicontrol('Tag','processing_panel_corrections_accumulate_pushbutton',...
    'Style','pushbutton',...
    'Parent',handle_pp3,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[5+floor((handle_size(3)-20)/3) handle_size(4)-320 ...
    floor((handle_size(3)-20)/3) 30],...
    'String','Discard',...
    'TooltipString','Open accumulation (ACC) GUI',...
    'Callback',{@pushbutton_Callback,'Discard'}...
    );
uicontrol('Tag','processing_panel_corrections_accumulate_pushbutton',...
    'Style','pushbutton',...
    'Parent',handle_pp3,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[5+floor((handle_size(3)-20)/3*2) handle_size(4)-320 ...
    floor((handle_size(3)-20)/3) 30],...
    'String','Apply',...
    'TooltipString','Open accumulation (ACC) GUI',...
    'Callback',{@pushbutton_Callback,'Apply'}...
    );

% handle_p33 = uipanel('Tag','processing_panel_displaysettings_panel',...
%     'Parent',handle_pp3,...
%     'BackgroundColor',defaultBackground,...
%     'FontUnit','Pixel','Fontsize',12,...
%     'Units','Pixels',...
%     'Position',[5 handle_size(4)-420 handle_size(3)-20 90],...
%     'Title','Display settings'...
%     );

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%  Initialization tasks
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%  Callbacks
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

function pages_buttongroup_Callback(source,~)
    try
        page_panels = [handle_pp1 handle_pp2 handle_pp3];
        switch get(get(source,'SelectedObject'),'String')
            case '1'
                set(page_panels,'Visible','off');
                set(handle_pp1,'Visible','on');
            case '2'
                set(page_panels,'Visible','off');
                set(handle_pp2,'Visible','on');
            case '3'
                set(page_panels,'Visible','off');
                set(handle_pp3,'Visible','on');
        end
        update_processingPanel();
        update_visibleSpectra();
    catch exception
        try
            msgStr = ['An exception occurred in ' ...
                exception.stack(1).name  '.'];
            trEPRmsg(msgStr,'error');
        catch exception2
            exception = addCause(exception2, exception);
            disp(msgStr);
        end
        try
            trEPRgui_bugreportwindow(exception);
        catch exception3
            % If even displaying the bug report window fails...
            exception = addCause(exception3, exception);
            throw(exception);
        end
    end
end

function pushbutton_Callback(~,~,action)
    try
        % Get appdata of main window
        mainWindow = trEPRguiGetWindowHandle;
        ad = getappdata(mainWindow);
        
        % Get handles of main window
        gh = guihandles(mainWindow);
        
        % If no dataset is selected
        if isempty(ad.control.spectra.active) || (ad.control.spectra.active == 0)
            return;
        end
        
        active = ad.control.spectra.active;
        
        if isempty(active) || ~active
            return;
        end
        
        switch action
            case 'Apply'
                % Get primary and secondary dataset
                primary = ad.control.spectra.visible(...
                    get(gh.processing_panel_primary_listbox,'Value'));
                secondary = ad.control.spectra.visible(...
                    get(gh.processing_panel_secondary_listbox,'Value'));
                % Get operation
                operations = cellstr(...
                    get(gh.processing_panel_function_popupmenu,'String'));
                operation = operations{...
                    get(gh.processing_panel_function_popupmenu,'Value')};
                
                [resdata,warnings] = trEPRalgebra(...
                    ad.data([primary,secondary]),operation);
                if ~isempty(warnings)
                    trEPRmsg(warnings,'warning');
                end
                % If result is not empty, assign
                if ~isempty(resdata)
                    ad.data{primary} = resdata;
                    if ~any(ad.control.spectra.modified==primary)
                        ad.control.spectra.modified(end+1) = primary;
                    end
                    setappdata(mainWindow,'data',ad.data);
                    setappdata(mainWindow,'control',ad.control);
                    update_visibleSpectra();
                    update_processingPanel();
                    update_mainAxis();
                end
            case 'scale'
                scalingFactor = str2double(get(...
                    gh.processing_panel_scaling_edit,'String'));
                if scalingFactor == 1
                    return;
                end
                [resdata,warnings] = trEPRalgebra(...
                    ad.data(active),'scaling',scalingFactor);
                % If result is not empty, assign
                if ~isempty(resdata)
                    ad.data{active} = resdata;
                    if ~any(ad.control.spectra.modified==active)
                        ad.control.spectra.modified(end+1) = active;
                    end
                    setappdata(mainWindow,'data',ad.data);
                    setappdata(mainWindow,'control',ad.control);
                    update_visibleSpectra();
                    update_processingPanel();
                    update_mainAxis();
                else
                    trEPRmsg(warnings,'warning');
                end
            otherwise
                disp([mfilename '() : pushbutton_Callback() : '...
                    'Unknown action "' action '"']);
                return;
        end
        
        % Update visible spectra listbox
        update_visibleSpectra();
    catch exception
        try
            msgStr = ['An exception occurred in ' ...
                exception.stack(1).name  '.'];
            trEPRmsg(msgStr,'error');
        catch exception2
            exception = addCause(exception2, exception);
            disp(msgStr);
        end
        try
            trEPRgui_bugreportwindow(exception);
        catch exception3
            % If even displaying the bug report window fails...
            exception = addCause(exception3, exception);
            throw(exception);
        end
    end
end

function corrections_pushbutton_Callback(~,~,correction)
    try
        % Get appdata of main window
        mainWindow = trEPRguiGetWindowHandle;
        ad = getappdata(mainWindow);
        
        % If no dataset is selected
        if isempty(ad.control.spectra.active) || (ad.control.spectra.active == 0)
            return;
        end
        
        switch correction
            case 'POC'
                guiProcessingPOC(ad.control.spectra.active);
            case 'BGC'
                guiProcessingBGC(ad.control.spectra.active);
            case 'ACC'
                trEPRgui_ACCwindow();
            case 'BLC'
                trEPRgui_BLCwindow();
            otherwise
                msg = cell(1,2);
                msg{1} = sprintf(...
                    'Correction method %s unknown or not (yet) supported.',...
                    correction);
                msg{2} = 'If you think that this is a bug, please file a bug report.';
                trEPRmsg(msg,'warning');
                clear msg;
        end
        
        % Update visible spectra listbox
        update_visibleSpectra();
    catch exception
        try
            msgStr = ['An exception occurred in ' ...
                exception.stack(1).name  '.'];
            trEPRmsg(msgStr,'error');
        catch exception2
            exception = addCause(exception2, exception);
            disp(msgStr);
        end
        try
            trEPRgui_bugreportwindow(exception);
        catch exception3
            % If even displaying the bug report window fails...
            exception = addCause(exception3, exception);
            throw(exception);
        end
    end
end

function listbox_Callback(~,~,action)
    try
        % Get appdata of main window
        mainWindow = trEPRguiGetWindowHandle;
        ad = getappdata(mainWindow);
        
        % Get handles of main window
        gh = guihandles(mainWindow);
        
        switch action
            case 'datasets'
                ad.control.spectra.active = ad.control.spectra.visible(...
                    get(gh.processing_panel_datasets_listbox,'Value')...
                    );
            case 'datasets2'
                ad.control.spectra.active = ad.control.spectra.visible(...
                    get(gh.processing_panel_datasets2_listbox,'Value')...
                    );
        end
        
        % Update appdata of main window
        setappdata(mainWindow,'control',ad.control);
        
        % If user double clicked on list entry
        if strcmp(get(gcf,'SelectionType'),'open')
            datasetChangeLabel(ad.control.spectra.active);
        end
        
        % Update processing panel
        update_processingPanel();
        
        % Update slider panel
        update_sliderPanel();
        
        % Update visible spectra listboxes (in diverse panels!)
        update_visibleSpectra();
        
        %Update main axis
        update_mainAxis();
    catch exception
        try
            msgStr = ['An exception occurred in ' ...
                exception.stack(1).name  '.'];
            trEPRmsg(msgStr,'error');
        catch exception2
            exception = addCause(exception2, exception);
            disp(msgStr);
        end
        try
            trEPRgui_bugreportwindow(exception);
        catch exception3
            % If even displaying the bug report window fails...
            exception = addCause(exception3, exception);
            throw(exception);
        end
    end
end

function edit_Callback(source,~,value)
    try
        % Get appdata of main window
        mainWindow = trEPRguiGetWindowHandle;
        ad = getappdata(mainWindow);
        
        % Get handles of main window
        gh = guihandles(mainWindow);
        
        active = ad.control.spectra.active;
        if isempty(active) || ~active
            return;
        end
        
        [y,x] = size(ad.data{active}.data);
        
        filterTypes = cellstr(...
            get(gh.processing_panel_average_type_popupmenu,'String'));
        filterType = filterTypes{...
            get(gh.processing_panel_average_type_popupmenu,'Value')};

        switch value
            case 'avg_xindex'
                % Fix values: only integers >= 1
                if (str2double(get(source,'String')) < 1) || ...
                        isnan(str2double(get(source,'String')))
                    set(source,'String','1');
                elseif (str2double(get(source,'String')) > x)
                    set(source,'String',num2str(x));
                else
                    set(source,...
                        'String',...
                        num2str(round(str2double(get(source,'String')))));
                end
                
                ad.data{active}.display.smoothing.x.value = ...
                    str2double(get(source,'String'));
                ad.data{active}.display.smoothing.x.filterfun = ...
                    sprintf('trEPRfilter_%s',filterType);
            case 'avg_xunit'
                x = linspace(1,x,x);
                y = linspace(1,y,y);
                if (isfield(ad.data{active},'axes') ...
                        && isfield(ad.data{active}.axes,'x') ...
                        && isfield(ad.data{active}.axes.x,'values') ...
                        && not (isempty(ad.data{active}.axes.x.values)))
                    x = ad.data{active}.axes.x.values;
                end
                
                % Get "atomic" value
                atomic = x(2)-x(1);
                
                % Fix values: only those in range of the axis are allowed
                if (str2double(get(source,'String')) < atomic) || ...
                        isnan(str2double(get(source,'String')))
                    set(source,'String',num2str(atomic));
                elseif (str2double(get(source,'String')) > (atomic*length(x)))
                    set(source,'String',num2str(atomic*length(x)));
                else
                    set(source,...
                        'String',...
                        num2str(round(str2double(get(source,'String'))/atomic)*atomic)...
                        );
                end
                
                set(gh.processing_panel_average_x_points_edit,...
                    'String',...
                    num2str(round(str2double(get(source,'String'))/atomic))...
                    );
                
                ad.data{active}.display.smoothing.x.value = ...
                    round(str2double(get(source,'String'))/atomic);
                ad.data{active}.display.smoothing.x.filterfun = ...
                    sprintf('trEPRfilter_%s',filterType);
            case 'avg_yindex'
                if (str2double(get(source,'String')) < 1) || ...
                        isnan(str2double(get(source,'String')))
                    set(source,'String','1');
                elseif (str2double(get(source,'String')) > y)
                    set(source,'String',num2str(x));
                else
                    set(source,...
                        'String',...
                        num2str(round(str2double(get(source,'String')))));
                end
                
                ad.data{active}.display.smoothing.y.value = ...
                    str2double(get(source,'String'));
                ad.data{active}.display.smoothing.y.filterfun = ...
                    sprintf('trEPRfilter_%s',filterType);
            case 'avg_yunit'
                x = linspace(1,x,x);
                y = linspace(1,y,y);
                if (isfield(ad.data{active},'axes') ...
                        && isfield(ad.data{active}.axes,'y') ...
                        && isfield(ad.data{active}.axes.y,'values') ...
                        && not (isempty(ad.data{active}.axes.y.values)))
                    y = ad.data{active}.axes.y.values;
                end
                
                % Get "atomic" value
                atomic = y(2)-y(1);
                
                % Fix values: only those in range of the axis are allowed
                if (str2double(get(source,'String')) < atomic) || ...
                        isnan(str2double(get(source,'String')))
                    set(source,'String',num2str(atomic));
                elseif (str2double(get(source,'String')) > (atomic*length(y)))
                    set(source,'String',num2str(atomic*length(y)));
                else
                    set(source,...
                        'String',...
                        num2str(round(str2double(get(source,'String'))/atomic)*atomic)...
                        );
                end
                
                set(gh.processing_panel_average_y_points_edit,...
                    'String',...
                    num2str(round(str2double(get(source,'String'))/atomic))...
                    );
                
                ad.data{active}.display.smoothing.y.value = ...
                    round(str2double(get(source,'String'))/atomic);
                ad.data{active}.display.smoothing.y.filterfun = ...
                    sprintf('trEPRfilter_%s',filterType);
            otherwise
                st = dbstack;
                trEPRmsg(...
                    [st.name ' : unknown value "' value '"'],...
                    'warning');
                return;
        end
        
        % Update appdata of main window
        setappdata(mainWindow,'data',ad.data);
        
        % Update processing panel
        update_processingPanel();
        
        % Update slider panel
        update_sliderPanel();
        
        % Update visible spectra listboxes (in diverse panels!)
        update_visibleSpectra();
        
        %Update main axis
        update_mainAxis();
    catch exception
        try
            msgStr = ['An exception occurred in ' ...
                exception.stack(1).name  '.'];
            trEPRmsg(msgStr,'error');
        catch exception2
            exception = addCause(exception2, exception);
            disp(msgStr);
        end
        try
            trEPRgui_bugreportwindow(exception);
        catch exception3
            % If even displaying the bug report window fails...
            exception = addCause(exception3, exception);
            throw(exception);
        end
    end
end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%  Utility functions
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

function datasetChangeLabel(index)
    try
        % Get appdata of main window
        mainWindow = trEPRguiGetWindowHandle;
        ad = getappdata(mainWindow);
        
        ad.data{index}.label = trEPRgui_setLabelWindow(ad.data{index}.label);
        % Update appdata of main window
        setappdata(mainWindow,'data',ad.data);
    catch exception
        try
            msgStr = ['An exception occurred in ' ...
                exception.stack(1).name  '.'];
            trEPRmsg(msgStr,'error');
        catch exception2
            exception = addCause(exception2, exception);
            disp(msgStr);
        end
        try
            trEPRgui_bugreportwindow(exception);
        catch exception3
            % If even displaying the bug report window fails...
            exception = addCause(exception3, exception);
            throw(exception);
        end
    end
end

end