function handle = guiProcessingPanel(parentHandle,position)
% GUIWELCOMEPANEL Add a panel for <function> to a gui
%       Should only be called from within a GUI defining function.
%
%       Arguments: parent Handle and position vector.
%       TODO: Add guidata and appdata to list of arguments
%
%       Returns the handle of the added panel.

% (Leave a blank line following the help.)

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%  Construct the components
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

defaultBackground = get(parentHandle,'Color');

handle = uipanel('Tag','processing_panel',...
    'parent',parentHandle,...
    'Title','Data processing',...
    'FontUnit','Pixel','Fontsize',12,...
    'FontWeight','bold',...
    'BackgroundColor',defaultBackground,...
    'Visible','off',...
    'Units','pixels','Position',position);

% Create the "Processing" panel
handle_size = get(handle,'Position');
uicontrol('Tag','panel_processing_description',...
    'Style','text',...
    'Parent',handle,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'HorizontalAlignment','Left',...
    'FontUnit','Pixel','Fontsize',12,...
    'FontAngle','oblique',...
    'Position',[10 handle_size(4)-60 handle_size(3)-20 30],...
    'String',{'Diverse data processing functions, such as filters, compensations, ...'}...
    );

handle_p1 = uipanel('Tag','processing_panel_datasets_panel',...
    'Parent',handle,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10 handle_size(4)-170 handle_size(3)-20 100],...
    'Title','Select dataset'...
    );
uicontrol('Tag','processing_panel_datasets_listbox',...
    'Style','listbox',...
    'Parent',handle_p1,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10 10 handle_size(3)-40 70],...
    'String','',...
    'Enable','Off',...
    'Callback',{@datasets_listbox_Callback}...
    );

handle_p2 = uipanel('Tag','processing_panel_corrections_panel',...
    'Parent',handle,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10 handle_size(4)-240 handle_size(3)-20 60],...
    'Title','Standard corrections'...
    );
uicontrol('Tag','processing_panel_corrections_pretrigger_pushbutton',...
    'Style','pushbutton',...
    'Parent',handle_p2,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10 10 floor((handle_size(3)-40)/2) 30],...
    'String','Offset',...
    'Callback',{@corrections_pushbutton_Callback,'POC'}...
    );
uicontrol('Tag','processing_panel_corrections_background_pushbutton',...
    'Style','pushbutton',...
    'Parent',handle_p2,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[floor((handle_size(3)-40)/2)+10 10 floor((handle_size(3)-40)/2) 30],...
    'String','Background',...
    'Callback',{@corrections_pushbutton_Callback,'BGC'}...
    );

handle_p3 = uipanel('Tag','processing_panel_processing_panel',...
    'Parent',handle,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10 handle_size(4)-310 handle_size(3)-20 60],...
    'Title','Advanced corrections (dialogues)'...
    );
uicontrol('Tag','processing_panel_corrections_baseline_pushbutton',...
    'Style','pushbutton',...
    'Parent',handle_p3,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10 10 floor((handle_size(3)-40)/2) 30],...
    'String','Baseline...',...
    'Callback',{@corrections_pushbutton_Callback,'BLC'}...
    );
uicontrol('Tag','processing_panel_corrections_accumulate_pushbutton',...
    'Style','pushbutton',...
    'Parent',handle_p3,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[floor((handle_size(3)-40)/2)+10 10 floor((handle_size(3)-40)/2) 30],...
    'String','Accumulate...',...
    'Callback',{@corrections_pushbutton_Callback,'ACC'}...
    );

handle_p4 = uipanel('Tag','processing_panel_average_panel',...
    'Parent',handle,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10 handle_size(4)-460 handle_size(3)-20 140],...
    'Title','Smoothing (running average filter)'...
    );
uicontrol('Tag','processing_panel_average_type_text',...
    'Style','text',...
    'Parent',handle_p4,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10 90 35 20],...
    'String','type'...
    );
uicontrol('Tag','processing_panel_average_type_popupmenu',...
    'Style','popupmenu',...
    'Parent',handle_p4,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[55 95 handle_size(3)-80 20],...
    'String','simple_filter'...
    );
uicontrol('Tag','processing_panel_average_points_text',...
    'Style','text',...
    'Parent',handle_p4,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[60 60 (handle_size(3)-90)/2 25],...
    'String','points'...
    );
uicontrol('Tag','processing_panel_average_unit_text',...
    'Style','text',...
    'Parent',handle_p4,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[60+(handle_size(3)-90)/2 60 (handle_size(3)-90)/2 25],...
    'String','unit'...
    );
uicontrol('Tag','processing_panel_average_x_text',...
    'Style','text',...
    'Parent',handle_p4,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10 40 35 20],...
    'String','x'...
    );
uicontrol('Tag','processing_panel_average_x_points_edit',...
    'Style','edit',...
    'Parent',handle_p4,...
    'BackgroundColor',[1 1 1],...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[60 40 (handle_size(3)-90)/2 25],...
    'String','1',...
    'Callback',{@average_x_points_Callback}...
    );
uicontrol('Tag','processing_panel_average_x_unit_edit',...
    'Style','edit',...
    'Parent',handle_p4,...
    'BackgroundColor',[1 1 1],...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[60+(handle_size(3)-90)/2 40 (handle_size(3)-90)/2 25],...
    'String','0',...
    'Callback',{@average_x_unit_Callback}...
    );
uicontrol('Tag','processing_panel_average_y_text',...
    'Style','text',...
    'Parent',handle_p4,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10 10 35 20],...
    'String','y'...
    );
uicontrol('Tag','processing_panel_average_y_points_edit',...
    'Style','edit',...
    'Parent',handle_p4,...
    'BackgroundColor',[1 1 1],...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[60 10 (handle_size(3)-90)/2 25],...
    'String','1',...
    'Callback',{@average_y_points_Callback}...
    );
uicontrol('Tag','processing_panel_average_y_unit_edit',...
    'Style','edit',...
    'Parent',handle_p4,...
    'BackgroundColor',[1 1 1],...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[60+(handle_size(3)-90)/2 10 (handle_size(3)-90)/2 25],...
    'String','0',...
    'Callback',{@average_y_unit_Callback}...
    );

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%  Initialization tasks
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%  Callbacks
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

function corrections_pushbutton_Callback(~,~,correction)
    try
        % Get appdata of main window
        mainWindow = guiGetWindowHandle;
        ad = getappdata(mainWindow);
        
        % If no dataset is selected
        if isempty(ad.control.spectra.active) || (ad.control.spectra.active == 0)
            return;
        end
        
        switch correction
            case 'POC'
                guiProcessingPOC(ad.control.spectra.active);
            case 'BGC'
                guiProcessingBGC(ad.control.spectra.active);
            case 'ACC'
                trEPRgui_ACCwindow();
            otherwise
                msg = cell(1,2);
                msg{1} = sprintf(...
                    'Correction method %s unknown or not (yet) supported.',...
                    correction);
                msg{2} = 'If you think that this is a bug, please file a bug report.';
                status = add2status(msg);
                % If for whatever weird reason the trEPR GUI contained no
                % status field, print it to the commmand line
                if (status == -2)
                    fprintf('%s\n%s\n',msg{1},msg{2});
                end
                clear msg;
        end
        
        % Update visible spectra listbox
        update_visibleSpectra();
    catch exception
        try
            msgStr = ['An exception occurred. '...
                'The bug reporter should have been opened'];
            add2status(msgStr);
        catch exception2
            exception = addCause(exception2, exception);
            disp(msgStr);
        end
        try
            trEPRgui_bugreportwindow(exception);
        catch exception3
            % If even displaying the bug report window fails...
            exception = addCause(exception3, exception);
            throw(exception);
        end
    end
end

function datasets_listbox_Callback(~,~)
    try
        % Get appdata of main window
        mainWindow = guiGetWindowHandle;
        ad = getappdata(mainWindow);
        
        % Get handles of main window
        gh = guihandles(mainWindow);
        
        ad.control.spectra.active = ad.control.spectra.visible(...
            get(gh.processing_panel_datasets_listbox,'Value')...
            );
        
        % Update appdata of main window
        setappdata(mainWindow,'control',ad.control);
        
        % If user double clicked on list entry
        if strcmp(get(gcf,'SelectionType'),'open')
            datasetChangeLabel(ad.control.spectra.active);
        end
        
        % Update processing panel
        update_processingPanel();
        
        % Update slider panel
        update_sliderPanel();
        
        % Update visible spectra listboxes (in diverse panels!)
        update_visibleSpectra();
        
        %Update main axis
        update_mainAxis();
    catch exception
        try
            msgStr = ['An exception occurred. '...
                'The bug reporter should have been opened'];
            add2status(msgStr);
        catch exception2
            exception = addCause(exception2, exception);
            disp(msgStr);
        end
        try
            trEPRgui_bugreportwindow(exception);
        catch exception3
            % If even displaying the bug report window fails...
            exception = addCause(exception3, exception);
            throw(exception);
        end
    end
end

function average_x_points_Callback(source,~)
    try
        % Get appdata of main window
        mainWindow = guiGetWindowHandle;
        ad = getappdata(mainWindow);
        
        % Get handles of main window
        gh = guihandles(mainWindow);
        
        if not (ad.control.spectra.active)
            return;
        end
        
        % Fix values: only integers >= 1
        [~,x] = size(ad.data{ad.control.spectra.active}.data);
        if (str2num(get(source,'String')) < 1)
            set(source,'String','1');
        elseif (str2num(get(source,'String')) > x)
            set(source,'String',num2str(x));
        else
            set(source,...
                'String',...
                num2str(round(str2num(get(source,'String')))));
        end
        
        ad.data{ad.control.spectra.active}.display.smoothing.x.value = ...
            str2num(get(source,'String'));
        filterTypes = cellstr(get(gh.processing_panel_average_type_popupmenu,'String'));
        filterType = filterTypes{get(gh.processing_panel_average_type_popupmenu,'Value')};
        ad.data{ad.control.spectra.active}.display.smoothing.x.filterfun = ...
            filterType;
        
        % Update appdata of main window
        setappdata(mainWindow,'data',ad.data);
        
        % Update processing panel
        update_processingPanel();
        
        % Update slider panel
        update_sliderPanel();
        
        % Update visible spectra listboxes (in diverse panels!)
        update_visibleSpectra();
        
        %Update main axis
        update_mainAxis();
    catch exception
        try
            msgStr = ['An exception occurred. '...
                'The bug reporter should have been opened'];
            add2status(msgStr);
        catch exception2
            exception = addCause(exception2, exception);
            disp(msgStr);
        end
        try
            trEPRgui_bugreportwindow(exception);
        catch exception3
            % If even displaying the bug report window fails...
            exception = addCause(exception3, exception);
            throw(exception);
        end
    end
end

function average_x_unit_Callback(source,~)
    try
        % Get appdata of main window
        mainWindow = guiGetWindowHandle;
        ad = getappdata(mainWindow);
        
        % Get handles of main window
        gh = guihandles(mainWindow);
        
        if not (ad.control.spectra.active)
            return;
        end
        
        [y,x] = size(ad.data{ad.control.spectra.active}.data);
        x = linspace(1,x,x);
        y = linspace(1,y,y);
        if (isfield(ad.data{ad.control.spectra.active},'axes') ...
                && isfield(ad.data{ad.control.spectra.active}.axes,'x') ...
                && isfield(ad.data{ad.control.spectra.active}.axes.x,'values') ...
                && not (isempty(ad.data{ad.control.spectra.active}.axes.x.values)))
            x = ad.data{ad.control.spectra.active}.axes.x.values;
        end
        
        % Get "atomic" value
        atomic = x(2)-x(1);
        
        % Fix values: only those in range of the axis are allowed
        if (str2num(get(source,'String')) < atomic)
            set(source,'String',num2str(atomic));
        elseif (str2num(get(source,'String')) > (atomic*length(x)))
            set(source,'String',num2str(atomic*length(x)));
        else
            set(source,...
                'String',...
                num2str(round(str2num(get(source,'String'))/atomic)*atomic)...
                );
        end
        
        set(gh.processing_panel_average_x_points_edit,...
            'String',...
            num2str(round(str2num(get(source,'String'))/atomic))...
            );
        
        ad.data{ad.control.spectra.active}.display.smoothing.x.value = ...
            round(str2num(get(source,'String'))/atomic);
        filterTypes = cellstr(get(gh.processing_panel_average_type_popupmenu,'String'));
        filterType = filterTypes{get(gh.processing_panel_average_type_popupmenu,'Value')};
        ad.data{ad.control.spectra.active}.display.smoothing.x.filterfun = ...
            filterType;
        
        % Update appdata of main window
        setappdata(mainWindow,'data',ad.data);
        
        % Update processing panel
        update_processingPanel();
        
        % Update slider panel
        update_sliderPanel();
        
        % Update visible spectra listboxes (in diverse panels!)
        update_visibleSpectra();
        
        %Update main axis
        update_mainAxis();
    catch exception
        try
            msgStr = ['An exception occurred. '...
                'The bug reporter should have been opened'];
            add2status(msgStr);
        catch exception2
            exception = addCause(exception2, exception);
            disp(msgStr);
        end
        try
            trEPRgui_bugreportwindow(exception);
        catch exception3
            % If even displaying the bug report window fails...
            exception = addCause(exception3, exception);
            throw(exception);
        end
    end
end

function average_y_points_Callback(source,~)
    try
        % Get appdata of main window
        mainWindow = guiGetWindowHandle;
        ad = getappdata(mainWindow);
        
        % Get handles of main window
        gh = guihandles(mainWindow);
        
        if not (ad.control.spectra.active)
            return;
        end
        
        % Fix values: only integers >= 1
        [y,x] = size(ad.data{ad.control.spectra.active}.data);
        if (str2num(get(source,'String')) < 1)
            set(source,'String','1');
        elseif (str2num(get(source,'String')) > y)
            set(source,'String',num2str(x));
        else
            set(source,...
                'String',...
                num2str(round(str2num(get(source,'String')))));
        end
        
        ad.data{ad.control.spectra.active}.display.smoothing.y.value = ...
            str2num(get(source,'String'));
        filterTypes = cellstr(get(gh.processing_panel_average_type_popupmenu,'String'));
        filterType = filterTypes{get(gh.processing_panel_average_type_popupmenu,'Value')};
        ad.data{ad.control.spectra.active}.display.smoothing.y.filterfun = ...
            filterType;
        
        % Update appdata of main window
        setappdata(mainWindow,'data',ad.data);
        
        % Update processing panel
        update_processingPanel();
        
        % Update slider panel
        update_sliderPanel();
        
        % Update visible spectra listboxes (in diverse panels!)
        update_visibleSpectra();
        
        %Update main axis
        update_mainAxis();
    catch exception
        try
            msgStr = ['An exception occurred. '...
                'The bug reporter should have been opened'];
            add2status(msgStr);
        catch exception2
            exception = addCause(exception2, exception);
            disp(msgStr);
        end
        try
            trEPRgui_bugreportwindow(exception);
        catch exception3
            % If even displaying the bug report window fails...
            exception = addCause(exception3, exception);
            throw(exception);
        end
    end
end

function average_y_unit_Callback(source,~)
    try
        % Get appdata of main window
        mainWindow = guiGetWindowHandle;
        ad = getappdata(mainWindow);
        
        % Get handles of main window
        gh = guihandles(mainWindow);
        
        if not (ad.control.spectra.active)
            return;
        end
        
        [y,x] = size(ad.data{ad.control.spectra.active}.data);
        x = linspace(1,x,x);
        y = linspace(1,y,y);
        if (isfield(ad.data{ad.control.spectra.active},'axes') ...
                && isfield(ad.data{ad.control.spectra.active}.axes,'y') ...
                && isfield(ad.data{ad.control.spectra.active}.axes.y,'values') ...
                && not (isempty(ad.data{ad.control.spectra.active}.axes.y.values)))
            y = ad.data{ad.control.spectra.active}.axes.y.values;
        end
        
        % Get "atomic" value
        atomic = y(2)-y(1);
        
        % Fix values: only those in range of the axis are allowed
        if (str2num(get(source,'String')) < atomic)
            set(source,'String',num2str(atomic));
        elseif (str2num(get(source,'String')) > (atomic*length(y)))
            set(source,'String',num2str(atomic*length(y)));
        else
            set(source,...
                'String',...
                num2str(round(str2num(get(source,'String'))/atomic)*atomic)...
                );
        end
        
        set(gh.processing_panel_average_y_points_edit,...
            'String',...
            num2str(round(str2num(get(source,'String'))/atomic))...
            );
        
        ad.data{ad.control.spectra.active}.display.smoothing.y.value = ...
            round(str2num(get(source,'String'))/atomic);
        filterTypes = cellstr(get(gh.processing_panel_average_type_popupmenu,'String'));
        filterType = filterTypes{get(gh.processing_panel_average_type_popupmenu,'Value')};
        ad.data{ad.control.spectra.active}.display.smoothing.y.filterfun = ...
            filterType;
        
        % Update appdata of main window
        setappdata(mainWindow,'data',ad.data);
        
        % Update processing panel
        update_processingPanel();
        
        % Update slider panel
        update_sliderPanel();
        
        % Update visible spectra listboxes (in diverse panels!)
        update_visibleSpectra();
        
        %Update main axis
        update_mainAxis();
    catch exception
        try
            msgStr = ['An exception occurred. '...
                'The bug reporter should have been opened'];
            add2status(msgStr);
        catch exception2
            exception = addCause(exception2, exception);
            disp(msgStr);
        end
        try
            trEPRgui_bugreportwindow(exception);
        catch exception3
            % If even displaying the bug report window fails...
            exception = addCause(exception3, exception);
            throw(exception);
        end
    end
end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%  Utility functions
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

function datasetChangeLabel(index)
    try
        % Get appdata of main window
        mainWindow = guiGetWindowHandle;
        ad = getappdata(mainWindow);
        
        ad.data{index}.label = trEPRgui_setLabelWindow(ad.data{index}.label);
        % Update appdata of main window
        setappdata(mainWindow,'data',ad.data);
    catch exception
        try
            msgStr = ['An exception occurred. '...
                'The bug reporter should have been opened'];
            add2status(msgStr);
        catch exception2
            exception = addCause(exception2, exception);
            disp(msgStr);
        end
        try
            trEPRgui_bugreportwindow(exception);
        catch exception3
            % If even displaying the bug report window fails...
            exception = addCause(exception3, exception);
            throw(exception);
        end
    end
end

end