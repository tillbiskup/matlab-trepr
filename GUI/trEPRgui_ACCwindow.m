function varargout = trEPRgui_ACCwindow(varargin)
% TREPRGUI_ACCWINDOW Provide user with all necessary controls to sum
% several datasets together
%
% Normally, this window is called from within the trEPRgui window.
%
% See also TREPRGUI

% Copyright (c) 2011-14, Till Biskup
% 2014-08-10

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%  Construct the components
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% Make GUI effectively a singleton
singleton = findobj('Tag',mfilename);
if (singleton)
    figure(singleton);
    varargout{1} = singleton;
    return;
end

defaultBackground = [.9 .9 .9];

% Try to get main GUI position
mainGUIHandle = trEPRguiGetWindowHandle();
if ishandle(mainGUIHandle)
    mainGUIPosition = get(mainGUIHandle,'Position');
    guiPosition = [mainGUIPosition(1)+10,mainGUIPosition(2),800,680];
else
    guiPosition = [30,50,800,680];
end

%  Construct the components
hMainFigure = figure('Tag',mfilename,...
    'Visible','off',...
    'Name','trEPR GUI : Accumulate (ACC) Window',...
    'Color',defaultBackground,...
    'Units','Pixels',...
    'Position',guiPosition,...
    'Resize','off',...
    'NumberTitle','off', ...
    'KeyPressFcn',@keypress_Callback,...
    'Menu','none','Toolbar','none');

mainPanelWidth = 260;
mainPanelHeight = 550;
panel_size = 240;
guiSize = get(hMainFigure,'Position');
guiSize = guiSize([3,4]);

axes(...         % the axes for plotting selected plot
    'Tag','axis',...
	'Parent', hMainFigure, ...
    'FontUnit','Pixel','Fontsize',12,...
    'Units', 'Pixels', ...
    'Position',[70 250 400 400]);
uicontrol('Tag','slider',...
    'Style', 'slider',...
	'Parent', hMainFigure, ...
    'Min',1,'Max',100,'Value',50,...
    'Position', [485 250 15 400],...
    'BackgroundColor',[1 1 1],...
    'TooltipString','',...
    'Enable','off',...
    'Callback', {@slider_Callback}...
    );

% Create button group, toggle buttons for switching btw. panels
hButtonGroup = uibuttongroup('Tag','mainButtonGroup',...
    'BackgroundColor',defaultBackground,...
    'BorderType','none',...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position', [guiSize(1)-mainPanelWidth-20 guiSize(2)-50 mainPanelWidth 30],...
    'Visible','on',...
    'SelectionChangeFcn',{@tbg_Callback});
tb1 = uicontrol('Tag','datasets_togglebutton',...
    'Style','Toggle',...
	'Parent', hButtonGroup, ...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'String','Datasets',...
    'TooltipString','Decide which datasets to accumulate',...
    'pos',[0 0 (mainPanelWidth)/3 30],...
    'Enable','on'...
    );
tb2 = uicontrol('Tag','accumulate_togglebutton',...
    'Style','Toggle',...
	'Parent', hButtonGroup, ...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'String','Accumulate',...
    'TooltipString','Show results of accumulation',...
    'pos',[mainPanelWidth/3 0 (mainPanelWidth)/3 30],...
    'Enable','on'...
    );
tb3 = uicontrol('Tag','settings_togglebutton',...
    'Style','Toggle',...
	'Parent', hButtonGroup, ...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'String','Settings',...
    'TooltipString','Set parameters for accumulation',...
    'pos',[mainPanelWidth/3*2 0 (mainPanelWidth)/3 30],...
    'Enable','on'...
    );

% Create (switchable and overlaying) main panels
pp1 = uipanel('Tag','dataset_panel',...
    'parent',hMainFigure,...
    'Title','Datasets',...
    'FontUnit','Pixel','Fontsize',12,...
    'FontWeight','bold',...
    'BackgroundColor',defaultBackground,...
    'Visible','on',...
    'Units','pixels',...
    'Position',[guiSize(1)-mainPanelWidth-20 70 mainPanelWidth mainPanelHeight]);

pp2 = uipanel('Tag','accumulate_panel',...
    'parent',hMainFigure,...
    'Title','Accumulate',...
    'FontUnit','Pixel','Fontsize',12,...
    'FontWeight','bold',...
    'BackgroundColor',defaultBackground,...
    'Visible','off',...
    'Units','pixels',...
    'Position',[guiSize(1)-mainPanelWidth-20 70 mainPanelWidth mainPanelHeight]);

pp3 = uipanel('Tag','settings_panel',...
    'parent',hMainFigure,...
    'Title','Settings',...
    'FontUnit','Pixel','Fontsize',12,...
    'FontWeight','bold',...
    'BackgroundColor',defaultBackground,...
    'Visible','off',...
    'Units','pixels',...
    'Position',[guiSize(1)-mainPanelWidth-20 70 mainPanelWidth mainPanelHeight]);

pp4 = uipanel('Tag','report_panel',...
    'parent',hMainFigure,...
    'Title','Report',...
    'FontUnit','Pixel','Fontsize',12,...
    'FontWeight','bold',...
    'BackgroundColor',defaultBackground,...
    'Visible','on',...
    'Units','pixels',...
    'Position',[20 20 guiSize(1)-mainPanelWidth-50 170]);

% elements for pp1
pp1_p1 = uipanel('Tag','notaccumulated_panel',...
    'Parent',pp1,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10 mainPanelHeight-100 panel_size 80],...
    'Title','Not accumulated datasets'...
    );
uicontrol('Tag','notaccumulated_listbox',...
    'Style','listbox',...
    'Parent',pp1_p1,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10 10 panel_size-20 50],...
    'String',''...
    );

uicontrol('Tag','dataset_addall_pushbutton',...
    'Style','pushbutton',...
    'Parent',pp1,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',14,...
    'Units','Pixels',...
    'Position',[10 mainPanelHeight-140 (mainPanelWidth-20)/4 30],...
    'String','<html>&dArr;</html>',...
    'TooltipString',sprintf('%s\n%s',...
    'Add all spectra','to list of accumulated spectra'),...
    'Callback', {@pushbutton_Callback,'addall'}...
    );
uicontrol('Tag','dataset_add_pushbutton',...
    'Style','pushbutton',...
    'Parent',pp1,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',14,...
    'Units','Pixels',...
    'Position',[10+(mainPanelWidth-20)/4 mainPanelHeight-140 (mainPanelWidth-20)/4 30],...
    'String','<html>&darr;</html>',...
    'TooltipString',sprintf('%s\n%s',...
    'Add currently highlighted spectrum','to list of accumulated spectra'),...
    'Callback', {@pushbutton_Callback,'add'}...
    );
uicontrol('Tag','dataset_remove_pushbutton',...
    'Style','pushbutton',...
    'Parent',pp1,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',14,...
    'Units','Pixels',...
    'Position',[10+(mainPanelWidth-20)/4*2 mainPanelHeight-140 (mainPanelWidth-20)/4 30],...
    'String','<html>&uarr;</html>',...
    'TooltipString',sprintf('%s\n%s',...
    'Remove currently highlighted spectrum','from list of accumulated spectra'),...
    'Callback', {@pushbutton_Callback,'remove'}...
    );
uicontrol('Tag','dataset_removeall_pushbutton',...
    'Style','pushbutton',...
    'Parent',pp1,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',14,...
    'Units','Pixels',...
    'Position',[10+(mainPanelWidth-20)/4*3 mainPanelHeight-140 (mainPanelWidth-20)/4 30],...
    'String','<html>&uArr;</html>',...
    'TooltipString',sprintf('%s\n%s',...
    'Remove all spectra','from list of accumulated spectra'),...
    'Callback', {@pushbutton_Callback,'removeall'}...
    );

pp1_p2 = uipanel('Tag','accumulated_panel',...
    'Parent',pp1,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10 mainPanelHeight-230 panel_size 80],...
    'Title','Accumulated datasets'...
    );
uicontrol('Tag','accumulated_listbox',...
    'Style','listbox',...
    'Parent',pp1_p2,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10 10 panel_size-20 50],...
    'String','',...
    'Callback',{@accumulated_listbox_Callback}...
    );

uicontrol('Tag','showonlyactive_checkbox',...
    'Style','checkbox',...
    'Parent',pp1,...
    'BackgroundColor',defaultBackground,...
    'Enable','on',...
    'TooltipString','Check to display only the currently active dataset',...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10 mainPanelHeight-275 130 35],...
    'String','<html>&nbsp;Show only<br />&nbsp;active dataset</html>',...
    'Value',0,...
    'Callback',{@checkbox_Callback,'showonlyactive'}...
    );
uicontrol('Tag','dataset_prev_pushbutton',...
    'Style','pushbutton',...
    'Parent',pp1,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[mainPanelWidth-100 mainPanelHeight-275 45 35],...
    'String','<<',...
    'TooltipString','Add currently highlighted spectrum to list of accumulated spectra',...
    'Enable','on',...
    'Callback', {@pushbutton_Callback,'prev'}...
    );
uicontrol('Tag','dataset_next_pushbutton',...
    'Style','pushbutton',...
    'Parent',pp1,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[mainPanelWidth-55 mainPanelHeight-275 45 35],...
    'String','>>',...
    'TooltipString','Remove currently highlighted spectrum from list of accumulated spectra',...
    'Enable','on',...
    'Callback', {@pushbutton_Callback,'next'}...
    );

pp1_p3 = uipanel('Tag','dataset_dimensions_panel',...
    'Parent',pp1,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10 mainPanelHeight-445 panel_size 165],...
    'Title','Dimensions (selected)'...
    );
uicontrol('Tag','dataset_dimensions_x_text',...
    'Style','text',...
    'Parent',pp1_p3,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[60 120 (mainPanelWidth-90)/2 25],...
    'String','x'...
    );
uicontrol('Tag','dataset_dimensions_y_text',...
    'Style','text',...
    'Parent',pp1_p3,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[60+(mainPanelWidth-90)/2 120 (mainPanelWidth-90)/2 25],...
    'String','y'...
    );
uicontrol('Tag','dataset_dimensions_size_text',...
    'Style','text',...
    'Parent',pp1_p3,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10 100 45 20],...
    'String','Size'...
    );
uicontrol('Tag','dataset_dimensions_size_x_edit',...
    'Style','edit',...
    'Parent',pp1_p3,...
    'BackgroundColor',[1 1 1],...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[60 100 (mainPanelWidth-90)/2 25],...
    'String','1',...
    'Enable','inactive'...
    );
uicontrol('Tag','dataset_dimensions_size_y_edit',...
    'Style','edit',...
    'Parent',pp1_p3,...
    'BackgroundColor',[1 1 1],...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[60+(mainPanelWidth-90)/2 100 (mainPanelWidth-90)/2 25],...
    'String','1',...
    'Enable','inactive'...
    );
uicontrol('Tag','dataset_dimensions_min_text',...
    'Style','text',...
    'Parent',pp1_p3,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10 70 45 20],...
    'String','Min'...
    );
uicontrol('Tag','dataset_dimensions_min_x_edit',...
    'Style','edit',...
    'Parent',pp1_p3,...
    'BackgroundColor',[1 1 1],...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[60 70 (mainPanelWidth-90)/2 25],...
    'String','1',...
    'Enable','inactive'...
    );
uicontrol('Tag','dataset_dimensions_min_y_edit',...
    'Style','edit',...
    'Parent',pp1_p3,...
    'BackgroundColor',[1 1 1],...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[60+(mainPanelWidth-90)/2 70 (mainPanelWidth-90)/2 25],...
    'String','1',...
    'Enable','inactive'...
    );
uicontrol('Tag','dataset_dimensions_max_text',...
    'Style','text',...
    'Parent',pp1_p3,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10 40 45 20],...
    'String','Max'...
    );
uicontrol('Tag','dataset_dimensions_max_x_edit',...
    'Style','edit',...
    'Parent',pp1_p3,...
    'BackgroundColor',[1 1 1],...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[60 40 (mainPanelWidth-90)/2 25],...
    'String','1',...
    'Enable','inactive'...
    );
uicontrol('Tag','dataset_dimensions_max_y_edit',...
    'Style','edit',...
    'Parent',pp1_p3,...
    'BackgroundColor',[1 1 1],...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[60+(mainPanelWidth-90)/2 40 (mainPanelWidth-90)/2 25],...
    'String','1',...
    'Enable','inactive'...
    );
uicontrol('Tag','dataset_dimensions_step_text',...
    'Style','text',...
    'Parent',pp1_p3,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10 10 45 20],...
    'String','Step'...
    );
uicontrol('Tag','dataset_dimensions_step_x_edit',...
    'Style','edit',...
    'Parent',pp1_p3,...
    'BackgroundColor',[1 1 1],...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[60 10 (mainPanelWidth-90)/2 25],...
    'String','1',...
    'Enable','inactive'...
    );
uicontrol('Tag','dataset_dimensions_step_y_edit',...
    'Style','edit',...
    'Parent',pp1_p3,...
    'BackgroundColor',[1 1 1],...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[60+(mainPanelWidth-90)/2 10 (mainPanelWidth-90)/2 25],...
    'String','1',...
    'Enable','inactive'...
    );

pp1_p4 = uipanel('Tag','displaytype_panel',...
    'Parent',pp1,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10 mainPanelHeight-510 panel_size 55],...
    'Title','Display type'...
    );
uicontrol('Tag','displaytype_popupmenu',...
    'Style','popupmenu',...
    'Parent',pp1_p4,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10 10 panel_size-20 20],...
    'String','2D plot|1D along x|1D along y',...
    'Callback', {@popupmenu_Callback,'displaytype'}...
    );

% controls for pp2

pp2_p1 = uipanel('Tag','acc_master_panel',...
    'Parent',pp2,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10 mainPanelHeight-110 mainPanelWidth-20 90],...
    'Title','Accumulated dataset'...
    );
uicontrol('Tag','accumulationmethod_text',...
    'Style','text',...
    'Parent',pp2_p1,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10 43 50 20],...
    'String','Master:'...
    );
uicontrol('Tag','master_popupmenu',...
    'Style','popupmenu',...
    'Parent',pp2_p1,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[65 45 mainPanelWidth-95 20],...
    'String','Label of 1st dataset|Label of 2nd dataset|Label of 3rd dataset'...
    );
uicontrol('Tag','label_text',...
    'Style','text',...
    'Parent',pp2_p1,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10 10 50 20],...
    'String','Label:'...
    );
uicontrol('Tag','label_edit',...
    'Style','edit',...
    'Parent',pp2_p1,...
    'BackgroundColor',[1 1 1],...
    'FontUnit','Pixel','Fontsize',12,...
    'HorizontalAlignment','Left',...
    'Units','Pixels',...
    'Position',[65 10 mainPanelWidth-95 25],...
    'String','Labelstring'...
    );

pp2_p2 = uipanel('Tag','methods_panel',...
    'parent',pp2,...
    'Title','Methods',...
    'FontUnit','Pixel','Fontsize',12,...
    'BackgroundColor',defaultBackground,...
    'Visible','on',...
    'Units','pixels',...
    'Position',[10 mainPanelHeight-200 mainPanelWidth-20 80]);
uicontrol('Tag','accumulationmethod_text',...
    'Style','text',...
    'Parent',pp2_p2,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10 38 80 20],...
    'String','Accumulation:'...
    );
uicontrol('Tag','accumulationmethod_popupmenu',...
    'Style','popupmenu',...
    'Parent',pp2_p2,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[(mainPanelWidth-20)/2-20 40 (mainPanelWidth)/2 20],...
    'String','cumulative|weighted',...
    'Callback', {@popupmenu_Callback,'accumulationmethod'}...
    );
uicontrol('Tag','interpolationmethod_text',...
    'Style','text',...
    'Parent',pp2_p2,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10 8 80 20],...
    'String','Interpolation:'...
    );
uicontrol('Tag','interpolationmethod_popupmenu',...
    'Style','popupmenu',...
    'Parent',pp2_p2,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[(mainPanelWidth-20)/2-20 10 (mainPanelWidth)/2 20],...
    'String','none|linear|spline|cubic'...
    );

uicontrol('Tag','accumulate_pushbutton',...
    'Style','pushbutton',...
    'Parent',pp2,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[mainPanelWidth-110 mainPanelHeight-250 100 40],...
    'String','Accumulate',...
    'TooltipString','Remove currently highlighted spectrum from list of accumulated spectra',...
    'Enable','on',...
    'Callback', {@pushbutton_Callback,'accumulate'}...
    );

pp2_p3 = uipanel('Tag','accdimensions_panel',...
    'Parent',pp2,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10 mainPanelHeight-425 panel_size 165],...
    'Title','Dimensions (accumulated)'...
    );
uicontrol('Tag','accdimensions_x_text',...
    'Style','text',...
    'Parent',pp2_p3,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[60 120 (mainPanelWidth-90)/2 25],...
    'String','x'...
    );
uicontrol('Tag','accdimensions_y_text',...f
    'Style','text',...
    'Parent',pp2_p3,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[60+(mainPanelWidth-90)/2 120 (mainPanelWidth-90)/2 25],...
    'String','y'...
    );
uicontrol('Tag','accdimensions_size_text',...
    'Style','text',...
    'Parent',pp2_p3,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10 100 45 20],...
    'String','Size'...
    );
uicontrol('Tag','accdimensions_size_x_edit',...
    'Style','edit',...
    'Parent',pp2_p3,...
    'BackgroundColor',[1 1 1],...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[60 100 (mainPanelWidth-90)/2 25],...
    'String','1',...
    'Enable','inactive'...
    );
uicontrol('Tag','accdimensions_size_y_edit',...
    'Style','edit',...
    'Parent',pp2_p3,...
    'BackgroundColor',[1 1 1],...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[60+(mainPanelWidth-90)/2 100 (mainPanelWidth-90)/2 25],...
    'String','1',...
    'Enable','inactive'...
    );
uicontrol('Tag','accdimensions_min_text',...
    'Style','text',...
    'Parent',pp2_p3,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10 70 45 20],...
    'String','Min'...
    );
uicontrol('Tag','accdimensions_min_x_edit',...
    'Style','edit',...
    'Parent',pp2_p3,...
    'BackgroundColor',[1 1 1],...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[60 70 (mainPanelWidth-90)/2 25],...
    'String','1',...
    'Enable','inactive'...
    );
uicontrol('Tag','accdimensions_min_y_edit',...
    'Style','edit',...
    'Parent',pp2_p3,...
    'BackgroundColor',[1 1 1],...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[60+(mainPanelWidth-90)/2 70 (mainPanelWidth-90)/2 25],...
    'String','1',...
    'Enable','inactive'...
    );
uicontrol('Tag','accdimensions_max_text',...
    'Style','text',...
    'Parent',pp2_p3,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10 40 45 20],...
    'String','Max'...
    );
uicontrol('Tag','accdimensions_max_x_edit',...
    'Style','edit',...
    'Parent',pp2_p3,...
    'BackgroundColor',[1 1 1],...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[60 40 (mainPanelWidth-90)/2 25],...
    'String','1',...
    'Enable','inactive'...
    );
uicontrol('Tag','accdimensions_max_y_edit',...
    'Style','edit',...
    'Parent',pp2_p3,...
    'BackgroundColor',[1 1 1],...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[60+(mainPanelWidth-90)/2 40 (mainPanelWidth-90)/2 25],...
    'String','1',...
    'Enable','inactive'...
    );
uicontrol('Tag','accdimensions_step_text',...
    'Style','text',...
    'Parent',pp2_p3,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10 10 45 20],...
    'String','Step'...
    );
uicontrol('Tag','accdimensions_step_x_edit',...
    'Style','edit',...
    'Parent',pp2_p3,...
    'BackgroundColor',[1 1 1],...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[60 10 (mainPanelWidth-90)/2 25],...
    'String','1',...
    'Enable','inactive'...
    );
uicontrol('Tag','accdimensions_step_y_edit',...
    'Style','edit',...
    'Parent',pp2_p3,...
    'BackgroundColor',[1 1 1],...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[60+(mainPanelWidth-90)/2 10 (mainPanelWidth-90)/2 25],...
    'String','1',...
    'Enable','inactive'...
    );

pp2_p4 = uipanel('Tag','position_panel',...
    'Parent',pp2,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10 mainPanelHeight-540 panel_size 105],...
    'Title','Slider position'...
    );
uicontrol('Tag','position_index_text',...
    'Style','text',...
    'Parent',pp2_p4,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[60 60 (mainPanelWidth-90)/2 25],...
    'String','index'...
    );
uicontrol('Tag','position_unit_text',...
    'Style','text',...
    'Parent',pp2_p4,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[60+(mainPanelWidth-90)/2 60 (mainPanelWidth-90)/2 25],...
    'String','unit'...
    );
uicontrol('Tag','position_x_text',...
    'Style','text',...
    'Parent',pp2_p4,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10 40 45 20],...
    'String','x'...
    );
uicontrol('Tag','position_x_index_edit',...
    'Style','edit',...
    'Parent',pp2_p4,...
    'BackgroundColor',[1 1 1],...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[60 40 (mainPanelWidth-90)/2 25],...
    'String','1',...
    'Callback',{@position_edit_Callback,'xindex'}...
    );
uicontrol('Tag','position_x_unit_edit',...
    'Style','edit',...
    'Parent',pp2_p4,...
    'BackgroundColor',[1 1 1],...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[60+(mainPanelWidth-90)/2 40 (mainPanelWidth-90)/2 25],...
    'String','1',...
    'Callback',{@position_edit_Callback,'xunit'}...
    );
uicontrol('Tag','position_y_text',...
    'Style','text',...
    'Parent',pp2_p4,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10 10 45 20],...
    'String','y'...
    );
uicontrol('Tag','position_y_index_edit',...
    'Style','edit',...
    'Parent',pp2_p4,...
    'BackgroundColor',[1 1 1],...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[60 10 (mainPanelWidth-90)/2 25],...
    'String','1',...
    'Callback',{@position_edit_Callback,'yindex'}...
    );
uicontrol('Tag','position_y_unit_edit',...
    'Style','edit',...
    'Parent',pp2_p4,...
    'BackgroundColor',[1 1 1],...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[60+(mainPanelWidth-90)/2 10 (mainPanelWidth-90)/2 25],...
    'String','1',...
    'Callback',{@position_edit_Callback,'yunit'}...
    );

% elements for pp3
pp3_p1 = uipanel('Tag','grid_panel',...
    'Parent',pp3,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10 mainPanelHeight-80 mainPanelWidth-20 60],...
    'Title','Grid'...
    );
uicontrol('Tag','grid_x_togglebutton',...
    'Style','Toggle',...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'String','X',...
    'TooltipString','Show grid in x',...
    'pos',[10 10 (mainPanelWidth-40)/4 30],...
    'parent',pp3_p1,...
    'HandleVisibility','off',...
    'Value',0,...
    'Callback',{@togglebutton_Callback,'gridx'}...
    );
uicontrol('Tag','grid_y_togglebutton',...
    'Style','Toggle',...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'String','Y',...
    'TooltipString','Show grid in y',...
    'pos',[10+(mainPanelWidth-40)/4 10 (mainPanelWidth-40)/4 30],...
    'parent',pp3_p1,...
    'HandleVisibility','off',...
    'Value',0,...
    'Callback',{@togglebutton_Callback,'gridy'}...
    );
uicontrol('Tag','grid_minor_togglebutton',...
    'Style','Toggle',...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'String','minor',...
    'TooltipString',sprintf('%s\n%s','Show minor grid',...
    '(Works only in combination with X or Y grid)'),...
    'pos',[10+(mainPanelWidth-40)/4*2 10 (mainPanelWidth-40)/4 30],...
    'parent',pp3_p1,...
    'HandleVisibility','off',...
    'Value',0,...
    'Callback',{@togglebutton_Callback,'gridminor'}...
    );
uicontrol('Tag','grid_zero_togglebutton',...
    'Style','Toggle',...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'String','zero',...
    'TooltipString','Show dashed line at zero',...
    'pos',[10+(mainPanelWidth-40)/4*3 10 (mainPanelWidth-40)/4 30],...
    'parent',pp3_p1,...
    'HandleVisibility','off',...
    'Value',1,...
    'Callback',{@togglebutton_Callback,'gridzero'}...
    );

pp3_p2 = uipanel('Tag','weighting_sn_panel',...
    'parent',pp3,...
    'Title','Weighting & S/N determination',...
    'FontUnit','Pixel','Fontsize',12,...
    'BackgroundColor',defaultBackground,...
    'Visible','on',...
    'Units','pixels',...
    'Position',[10 mainPanelHeight-255 panel_size 165]);
uicontrol('Tag','weights_min_text',...
    'Style','text',...
    'Parent',pp3_p2,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[80 115 75 25],...
    'String','Min'...
    );
uicontrol('Tag','weights_max_text',...
    'Style','text',...
    'Parent',pp3_p2,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[80+75 115 75 25],...
    'String','Max'...
    );
uicontrol('Tag','weights_text',...
    'Style','text',...
    'Parent',pp3_p2,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'HorizontalAlignment','Left',...
    'Units','Pixels',...
    'Position',[10 95 65 20],...
    'String','Weights'...
    );
uicontrol('Tag','weights_min_edit',...
    'Style','edit',...
    'Parent',pp3_p2,...
    'BackgroundColor',[1 1 1],...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[80 95 75 25],...
    'String','0.5',...
    'Enable','Off',...
    'Callback',{@edit_Callback,'weightsMin'}...
    );
uicontrol('Tag','weights_max_edit',...
    'Style','edit',...
    'Parent',pp3_p2,...
    'BackgroundColor',[1 1 1],...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[80+75 95 75 25],...
    'String','2',...
    'Enable','Off',...
    'Callback',{@edit_Callback,'weightsMax'}...
    );
uicontrol('Tag','sn_min_text',...
    'Style','text',...
    'Parent',pp3_p2,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'FontAngle','Oblique',...
    'Units','Pixels',...
    'Position',[10 60 mainPanelWidth-40 25],...
    'String','S/N determination'...
    );
uicontrol('Tag','sn_x_text',...
    'Style','text',...
    'Parent',pp3_p2,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10 40 55 20],...
    'String','x'...
    );
uicontrol('Tag','sn_x_min_edit',...
    'Style','edit',...
    'Parent',pp3_p2,...
    'BackgroundColor',[1 1 1],...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[80 40 (panel_size-90)/2 25],...
    'String','1',...
    'Callback',{@sn_edit_Callback,'xmin'}...
    );
uicontrol('Tag','sn_x_max_edit',...
    'Style','edit',...
    'Parent',pp3_p2,...
    'BackgroundColor',[1 1 1],...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[80+(panel_size-90)/2 40 (panel_size-90)/2 25],...
    'String','1',...
    'Callback',{@sn_edit_Callback,'xmax'}...
    );
uicontrol('Tag','sn_y_text',...
    'Style','text',...
    'Parent',pp3_p2,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10 10 55 20],...
    'String','y'...
    );
uicontrol('Tag','sn_y_min_edit',...
    'Style','edit',...
    'Parent',pp3_p2,...
    'BackgroundColor',[1 1 1],...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[80 10 (panel_size-90)/2 25],...
    'String','1',...
    'Callback',{@sn_edit_Callback,'ymin'}...
    );
uicontrol('Tag','sn_y_max_edit',...
    'Style','edit',...
    'Parent',pp3_p2,...
    'BackgroundColor',[1 1 1],...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[80+(panel_size-90)/2 10 (panel_size-90)/2 25],...
    'String','1',...
    'Callback',{@sn_edit_Callback,'ymax'}...
    );

uicontrol('Tag','settings_save_pushbutton',...
    'Style','pushbutton',...
	'Parent', pp3, ...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'String','Save',...
    'TooltipString','Save current settings to configuration file',...
    'pos',[10 10 (mainPanelWidth-20)/2 40],...
    'Enable','off',...
    'Callback',{@pushbutton_Callback,'SettingsSave'}...
    );
uicontrol('Tag','settings_default_pushbutton',...
    'Style','pushbutton',...
	'Parent', pp3, ...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'String','Defaults',...
    'TooltipString','Reset settings to default settings',...
    'pos',[10+(mainPanelWidth-20)/2 10 (mainPanelWidth-20)/2 40],...
    'Enable','on',...
    'Callback',{@pushbutton_Callback,'SettingsDefault'}...
    );


reportPanelSize = get(pp4,'Position');
uicontrol('Tag','summary_panel_edit',...
    'Style','edit',...
    'Parent',pp4,...
    'BackgroundColor',[1 1 1],...
    'Units','Pixels',...
    'FontUnit','Pixel','Fontsize',12,...
    'FontName','FixedWidth',...
    'HorizontalAlignment','Left',...
    'Position',[10 40 reportPanelSize(3)-20 reportPanelSize(4)-60],...
    'Enable','inactive',...
    'Max',2,'Min',0,...
    'String','Nothing to report yet...');
uicontrol('Tag','summary_panel_reportsave_pushbutton',...
    'Style','pushbutton',...
	'Parent',pp4, ...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'String','Save',...
    'TooltipString','Save report shown on the left to text file',...
    'pos',[reportPanelSize(3)-80 10 70 25],...
    'Enable','on',...
    'Callback',{@pushbutton_Callback,'reportSave'}...
    );



uicontrol('Tag','zoom_togglebutton',...
    'Style','togglebutton',...
	'Parent', hMainFigure, ...
    'BackgroundColor',defaultBackground,...
    'ForegroundColor',[0 0 0],...
    'FontUnit','Pixel','Fontsize',12,...
    'FontWeight','bold',...
    'String','+',...
    'TooltipString','Zoom',...
    'pos',[panel_size*2+5 220 25 25],...
    'Enable','on',...
    'Callback',{@togglebutton_Callback,'Zoom'}...
    );

uicontrol('Tag','help_pushbutton',...
    'Style','pushbutton',...
	'Parent', hMainFigure, ...
    'BackgroundColor',defaultBackground,...
    'ForegroundColor',[0 0 1],...
    'FontUnit','Pixel','Fontsize',12,...
    'FontWeight','bold',...
    'String','?',...
    'TooltipString','Display help for how to operate the accumulation GUI',...
    'pos',[panel_size*2+5 190 25 25],...
    'Enable','on',...
    'Callback',{@(~,~)trEPRgui_ACC_helpwindow} ...
    );

uicontrol('Tag','apply_pushbutton',...
    'Style','pushbutton',...
	'Parent', hMainFigure, ...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'String','Apply',...
    'TooltipString','Apply current settings (perform actual accumulation)',...
    'pos',[guiSize(1)-mainPanelWidth-20 20 (mainPanelWidth)/3 40],...
    'Enable','on',...
    'Callback',{@pushbutton_Callback,'Apply'}...
    );
uicontrol('Tag','discard_pushbutton',...
    'Style','pushbutton',...
	'Parent', hMainFigure, ...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'String','Discard',...
    'TooltipString','Discard last performed accumulation',...
    'pos',[guiSize(1)-((mainPanelWidth)/3*2)-20 20 (mainPanelWidth)/3 40],...
    'Enable','on',...
    'Callback',{@pushbutton_Callback,'Discard'}...
    );
uicontrol('Tag','close_pushbutton',...
    'Style','pushbutton',...
	'Parent', hMainFigure, ...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'String','Close',...
    'TooltipString','Close ACC GUI (and transfer accumulated dataset to main GUI, if any)',...
    'pos',[guiSize(1)-((mainPanelWidth)/3)-20 20 (mainPanelWidth)/3 40],...
    'Enable','on',...
    'Callback',{@pushbutton_Callback,'Close'}...
    );

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%  Initialization tasks
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% Store handles in guidata
guidata(hMainFigure,guihandles);

% Create appdata structure
ad = trEPRguiDataStructure('guiappdatastructure');

% Apply configuration
guiConfigApply(mfilename);
ad.configuration = getappdata(hMainFigure,'configuration');

% ACC - struct
ad.acc = struct();
ad.acc = ad.configuration.acc;
ad.acc.datasets = [];
ad.acc.master = [];
ad.acc.label = '';

setappdata(hMainFigure,'data',ad.data);
setappdata(hMainFigure,'origdata',ad.origdata);
setappdata(hMainFigure,'configuration',ad.configuration);
setappdata(hMainFigure,'control',ad.control);
setappdata(hMainFigure,'acc',ad.acc);

% Make the GUI visible.
set(hMainFigure,'Visible','on');
trEPRmsg('ACC GUI window opened','debug');

% Load data from Main GUI
mainGuiWindow = trEPRguiGetWindowHandle();
if (mainGuiWindow)
    admain = getappdata(mainGuiWindow);
    % Check for availability of necessary fields in appdata
    if (isfield(admain,'data') ~= 0)
        ad.data = admain.data;
        setappdata(hMainFigure,'data',ad.data);
        ad.origdata = admain.data;
        setappdata(hMainFigure,'origdata',ad.origdata);
    end
    if (isfield(admain,'control') ~= 0)
        %ad.control = admain.control;
        % Move (in)visible -> (not)accumulated
        ad.control.data.accumulated = admain.control.data.visible;
        ad.control.data.notaccumulated = admain.control.data.invisible;
        ad.control.data = rmfield(ad.control.data,'visible');
        ad.control.data = rmfield(ad.control.data,'invisible');
        ad.control.axis.grid.zero = ad.configuration.axis.grid.zero;
        ad.control.axis.grid.x = ad.configuration.axis.grid.x;
        ad.control.axis.grid.y = ad.configuration.axis.grid.y;
        ad.control.axis.grid.minor = ad.configuration.axis.grid.minor;
        ad.control.axis.onlyActive = ad.configuration.axis.onlyActive;
        setappdata(hMainFigure,'control',ad.control);
    end
    
    % Apply scaling and displacement to spectra
    % TODO: - Scaling
    %       - Frequency correction when displacing along the field axis...!
    for m=1:length(ad.data)
        % Handle displacement along all three axes
        if (ad.data{m}.display.displacement.data.x ~= 0)
            % Get axis stepping
            xStep = ad.data{m}.axes.x.values(2)-ad.data{m}.axes.x.values(1);
            % Set new axes values
            ad.data{m}.axes.x.values = ad.data{m}.axes.x.values + ...
                (xStep*ad.data{m}.display.displacement.data.x);
        end
        if (ad.data{m}.display.displacement.data.y ~= 0)
            % Get axis stepping
            yStep = ad.data{m}.axes.y.values(2)-ad.data{m}.axes.y.values(1);
            % Set new axes values
            ad.data{m}.axes.y.values = ad.data{m}.axes.y.values + ...
                (yStep*ad.data{m}.display.displacement.data.y);
        end
        if (ad.data{m}.display.displacement.data.z ~= 0)
            ad.data{m}.data = ...
                ad.data{m}.data + ad.data{m}.display.displacement.data.z;
        end
        % Handle scaling along all three axes
        if (ad.data{m}.display.scaling.data.x ~= 0)
        end
        if (ad.data{m}.display.scaling.data.y ~= 0)
        end
        if (ad.data{m}.display.scaling.data.z ~= 0)
        end
        % set appdata
        setappdata(hMainFigure,'data',ad.data);
    end
    
    updateSpectra();
    updateDimensionPanel('Datasets');
    updateAxes();
%     update_position_display();
end

%updateAxes();

if (nargout == 1)
    varargout{1} = hMainFigure;
end

% Add keypress function to every element that can have one...
handles = findall(...
    allchild(hMainFigure),'style','pushbutton',...
    '-or','style','togglebutton',...
    '-or','style','edit',...
    '-or','style','listbox',...
    '-or','style','popupmenu');
for m=1:length(handles)
    set(handles(m),'KeyPressFcn',@keypress_Callback);
end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%  Callbacks
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

function tbg_Callback(source,~)
    try 
        switchPanel(get(get(source,'SelectedObject'),'String'));
    catch exception
        trEPRexceptionHandling(exception)
    end
end

function slider_Callback(source,~)
    try
        % Get appdata of main window
        mainWindow = trEPRguiGetWindowHandle(mfilename);
        ad = getappdata(mainWindow);
        
        % Depending on display type settings
        switch ad.control.axis.displayType
            case '1D along x'
                if isfield(ad.acc,'data')
                    ad.acc.data.display.position.y = ...
                        int16(get(source,'Value'));
                else
                    ad.data{ad.control.data.active}.display.position.y = ...
                        int16(get(source,'Value'));
                end
            case '1D along y'
                if isfield(ad.acc,'data')
                    ad.acc.data.display.position.x = ...
                        int16(get(source,'Value'));
                else
                    ad.data{ad.control.data.active}.display.position.x = ...
                        int16(get(source,'Value'));
                end
            otherwise
                trEPRoptionUnknown(ad.control.axis.displayType,...
                    'display type');
        end
        
        % Update appdata of main window
        setappdata(mainWindow,'acc',ad.acc);
        setappdata(mainWindow,'data',ad.data);
        
        % Update slider panel
        updateSliderPanel()
        
        %Update main axis
        updateAxes();
    catch exception
        trEPRexceptionHandling(exception)
    end
end

function accumulated_listbox_Callback(~,~)
    try
        % Get appdata of main window
        mainWindow = trEPRguiGetWindowHandle(mfilename);
        ad = getappdata(mainWindow);
        
        % Get handles of main window
        gh = guihandles(mainWindow);
        
        ad.control.data.active = ad.control.data.accumulated(...
            get(gh.accumulated_listbox,'Value')...
            );
        
        % Update appdata of main window
        setappdata(mainWindow,'control',ad.control);
        
        % Update datasets dimension panel
        updateDimensionPanel('Datasets');
        
        % Update axes
        updateAxes();
    catch exception
        trEPRexceptionHandling(exception)
    end
end

function position_edit_Callback(source,~,position)
    try
        if isempty(position) || ~isfield(ad.acc,'data') || ...
                isempty(ad.acc.data)
            return;
        end
        
        % If value is empty or NaN after conversion to numeric, restore
        % previous entry and return
        value = get(source,'String');
        if isempty(value) || ...
                ((isnan(str2double(value))) && ~strcmpi(value,'end'))
            % Update slider panel
            updateSliderPanel();
            return;
        end
        
        % Get appdata of ACC GUI
        mainWindow = trEPRguiGetWindowHandle(mfilename);
        ad = getappdata(mainWindow);
        
        % Be as robust as possible: if there is no axes, default is indices
        [y,x] = size(ad.data{ad.control.data.active}.data);
        x = linspace(1,x,x);
        y = linspace(1,y,y);
        if (isfield(ad.acc.data,'axes') ...
                && isfield(ad.acc.data.axes,'x') ...
                && isfield(ad.acc.data.axes.x,'values') ...
                && not (isempty(ad.acc.data.axes.x.values)))
            x = ad.acc.data.axes.x.values;
        end
        if (isfield(ad.acc.data,'axes') ...
                && isfield(ad.acc.data.axes,'y') ...
                && isfield(ad.acc.data.axes.y,'values') ...
                && not (isempty(ad.acc.data.axes.y.values)))
            y = ad.acc.data.axes.y.values;
        end
        
        switch position
            case 'xindex'
                if strcmpi(value,'end')
                    disp('Hm...')
                    value = length(x);
                else
                    value = round(str2double(value));
                    if (value > length(x)) 
                        value = length(x); 
                    end
                    if (value < 1) 
                        value = 1;
                    end
                end
                ad.acc.data.display.position.x = ...
                    value;
            case 'xunit'
                if strcmpi(value,'end')
                    value = x(end);
                else
                    value = str2double(value);
                    if (value < x(1)) 
                        value = x(1); 
                    end
                    if (value > x(end)) 
                        value = x(end); 
                    end
                    if length(x)>1
                        value = ...
                            interp1(...
                            x,1:length(x),...
                            value,...
                            'nearest'...
                            );
                    end
                end
                ad.acc.data.display.position.x = value;
            case 'yindex'
                if strcmpi(value,'end')
                    value = length(y);
                else
                    value = round(str2double(value));
                    if (value > length(y)) 
                        value = length(y); 
                    end
                    if (value < 1) 
                        value = 1; 
                    end
                end
                ad.acc.data.display.position.y = value;
            case 'yunit'
                if strcmpi(value,'end')
                    value = x(end);
                else
                    value = str2double(value);
                    if (value < y(1)) 
                        value = y(1); 
                    end
                    if (value > y(end)) 
                        value = y(end); 
                    end
                    if length(y)>1
                        value = ...
                            interp1(...
                            y,1:length(y),...
                            value,...
                            'nearest'...
                            );
                    end
                end
                ad.acc.data.display.position.y = value;
            otherwise
                trEPRoptionUnknown(position,'position');
                return;
        end
        
        % Update appdata of main window
        setappdata(mainWindow,'acc',ad.acc);
        
        % Update slider panel
        updateSliderPanel();
        
        %Update main axis
        updateAxes();
    catch exception
        trEPRexceptionHandling(exception)
    end
end

function edit_Callback(~,~,position)
    try
        if isempty(position)
            return;
        end
        
        % Get appdata of main window
        mainWindow = trEPRguiGetWindowHandle(mfilename);
        ad = getappdata(mainWindow);

        % IDEA: If user types "end", replace that with the maximum index in
        % the respective dimension - would be a very convenient way for the
        % user to specify that one axis should be used from beginning to
        % end without needing to know how long this axis really is in terms
        % of indices.
        return;
    catch exception
        trEPRexceptionHandling(exception)
    end
end

function togglebutton_Callback(source,~,action)
    try
        if isempty(action)
            return;
        end
        
        % Get appdata of main window
        mainWindow = trEPRguiGetWindowHandle(mfilename);
        ad = getappdata(mainWindow);

        % Get state of toggle button
        value = get(source,'Value');
        
        % For those togglebuttons who do more complicated stuff
        % Toggle button
        if value % If toggle switched ON
            switch lower(action)
                case 'measurepick'
                    % Switch off zoom
                    zoom(mainWindow,'off');
                    % Set pointer callback functions
                    set(mainWindow,...
                        'WindowButtonMotionFcn',@trackPointer);
                    set(mainWindow,...
                        'WindowButtonDownFcn',@switchMeasurePointer);
                    return;
                case 'zoom'
                    % Reset pointer callback functions
                    set(mainWindow,'WindowButtonMotionFcn','');
                    set(mainWindow,'WindowButtonDownFcn','');
                    % Reset other zoom toggle button
                    zoom(mainWindow,'on');
                    return;
                case 'gridx'
                    ad.control.axis.grid.x = 'on';
                    setappdata(mainWindow,'control',ad.control);
                    updateAxes();
                    return;
                case 'gridy'
                    ad.control.axis.grid.y = 'on';
                    setappdata(mainWindow,'control',ad.control);
                    updateAxes();
                    return;
                case 'gridminor'
                    ad.control.axis.grid.minor = 'on';
                    setappdata(mainWindow,'control',ad.control);
                    updateAxes();
                    return;
                case 'gridzero'
                    ad.control.axis.grid.zero = value;
                    setappdata(mainWindow,'control',ad.control);
                    updateAxes();
                    return;
                otherwise
                    trEPRoptionUnknown(action);
                    return;
            end
        else % If toggle button switched OFF
            switch lower(action)
                case 'measurepick'
                    % Reset pointer callback functions
                    set(mainWindow,'WindowButtonMotionFcn','');
                    set(mainWindow,'WindowButtonDownFcn','');
                    return;
                case 'zoom'
                    zoom(mainWindow,'off');
                    return;
                case 'gridx'
                    ad.control.axis.grid.x = 'off';
                    setappdata(mainWindow,'control',ad.control);
                    updateAxes();
                    return;
                case 'gridy'
                    ad.control.axis.grid.y = 'off';
                    setappdata(mainWindow,'control',ad.control);
                    updateAxes();
                    return;
                case 'gridminor'
                    ad.control.axis.grid.minor = 'off';
                    setappdata(mainWindow,'control',ad.control);
                    updateAxes();
                    return;
                case 'gridzero'
                    ad.control.axis.grid.zero = value;
                    setappdata(mainWindow,'control',ad.control);
                    updateAxes();
                    return;
                otherwise
                    trEPRoptionUnknown(action);
                    return;
            end
        end
    catch exception
        trEPRexceptionHandling(exception)
    end
end

function checkbox_Callback(source,~,action)
    try
        if isempty(action)
            return;
        end
        
        % Get appdata of ACC GUI
        mainWindow = trEPRguiGetWindowHandle(mfilename);
        ad = getappdata(mainWindow);
        
        switch action
            case 'showonlyactive'
                ad.control.axis.onlyActive = get(source,'Value');
            otherwise
                trEPRoptionUnknown(action);
                return;
        end
        setappdata(mainWindow,'control',ad.control);
        updateAxes();
    catch exception
        trEPRexceptionHandling(exception)
    end
end

function pushbutton_Callback(~,~,action)
    try
        if isempty(action)
            return;
        end
        
        % Get appdata and handles of main window
        mainWindow = trEPRguiGetWindowHandle(mfilename);
        ad = getappdata(mainWindow);
        gh = guihandles(mainWindow);
        
        switch action
            case 'add'
                if isempty(ad.control.data.notaccumulated)
                    return;
                end
                selected = get(gh.notaccumulated_listbox,'Value');
                ad.control.data.accumulated(end+1) = ...
                    ad.control.data.notaccumulated(selected);
                ad.control.data.notaccumulated(selected) = [];
                % Set appdata
                setappdata(mainWindow,'control',ad.control);
                updateSpectra();
                updateDimensionPanel('Datasets');
                updateAxes();
            case 'remove'
                if isempty(ad.control.data.accumulated)
                    return;
                end
                selected = get(gh.accumulated_listbox,'Value');
                ad.control.data.notaccumulated(end+1) = ...
                    ad.control.data.accumulated(selected);
                ad.control.data.accumulated(selected) = [];
                % Set appdata
                setappdata(mainWindow,'control',ad.control);
                updateSpectra();
                updateDimensionPanel('Datasets');
                updateAxes();
            case 'addall'
                if isempty(ad.control.data.notaccumulated)
                    return;
                end
                ad.control.data.accumulated = [...
                    ad.control.data.accumulated ...
                    ad.control.data.notaccumulated ];
                ad.control.data.notaccumulated = [];
                % Set appdata
                setappdata(mainWindow,'control',ad.control);
                updateSpectra();
                updateDimensionPanel('Datasets');
                updateAxes();
            case 'removeall'
                if isempty(ad.control.data.accumulated)
                    return;
                end
                ad.control.data.notaccumulated = [...
                    ad.control.data.notaccumulated ...
                    ad.control.data.accumulated ];
                ad.control.data.accumulated = [];
                % Set appdata
                setappdata(mainWindow,'control',ad.control);
                updateSpectra();
                updateDimensionPanel('Datasets');
                updateAxes();
            case 'next'
                if isempty(ad.control.data.accumulated)
                    return;
                end
                selected = get(gh.accumulated_listbox,'Value');
                if selected == length(ad.control.data.accumulated)
                    selected = 1;
                else
                    selected = selected + 1;
                end
                set(gh.accumulated_listbox,'Value',selected);
                updateSpectra();
                updateDimensionPanel('Datasets');
                updateAxes();
            case 'prev'
                if isempty(ad.control.data.accumulated)
                    return;
                end
                selected = get(gh.accumulated_listbox,'Value');
                if selected == 1
                    selected = length(ad.control.data.accumulated);
                else
                    selected = selected - 1;
                end
                set(gh.accumulated_listbox,'Value',selected);
                updateSpectra();
                updateDimensionPanel('Datasets');
                updateAxes();
            case 'accumulate'
                setAccParameters();
                
                if isempty(ad.acc.datasets)
                    return;
                end

                accDatasets = cell(length(ad.control.data.accumulated),1);
                for k=1:length(ad.control.data.accumulated)
                    accDatasets{k} = ...
                        ad.data{ad.control.data.accumulated(k)};
                end
                
                [accData,accReport] = trEPRACC(accDatasets,ad.acc);
                
                if ~isempty(accData)
                    % Add note to accReport if accumulation was successful
                    accReport = [...
                        accReport{1:2}...
                        {...
                        'PLEASE NOTE: Your accumulated data will be written'...
                        'to the main GUI when you close this window, NOT BEFORE.'...
                        ' '...
                        }...
                        accReport{3:end}...
                        ];
                    ad.acc.data = accData;
                else
                    ad.acc.data = [];
                end
                setappdata(mainWindow,'acc',ad.acc);
                
                set(gh.summary_panel_edit,'String',accReport);
                
                % Plot accumulated dataset
                updateAxes();
                
                % Update slider panel
                updateSliderPanel()
                
                % Update results panel dimension panel
                updateDimensionPanel('Results');
                
                return;
            case 'reportSave'
                if ~isfield(ad.acc,'data') || isempty(ad.acc.data)
                    return;
                end
                [fpath,fname,~] = fileparts(ad.data{ad.acc.master}.file.name);
                reportSaveFile = sprintf('%s-ACCreport.txt',...
                    fullfile(fpath,fname));
                [fname,fpath] = uiputfile('*.txt',...
                    'Select file to save ACC report to',reportSaveFile);
                if ~isempty(fname)
                    report = get(gh.summary_panel_edit,'String');
                    % Remove message about the acc dataset getting written to the main
                    % GUI only when pressing the "Close" button
                    report(3:5) = [];
                    status = textFileWrite(fullfile(fpath,fname),report);
                    clear report;
                    if ~isempty(status)
                        trEPRmsg(status);
                    end
                end
                return;
            case 'Apply'
                setAccParameters();
                
                if isempty(ad.acc.datasets)
                    return;
                end

                accDatasets = cell(length(ad.control.data.accumulated),1);
                for k=1:length(ad.control.data.accumulated)
                    accDatasets{k} = ...
                        ad.data{ad.control.data.accumulated(k)};
                end
                
                [accData,accReport] = trEPRACC(accDatasets,ad.acc);
                
                if ~isempty(accData)
                    % Add note to accReport if accumulation was successful
                    accReport = [...
                        accReport{1:2}...
                        {...
                        'PLEASE NOTE: Your accumulated data will be written'...
                        'to the main GUI when you close this window, NOT BEFORE.'...
                        ' '...
                        }...
                        accReport{3:end}...
                        ];
                    ad.acc.data = accData;
                else
                    ad.acc.data = [];
                end
                setappdata(mainWindow,'acc',ad.acc);
                
                set(gh.summary_panel_edit,'String',accReport);
                
                % Plot accumulated dataset
                updateAxes();
                
                % Update slider panel
                updateSliderPanel()
                
                % Update results panel dimension panel
                updateDimensionPanel('Results');
                
                return;
            case 'Discard'
                ad.acc.data = [];
                setappdata(mainWindow,'acc',ad.acc);
                
                set(gh.summary_panel_edit,'String',...
                    'Accumulated data discarded');
                
                % Update main axes
                updateAxes();

                % Update slider panel
                updateSliderPanel()
                
                % Update Dimensions Panel
                updateDimensionPanel('Results');

                return;
            case 'Close'
                % Add accData to main GUI
                if isfield(ad.acc,'data') && ~isempty(ad.acc.data)
                    msgStr = {...
                        'Datasets have been successfully accumulated.'...
                        'Now trying to append accumulated data to main GUI.'...
                        };
                    trEPRmsg(msgStr,'info');
                    % Add accData to main GUI
                    status = trEPRappendDatasetToMainGUI(...
                        ad.acc.data,'modified',true);
                    if status
                        msgStr = ['Hmm... some problems with appending '...
                            'accumulated dataset to main GUI.'];
                        trEPRmsg(msgStr,'error');
                    end
                else
                    msgStr = {...
                        'No datasets have been successfully accumulated. '...
                        'Alternatively, user discarded accumulation.'...
                        'Therefore, no dataset added.'
                        };
                    trEPRmsg(msgStr,'info');
                end

                % Look for ACC GUI Help window and if its there, close as
                % well
                hHelpWindow = findobj('Tag','trEPRgui_ACC_helpwindow');
                if ishandle(hHelpWindow)
                    delete(hHelpWindow);
                end
                delete(trEPRguiGetWindowHandle(mfilename));
                trEPRmsg('ACC GUI window closed.','debug');
            otherwise
                trEPRoptionUnknown(action);
                return;
        end
    catch exception
        trEPRexceptionHandling(exception)
    end
end

function popupmenu_Callback(source,~,action)
    try
        if isempty(action)
            return;
        end
        
        % Get appdata of main window
        ad = getappdata(hMainFigure);

        % Get handles of main window
        gh = guihandles(hMainFigure);
        
        switch action
            case 'displaytype'
                displayTypes = cellstr(get(source,'String'));
                ad.control.axis.displayType = ...
                    displayTypes{get(source,'Value')};
                
                % Set appdata of main window
                setappdata(hMainFigure,'control',ad.control);
                
                % If no datasets are loaded, return
                % NOTE: As we return only here, the display type gets set
                % for later 
                if isempty(ad.data)
                    return;
                end
                
                switch ad.control.axis.displayType
                    case '2D plot'
                        set(gh.slider,'Enable','Off');
                        updateAxes()
                    case '1D along x'
                        set(gh.slider,'Enable','On');
                        updateAxes()
                    case '1D along y'
                        set(gh.slider,'Enable','On');
                        updateAxes()
                    otherwise
                        % unknown
                        return;
                end
            case 'accumulationmethod'
                accumulationMethods = cellstr(get(source,'String'));
                accumulationMethod = accumulationMethods{get(source,'Value')};
                
                switch accumulationMethod
                    case 'weighted'
                        set(gh.weights_min_edit,...
                            'Enable','On');
                        set(gh.weights_max_edit,...
                            'Enable','On');
                    otherwise
                        set(gh.weights_min_edit,...
                            'Enable','Off');
                        set(gh.weights_max_edit,...
                            'Enable','Off');
                end
            otherwise
                trEPRoptionUnknown(action);
                return;
        end
    catch exception
        trEPRexceptionHandling(exception)
    end
end

function keypress_Callback(src,evt)
    try
        if isempty(evt.Character) && isempty(evt.Key)
            % In case "Character" is the empty string, i.e. only modifier
            % key was pressed...
            return;
        end
        mainWindow = trEPRguiGetWindowHandle(mfilename);
        % Get appdata from ACC GUI
        ad = getappdata(mainWindow);
        if ~isempty(evt.Modifier)
            if (strcmpi(evt.Modifier{1},'command')) || ...
                    (strcmpi(evt.Modifier{1},'control'))
                switch evt.Key
                    case 'w'
                        pushbutton_Callback(src,evt,'Close')
                        return;
                    case '1'
                        switchPanel('Datasets');
                        return;
                    case '2'
                        switchPanel('Accumulate');
                        return;
                    case '3'
                        switchPanel('Settings');
                        return;
                    case 'x'
                        ad.control.axis.displayType = '1D along x';
                        setappdata(mainWindow,'control',ad.control);
                        updateAxes();
                        return;
                    case 'y'
                        ad.control.axis.displayType = '1D along y';
                        setappdata(mainWindow,'control',ad.control);
                        updateAxes();
                        return;
                    case 'z'
                        ad.control.axis.displayType = '2D plot';
                        setappdata(mainWindow,'control',ad.control);
                        updateAxes();
                        return;
                end
            end
        end
        switch evt.Key
            case 'f1'
                trEPRgui_ACC_helpwindow();
                return;
            otherwise
%                 disp(evt);
%                 fprintf('       Caller: %i\n\n',src);
                return;
        end
    catch exception
        trEPRexceptionHandling(exception)
    end
end


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%  Utility functions
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

function switchPanel(panelName)
    try
        panels = [pp1 pp2 pp3];
        buttons = [tb1 tb2 tb3];
        switch panelName
            case 'Datasets'
                set(panels,'Visible','off');
                set(buttons,'Value',0);
                set(pp1,'Visible','on');
                set(tb1,'Value',1);
            case 'Accumulate'
                set(panels,'Visible','off');
                set(buttons,'Value',0);
                set(pp2,'Visible','on');
                set(tb2,'Value',1);
            case 'Settings'
                set(panels,'Visible','off');
                set(buttons,'Value',0);
                set(pp3,'Visible','on');
                set(tb3,'Value',1);
            otherwise
                trEPRoptionUnknown(panelName,'panel');
        end
    catch exception
        trEPRexceptionHandling(exception)
    end 
end

function updateDimensionPanel(panel)
    try
        if isempty(panel)
            return;
        end
        
        mainWindow = trEPRguiGetWindowHandle(mfilename);
        % Get appdata from ACC GUI
        ad = getappdata(mainWindow);

        % Get handles from main window
        gh = guidata(mainWindow);
        
        if isempty(ad.data)
            return;
        end
        
        switch panel
            case 'Datasets'
                if isempty(ad.control.data.active) || ...
                        (ad.control.data.active == 0)
                    set(findall(...
                        allchild(gh.dataset_dimensions_panel),...
                        'Style','Edit'),'String','1');
                else
                    [ydim,xdim] = size(ad.data{ad.control.data.active}.data);
                    set(gh.dataset_dimensions_size_x_edit,'String',...
                        num2str(xdim));
                    set(gh.dataset_dimensions_size_y_edit,'String',...
                        num2str(ydim));
                    set(gh.dataset_dimensions_min_x_edit,'String',...
                        num2str(ad.data{ad.control.data.active}.axes.x.values(1)));
                    set(gh.dataset_dimensions_min_y_edit,'String',...
                        num2str(ad.data{ad.control.data.active}.axes.y.values(1)));
                    set(gh.dataset_dimensions_max_x_edit,'String',...
                        num2str(ad.data{ad.control.data.active}.axes.x.values(end)));
                    set(gh.dataset_dimensions_max_y_edit,'String',...
                        num2str(ad.data{ad.control.data.active}.axes.y.values(end)));
                    set(gh.dataset_dimensions_step_x_edit,'String',...
                        num2str(ad.data{ad.control.data.active}.axes.x.values(2)-...
                        ad.data{ad.control.data.active}.axes.x.values(1)));
                    if ydim > 1
                        set(gh.dataset_dimensions_step_y_edit,'String',...
                            num2str(ad.data{ad.control.data.active}.axes.y.values(2)-...
                            ad.data{ad.control.data.active}.axes.y.values(1)));
                    else
                        set(gh.dataset_dimensions_step_y_edit,'String','0');
                    end
                end
                return
            case 'Results'
                if isempty(ad.acc.data)
                    set(findall(...
                        allchild(gh.accdimensions_panel),...
                        'Style','Edit'),'String','1');
                else
                    [ydim,xdim] = size(ad.acc.data.data);
                    set(gh.accdimensions_size_x_edit,'String',...
                        num2str(xdim));
                    set(gh.accdimensions_size_y_edit,'String',...
                        num2str(ydim));
                    set(gh.accdimensions_min_x_edit,'String',...
                        num2str(ad.acc.data.axes.x.values(1)));
                    set(gh.accdimensions_min_y_edit,'String',...
                        num2str(ad.acc.data.axes.y.values(1)));
                    set(gh.accdimensions_max_x_edit,'String',...
                        num2str(ad.acc.data.axes.x.values(end)));
                    set(gh.accdimensions_max_y_edit,'String',...
                        num2str(ad.acc.data.axes.y.values(end)));
                    set(gh.accdimensions_step_x_edit,'String',...
                        num2str(ad.acc.data.axes.x.values(2)-...
                        ad.acc.data.axes.x.values(1)));
                    if ydim > 1
                        set(gh.accdimensions_step_y_edit,...
                            'String',...
                            num2str(ad.acc.data.axes.y.values(2)-...
                            ad.acc.data.axes.y.values(1)));
                    else
                        set(gh.accdimensions_step_y_edit,...
                            'String','0');
                    end
                end
            otherwise
                % Default
        end
    catch exception
        trEPRexceptionHandling(exception)
    end 
end

function updateSpectra()
    try
        mainWindow = trEPRguiGetWindowHandle(mfilename);
        % Get appdata from ACC GUI
        ad = getappdata(mainWindow);
        
        if isempty(ad.data)
            return;
        end
        
        % Get handle for (not) accumulated spectra listbox
        gh = guidata(mainWindow);
        naccLbox = gh.notaccumulated_listbox;
        accLbox = gh.accumulated_listbox;
        
        % Get indices of (in)visible spectra
        acc = ad.control.data.accumulated;
        nacc = ad.control.data.notaccumulated;
        
        % Get names for display in listbox
        if ~isempty(acc)
            set(accLbox,'Enable','on');
            accLabels = cell(0);
            for k=1:length(acc)
                accLabels{k} = ad.data{acc(k)}.label;
            end
            % Update status display
            set(accLbox,'String',accLabels);
            if (get(accLbox,'Value')>length(acc))
                set(accLbox,'Value',length(acc));
            end
            if ((get(accLbox,'Value')==0) && (~isempty(acc)))
                set(accLbox,'Value',1);
            end
            ad.control.data.active = acc(get(accLbox,'Value'));
            % Set string for "master dataset" popupmenu
            masterDatasetString = accLabels{1};
            if length(acc)>1
                for k=2:(length(acc))
                    masterDatasetString = sprintf(...
                        '%s|%s',...
                        masterDatasetString,...
                        accLabels{k}...
                        );
                end
            end
            set(gh.master_popupmenu,'String',masterDatasetString);
            set(gh.master_popupmenu,...
                'Value',find(acc==ad.control.data.active));
            set(gh.master_popupmenu,'Enable','on');
            % Set label for accumulated data
            set(gh.label_edit,'String',sprintf('%s (ACC)',...
                ad.data{ad.control.data.active}.label));
        else
            set(accLbox,'String','');
            set(accLbox,'Enable','off');
            ad.control.data.active = [];
            set(gh.master_popupmenu,'String','none');
            set(gh.master_popupmenu,'Value',1);
            set(gh.master_popupmenu,'Enable','off');
        end
        if ~isempty(nacc)
            set(naccLbox,'Enable','on');
            naccLabels = cell(0);
            for k=1:length(nacc)
                naccLabels{k} = ad.data{nacc(k)}.label;
            end
            % Update status display
            set(naccLbox,'String',naccLabels);
            if (get(naccLbox,'Value')>length(nacc))
                set(naccLbox,'Value',length(nacc));
            end
            if ((get(naccLbox,'Value')==0) && (~isempty(nacc)))
                set(naccLbox,'Value',1);
            end
        else
            set(naccLbox,'String','');
            set(naccLbox,'Enable','off');
        end
        
        % Highlight currently active
        if ad.control.data.active
            set(accLbox,'Value',find(acc==ad.control.data.active));
        end
        
        % Set appdata of ACC GUI
        setappdata(mainWindow,'control',ad.control);

    catch exception
        trEPRexceptionHandling(exception)
    end 
end

function updateSliderPanel()
    try
        mainWindow = trEPRguiGetWindowHandle(mfilename);
        % Get appdata from ACC GUI
        ad = getappdata(mainWindow);
        
        % Get handles of main window
        gh = guihandles(mainWindow);
        
        if ~isfield(ad.acc,'data') || isempty(ad.acc.data) || ...
                ~isfield(ad,'data') || isempty(ad.data)
            set(findall(...
                allchild(gh.position_panel),...
                'Style','Edit'),'String','1');
            return;
        end

        % Get dimensions and axes of current dataset
        [y,x] = size(ad.data{ad.control.data.active}.data);
        x = linspace(1,x,x);
        y = linspace(1,y,y);
        if (isfield(ad.data{ad.control.data.active},'axes') ...
                && isfield(ad.data{ad.control.data.active}.axes,'x') ...
                && isfield(ad.data{ad.control.data.active}.axes.x,'values') ...
                && not (isempty(ad.data{ad.control.data.active}.axes.x.values)))
            x = ad.data{ad.control.data.active}.axes.x.values;
        end
        if (isfield(ad.data{ad.control.data.active},'axes') ...
                && isfield(ad.data{ad.control.data.active}.axes,'y') ...
                && isfield(ad.data{ad.control.data.active}.axes.y,'values') ...
                && not (isempty(ad.data{ad.control.data.active}.axes.y.values)))
            y = ad.data{ad.control.data.active}.axes.y.values;
        end
        % In case that we loaded 1D data...
        if isscalar(x)
            x = [x x+1];
        end
        if isscalar(y)
            y = [y y+1];
        end
        
        % update position panel
        if isfield(ad.acc,'data') && ~isempty(ad.acc.data)
            set(...
                gh.position_x_index_edit,...
                'string',...
                ad.acc.data.display.position.x...
                );
            set(...
                gh.position_x_unit_edit,...
                'string',...
                x(ad.acc.data.display.position.x)...
                );
            set(...
                gh.position_y_index_edit,...
                'string',...
                ad.acc.data.display.position.y...
                );
            set(...
                gh.position_y_unit_edit,...
                'string',...
                y(ad.acc.data.display.position.y)...
                );
        end
    catch exception
        trEPRexceptionHandling(exception)
    end
end

function updateAxes()
    try
        mainWindow = trEPRguiGetWindowHandle(mfilename);
        % Get appdata from ACC GUI
        ad = getappdata(mainWindow);
        
        % Get handles from main window
        gh = guidata(mainWindow);
        
        % Set displayType popupmenu
        displayTypes = cellstr(...
            get(gh.displaytype_popupmenu,'String'));
        [~,index] = max(strcmp(ad.control.axis.displayType,displayTypes));
        set(gh.displaytype_popupmenu,'Value',index);
        
        % Set display only active checkbox
        set(gh.showonlyactive_checkbox,'Value',...
            ad.control.axis.onlyActive);

        % If there are no data at all, neither accumulated nor to
        % accumulate, don't show anything
        if (~isfield(ad.acc,'data') || isempty(ad.acc.data)) && ...
                isempty(ad.control.data.accumulated)
            cla(gca,'reset');
            return;
        end

        % In case that there are accumulated data, just show those
        if isfield(ad.acc,'data') && ~isempty(ad.acc.data)
            
            % Be as robust as possible: if there is no axes, default is
            % indices 
            [y,x] = size(ad.acc.data.data);
            x = linspace(1,x,x);
            y = linspace(1,y,y);
            if (isfield(ad.acc.data,'axes') ...
                    && isfield(ad.acc.data.axes,'x') ...
                    && isfield(ad.acc.data.axes.x,'values') ...
                    && not (isempty(ad.acc.data.axes.x.values)))
                x = ad.acc.data.axes.x.values;
            end
            if (isfield(ad.acc.data,'axes') ...
                    && isfield(ad.acc.data.axes,'y') ...
                    && isfield(ad.acc.data.axes.y,'values') ...
                    && not (isempty(ad.acc.data.axes.y.values)))
                y = ad.acc.data.axes.y.values;
            end
            
            switch ad.control.axis.displayType
                case '2D plot'
                    imagesc(...
                        x,...
                        y,...
                        ad.acc.data.data...
                        );
                    set(gca,'YDir','normal');
                    % Plot axis labels
                    % TODO: Check whether it is save to rely on measure/unit
                    %       from the accumulated dataset
                    xlabel(gca,...
                        sprintf('{\\it %s} / %s',...
                        ad.acc.data.axes.x.measure,...
                        ad.acc.data.axes.x.unit));
                    ylabel(gca,...
                        sprintf('{\\it %s} / %s',...
                        ad.acc.data.axes.y.measure,...
                        ad.acc.data.axes.y.unit));
                case '1D along x'
                    % Enable position slider only if second axis has more
                    % than one value 
                    if (length(y)>1)
                        set(gh.slider,...
                            'Enable','on',...
                            'Min',1,'Max',length(y),...
                            'SliderStep',[1/(length(y)) 10/(length(y))],...
                            'Value',ad.acc.data.display.position.y...
                            );
                    else
                        set(gh.slider,...
                            'Enable','off'...
                            );
                    end
                    % Do the actual plotting
                    cla reset;
                    x = size(ad.acc.data.data,2);
                    x = linspace(1,x,x);
                    if (isfield(ad.acc.data,'axes') ...
                            && isfield(ad.acc.data.axes,'x') ...
                            && isfield(ad.acc.data.axes.x,'values') ...
                            && not (isempty(ad.acc.data.axes.x.values)))
                        x = ad.acc.data.axes.x.values;
                    end
                    y = ad.acc.data.data(...
                        ad.acc.data.display.position.y,...
                        :);
                    % In case that we loaded 1D data...
                    if isscalar(x)
                        x = [x x+1];
                    end
                    if isscalar(y)
                        y = [y y+1];
                    end
                    plot(...
                        x,...
                        y,...
                        'Color',ad.acc.data.line.color,...
                        'LineStyle',ad.acc.data.line.style,...
                        'Marker',ad.acc.data.line.marker.type,...
                        'LineWidth',ad.acc.data.line.width...
                        );
                    if (ad.control.axis.grid.zero)
                        line(...
                            [ad.control.axis.limits.x.min ...
                            ad.control.axis.limits.x.max],...
                            [0 0],...
                            'Color',[0.5 0.5 0.5],'LineStyle','--',...
                            'Parent',gca);
                    end
                    % Set limits of axis
                    set(gca,...
                        'XLim',[min(x) max(x)],...
                        'YLim',[min(min(ad.acc.data.data))*1.025 ...
                        max(max(ad.acc.data.data))*1.025]...
                        );
                    % Plot axis labels
                    xlabel(gca,...
                        sprintf('{\\it %s} / %s',...
                        ad.control.axis.labels.x.measure,...
                        ad.control.axis.labels.x.unit));
                    ylabel(gca,...
                        sprintf('{\\it %s} / %s',...
                        ad.control.axis.labels.z.measure,...
                        ad.control.axis.labels.z.unit));
                case '1D along y'
                    % Enable position slider only if second axis has more
                    % than one value 
                    if (length(x)>1)
                        set(gh.slider,...
                            'Enable','on',...
                            'Min',1,'Max',length(x),...
                            'SliderStep',[1/(length(x)) 10/(length(x))],...
                            'Value',ad.acc.data.display.position.x...
                            );
                    else
                        set(gh.slider,...
                            'Enable','off'...
                            );
                    end
                    % Do the actual plotting
                    cla reset;
                    y = size(ad.acc.data.data,1);
                    y = linspace(1,y,y);
                    if (isfield(ad.acc.data,'axes') ...
                            && isfield(ad.acc.data.axes,'y') ...
                            && isfield(ad.acc.data.axes.y,'values') ...
                            && not (isempty(ad.acc.data.axes.y.values)))
                        y = ad.acc.data.axes.y.values;
                    end
                    x = ad.acc.data.data(...
                        :,...
                        ad.acc.data.display.position.x...
                        );
                    % In case that we loaded 1D data...
                    if isscalar(x)
                        x = [x x+1];
                    end
                    if isscalar(y)
                        y = [y y+1];
                    end
                    plot(...
                        y,...
                        x,...
                        'Color',ad.acc.data.line.color,...
                        'LineStyle',ad.acc.data.line.style,...
                        'Marker',ad.acc.data.line.marker.type,...
                        'LineWidth',ad.acc.data.line.width...
                        );
                    if (ad.control.axis.grid.zero)
                        line(...
                            [ad.control.axis.limits.y.min ...
                            ad.control.axis.limits.y.max],...
                            [0 0],...
                            'Color',[0.5 0.5 0.5],'LineStyle','--',...
                            'Parent',gca);
                    end
                    set(gca,...
                        'XLim',[min(y) max(y)],...
                        'YLim',[min(min(ad.acc.data.data))*1.025 ...
                        max(max(ad.acc.data.data))*1.025]...
                        );
                    % Plot axis labels
                    xlabel(gca,...
                        sprintf('{\\it %s} / %s',...
                        ad.control.axis.labels.y.measure,...
                        ad.control.axis.labels.y.unit));
                    ylabel(gca,...
                        sprintf('{\\it %s} / %s',...
                        ad.control.axis.labels.z.measure,...
                        ad.control.axis.labels.z.unit));
                otherwise
                    trEPRoptionUnknown(ad.control.axis.displayType,...
                        'display type');
            end
            
        % In case that there are no accumulated data, but those to
        % accumulate, show those
        else
            active = ad.control.data.active;
            if isempty(active) || active == 0
                return;
            end
            
            % Be as robust as possible: if there is no axes, default is
            % indices 
            [y,x] = size(ad.data{active});
            x = linspace(1,x,x);
            y = linspace(1,y,y);
            if (isfield(ad.data{active},'axes') ...
                    && isfield(ad.data{active}.axes,'x') ...
                    && isfield(ad.data{active}.axes.x,'values') ...
                    && not (isempty(ad.data{active}.axes.x.values)))
                x = ad.data{active}.axes.x.values;
            end
            if (isfield(ad.data{active},'axes') ...
                    && isfield(ad.data{active}.axes,'y') ...
                    && isfield(ad.data{active}.axes.y,'values') ...
                    && not (isempty(ad.data{active}.axes.y.values)))
                y = ad.data{active}.axes.y.values;
            end
            
            switch ad.control.axis.displayType
                case '2D plot'
                    imagesc(...
                        x,...
                        y,...
                        ad.data{active}.data...
                        );
                    set(gca,'YDir','normal');
                    % Plot axis labels
                    % TODO: Check whether it is save to rely on measure/unit
                    %       from the accumulated dataset
                    xlabel(gca,...
                        sprintf('{\\it %s} / %s',...
                        ad.data{active}.axes.x.measure,...
                        ad.data{active}.axes.x.unit));
                    ylabel(gca,...
                        sprintf('{\\it %s} / %s',...
                        ad.data{active}.axes.y.measure,...
                        ad.data{active}.axes.y.unit));
                case '1D along x'
                    % Enable position slider only if second axis has more
                    % than one value 
                    if (length(y)>1)
                        set(gh.slider,...
                            'Enable','on',...
                            'Min',1,'Max',length(y),...
                            'SliderStep',[1/(length(y)) 10/(length(y))],...
                            'Value',ad.data{active}.display.position.y...
                            );
                    else
                        set(gh.slider,...
                            'Enable','off'...
                            );
                    end
                    % Do the actual plotting
                    cla reset;
                    hold on
                    if ad.control.axis.onlyActive
                        x = size(ad.data{active},2);
                        x = linspace(1,x,x);
                        if (isfield(ad.data{active},'axes') ...
                                && isfield(ad.data{active}.axes,'x') ...
                                && isfield(ad.data{active}.axes.x,'values') ...
                                && not (isempty(ad.data{active}.axes.x.values)))
                            x = ad.data{active}.axes.x.values;
                        end
                        y = ad.data{active}.data(...
                            ad.data{active}.display.position.y,...
                            :);
                        % In case that we loaded 1D data...
                        if isscalar(x)
                            x = [x x+1];
                        end
                        if isscalar(y)
                            y = [y y+1];
                        end
                        plot(...
                            x,...
                            y,...
                            'Color',ad.data{active}.line.color,...
                            'LineStyle',ad.data{active}.line.style,...
                            'Marker',ad.data{active}.line.marker.type,...
                            'LineWidth',ad.data{active}.line.width...
                            );
                    else
                        for idx=1:length(ad.control.data.accumulated)
                            k = ad.control.data.accumulated(idx);
                            x = size(ad.data{k},2);
                            x = linspace(1,x,x);
                            if (isfield(ad.data{k},'axes') ...
                                    && isfield(ad.data{k}.axes,'x') ...
                                    && isfield(ad.data{k}.axes.x,'values') ...
                                    && not (isempty(ad.data{k}.axes.x.values)))
                                x = ad.data{k}.axes.x.values;
                            end
                            y = ad.data{k}.data(...
                                ad.data{k}.display.position.y,...
                                :);
                            % In case that we loaded 1D data...
                            if isscalar(x)
                                x = [x x+1]; %#ok<AGROW>
                            end
                            if isscalar(y)
                                y = [y y+1]; %#ok<AGROW>
                            end
                            currLine = plot(...
                                x,...
                                y,...
                                'Color',ad.data{k}.line.color,...
                                'LineStyle',ad.data{k}.line.style,...
                                'Marker',ad.data{k}.line.marker.type,...
                                'LineWidth',ad.data{k}.line.width...
                                );
                            if (k == active) && ...
                                    ~isempty(ad.control.axis.highlight.method)
                                set(currLine,...
                                    ad.control.axis.highlight.method,...
                                    ad.control.axis.highlight.value...
                                    );
                            end
                        end
                    end
                    if (ad.control.axis.grid.zero)
                        xlims = get(gca,'XLim');
                        plot(xlims,[0 0],...
                            'Color',[0.5 0.5 0.5],'LineStyle','--');
                    end
                    hold off;
                    % Set limits of axis
                    set(gca,...
                        'XLim',[min(x) max(x)],...
                        'YLim',[min(min(ad.data{active}.data))*1.025 ...
                        max(max(ad.data{active}.data))*1.025]...
                        );
                    % Plot axis labels
                    if isempty(ad.data{active}.axes.x.unit)
                        xlabel(gca,...
                            sprintf('{\\it %s}',...
                            ad.data{active}.axes.x.measure));
                    else
                        xlabel(gca,...
                            sprintf('{\\it %s} / %s',...
                            ad.data{active}.axes.x.measure,...
                            ad.data{active}.axes.x.unit));
                    end
                    if isempty(ad.data{active}.axes.z.unit)
                        ylabel(gca,...
                            sprintf('{\\it %s}',...
                            ad.data{active}.axes.z.measure));
                    else
                        ylabel(gca,...
                            sprintf('{\\it %s} / %s',...
                            ad.data{active}.axes.z.measure,...
                            ad.data{active}.axes.z.unit));
                    end
                case '1D along y'
                    % Enable position slider only if second axis has more
                    % than one value 
                    if (length(x)>1)
                        set(gh.slider,...
                            'Enable','on',...
                            'Min',1,'Max',length(x),...
                            'SliderStep',[1/(length(x)) 10/(length(x))],...
                            'Value',ad.data{active}.display.position.x...
                            );
                    else
                        set(gh.slider,...
                            'Enable','off'...
                            );
                    end
                    % Do the actual plotting
                    cla reset;
                    hold on
                    if ad.control.axis.onlyActive
                        y = size(ad.data{active},1);
                        y = linspace(1,y,y);
                        if (isfield(ad.data{active},'axes') ...
                                && isfield(ad.data{active}.axes,'y') ...
                                && isfield(ad.data{active}.axes.y,'values') ...
                                && not (isempty(ad.data{active}.axes.y.values)))
                            y = ad.data{active}.axes.y.values;
                        end
                        x = ad.data{active}.data(...
                            :,...
                            ad.data{active}.display.position.x...
                            );
                        % In case that we loaded 1D data...
                        if isscalar(x)
                            x = [x x+1];
                        end
                        if isscalar(y)
                            y = [y y+1];
                        end
                        plot(...
                            y,...
                            x,...
                            'Color',ad.data{active}.line.color,...
                            'LineStyle',ad.data{active}.line.style,...
                            'Marker',ad.data{active}.line.marker.type,...
                            'LineWidth',ad.data{active}.line.width...
                            );
                    else
                        for idx=1:length(ad.control.data.accumulated)
                            k = ad.control.data.accumulated(idx);
                            y = size(ad.data{k},1);
                            y = linspace(1,y,y);
                            if (isfield(ad.data{k},'axes') ...
                                    && isfield(ad.data{k}.axes,'y') ...
                                    && isfield(ad.data{k}.axes.y,'values') ...
                                    && not (isempty(ad.data{k}.axes.y.values)))
                                y = ad.data{k}.axes.y.values;
                            end
                            x = ad.data{k}.data(...
                                :,...
                                ad.data{k}.display.position.x...
                                );
                            % In case that we loaded 1D data...
                            if isscalar(x)
                                x = [x x+1]; %#ok<AGROW>
                            end
                            if isscalar(y)
                                y = [y y+1]; %#ok<AGROW>
                            end
                            currLine = plot(...
                                y,...
                                x,...
                                'Color',ad.data{k}.line.color,...
                                'LineStyle',ad.data{k}.line.style,...
                                'Marker',ad.data{k}.line.marker.type,...
                                'LineWidth',ad.data{k}.line.width...
                                );
                            if (k == active) && ...
                                    ~isempty(ad.control.axis.highlight.method)
                                set(currLine,...
                                    ad.control.axis.highlight.method,...
                                    ad.control.axis.highlight.value...
                                    );
                            end
                        end
                    end
                    if (ad.control.axis.grid.zero)
                        xlims = get(gca,'XLim');
                        plot(xlims,[0 0],...
                            'Color',[0.5 0.5 0.5],'LineStyle','--');
                    end
                    hold off;
                    set(gca,...
                        'XLim',[min(y) max(y)],...
                        'YLim',[min(min(ad.data{active}.data))*1.025 ...
                        max(max(ad.data{active}.data))*1.025]...
                        );
                    % Plot axis labels
                    if isempty(ad.data{active}.axes.y.unit)
                        xlabel(gca,...
                            sprintf('{\\it %s}',...
                            ad.data{active}.axes.y.measure));
                    else
                        xlabel(gca,...
                            sprintf('{\\it %s} / %s',...
                            ad.data{active}.axes.y.measure,...
                            ad.data{active}.axes.y.unit));
                    end
                    if isempty(ad.data{active}.axes.z.unit)
                        ylabel(gca,...
                            sprintf('{\\it %s}',...
                            ad.data{active}.axes.z.measure));
                    else
                        ylabel(gca,...
                            sprintf('{\\it %s} / %s',...
                            ad.data{active}.axes.z.measure,...
                            ad.data{active}.axes.z.unit));
                    end
                otherwise
                    trEPRoptionUnknown(ad.control.axis.displayType,...
                        'display type');
            end
        end
        
        % Set grid for main axis
        set(gh.axis,'XGrid',ad.control.axis.grid.x);
        set(gh.axis,'YGrid',ad.control.axis.grid.y);
        if (isequal(ad.control.axis.grid.x,'on'))
            set(gh.axis,'XMinorGrid',ad.control.axis.grid.minor);
        end
        if (isequal(ad.control.axis.grid.y,'on'))
            set(gh.axis,'YMinorGrid',ad.control.axis.grid.minor);
        end
        
    catch exception
        trEPRexceptionHandling(exception)
    end
end

function setAccParameters()
    try
        % Get appdata of main window
        mainWindow = trEPRguiGetWindowHandle(mfilename);
        ad = getappdata(mainWindow);
        
        if isempty(ad.control.data.accumulated)
            return;
        end
        
        % Get handles of main window
        gh = guihandles(mainWindow);
        
        % Ids of datasets to accumulate
        ad.acc.datasets = ad.control.data.accumulated;
        
        % Id of master dataset
        ad.acc.master = ad.control.data.accumulated(...
            get(gh.master_popupmenu,'Value'));
        
        % Accumulation method
        accMethods = ...
            cellstr(get(gh.accumulationmethod_popupmenu,'String'));
        ad.acc.method = accMethods{...
            get(gh.accumulationmethod_popupmenu,'Value')};
        
        % Interpolation method
        interpolationMethods = ...
            cellstr(get(gh.interpolationmethod_popupmenu,'String'));
        ad.acc.interpolation = interpolationMethods{...
            get(gh.interpolationmethod_popupmenu,'Value')};
        
        % Weights
        ad.acc.weights.min = ...
            str2double(get(gh.weights_min_edit,'String'));
        ad.acc.weights.max = ...
            str2double(get(gh.weights_max_edit,'String'));
        
        % Noise determination area
        % TODO: Fix handling of "end" - eventually don't get the string
        % here but set ad.acc.noise in the callback of the respective edits
        ad.acc.noise.x.min = ...
            str2double(get(gh.sn_x_min_edit,'String'));
        ad.acc.noise.x.max = ...
            str2double(get(gh.sn_x_max_edit,'String'));
        ad.acc.noise.y.min = ...
            str2double(get(gh.sn_y_min_edit,'String'));
        ad.acc.noise.y.max = ...
            str2double(get(gh.sn_y_max_edit,'String'));

        % Label of accumulated dataset
        ad.acc.label = get(gh.label_edit,'String');
        
        % Set appdata of ACC GUI
        setappdata(mainWindow,'acc',ad.acc);
    catch exception
        trEPRexceptionHandling(exception)
    end
end

end
