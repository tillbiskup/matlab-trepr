function varargout = trEPRgui_ACCwindow(varargin)
% TREPRGUI_ACCWINDOW Brief description of GUI.
%          Comments displayed at the command line in response 
%          to the help command. 

% (Leave a blank line following the help.)

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%  Construct the components
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% Make GUI effectively a singleton
singleton = findobj('Tag','trepr_gui_ACCwindow');
if (singleton)
    figure(singleton);
    varargout{1} = singleton;
    return;
end

%  Construct the components
hMainFigure = figure('Tag','trepr_gui_ACCwindow',...
    'Visible','off',...
    'Name','trEPR GUI : Accumulate (ACC) Window',...
    'Units','Pixels',...
    'Position',[30,50,800,670],...
    'Resize','off',...
    'NumberTitle','off', ...
    'KeyPressFcn',@keypress_Callback,...
    'Menu','none','Toolbar','none');

defaultBackground = get(hMainFigure,'Color');
mainPanelWidth = 260;
panel_size = 240;
guiSize = get(hMainFigure,'Position');
guiSize = guiSize([3,4]);

hPlotAxes = axes(...         % the axes for plotting selected plot
    'Tag','mainAxis',...
	'Parent', hMainFigure, ...
    'FontUnit','Pixel','Fontsize',12,...
    'Units', 'Pixels', ...
    'Position',[70 250 400 400]);
uicontrol('Tag','slider',...
    'Style', 'slider',...
	'Parent', hMainFigure, ...
    'Min',1,'Max',100,'Value',50,...
    'Position', [485 250 15 400],...
    'BackgroundColor',[1 1 1],...
    'TooltipString','',...
    'Enable','off',...
    'Callback', {@slider_Callback}...
    );

% Create button group, toggle buttons for switching btw. panels
hButtonGroup = uibuttongroup('Tag','mainButtonGroup',...
    'BackgroundColor',defaultBackground,...
    'BorderType','none',...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position', [guiSize(1)-mainPanelWidth-20 guiSize(2)-50 mainPanelWidth 30],...
    'Visible','on',...
    'SelectionChangeFcn',{@tbg_Callback});
tb1 = uicontrol('Tag','datasets_togglebutton',...
    'Style','Toggle',...
	'Parent', hButtonGroup, ...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'String','Datasets',...
    'TooltipString','Decide which datasets to accumulate',...
    'pos',[0 0 (mainPanelWidth)/3 30],...
    'Enable','on'...
    );
tb2 = uicontrol('Tag','settings_togglebutton',...
    'Style','Toggle',...
	'Parent', hButtonGroup, ...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'String','Settings',...
    'TooltipString','Set parameters for accumulation',...
    'pos',[mainPanelWidth/3 0 (mainPanelWidth)/3 30],...
    'Enable','on'...
    );
tb3 = uicontrol('Tag','results_togglebutton',...
    'Style','Toggle',...
	'Parent', hButtonGroup, ...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'String','Results',...
    'TooltipString','Show results of accumulation',...
    'pos',[mainPanelWidth/3*2 0 (mainPanelWidth)/3 30],...
    'Enable','on'...
    );

% Create (switchable and overlaying) main panels
pp1 = uipanel('Tag','dataset_panel',...
    'parent',hMainFigure,...
    'Title','Datasets',...
    'FontUnit','Pixel','Fontsize',12,...
    'FontWeight','bold',...
    'BackgroundColor',defaultBackground,...
    'Visible','on',...
    'Units','pixels',...
    'Position',[guiSize(1)-mainPanelWidth-20 70 mainPanelWidth 540]);

pp2 = uipanel('Tag','settings_panel',...
    'parent',hMainFigure,...
    'Title','Settings',...
    'FontUnit','Pixel','Fontsize',12,...
    'FontWeight','bold',...
    'BackgroundColor',defaultBackground,...
    'Visible','off',...
    'Units','pixels',...
    'Position',[guiSize(1)-mainPanelWidth-20 70 mainPanelWidth 540]);

pp3 = uipanel('Tag','results_panel',...
    'parent',hMainFigure,...
    'Title','Results',...
    'FontUnit','Pixel','Fontsize',12,...
    'FontWeight','bold',...
    'BackgroundColor',defaultBackground,...
    'Visible','off',...
    'Units','pixels',...
    'Position',[guiSize(1)-mainPanelWidth-20 70 mainPanelWidth 540]);

pp4 = uipanel('Tag','report_panel',...
    'parent',hMainFigure,...
    'Title','Report',...
    'FontUnit','Pixel','Fontsize',12,...
    'FontWeight','bold',...
    'BackgroundColor',defaultBackground,...
    'Visible','on',...
    'Units','pixels',...
    'Position',[20 20 guiSize(1)-mainPanelWidth-50 170]);

handle_p1 = uipanel('Tag','data_panel_notaccumulated_panel',...
    'Parent',pp1,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10 410 panel_size 100],...
    'Title','Not accumulated datasets'...
    );
uicontrol('Tag','data_panel_notaccumulated_listbox',...
    'Style','listbox',...
    'Parent',handle_p1,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10 10 panel_size-20 70],...
    'String',''...
    );

uicontrol('Tag','data_panel_add_pushbutton',...
    'Style','pushbutton',...
    'Parent',pp1,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10 370 70 30],...
    'String','Add',...
    'TooltipString','Add currently highlighted spectrum to list of accumulated spectra',...
    'Enable','off',...
    'Callback', {@data_pushbutton_Callback,'add'}...
    );
uicontrol('Tag','data_panel_remove_pushbutton',...
    'Style','pushbutton',...
    'Parent',pp1,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[180 370 70 30],...
    'String','Remove',...
    'TooltipString','Remove currently highlighted spectrum from list of accumulated spectra',...
    'Enable','off',...
    'Callback', {@data_pushbutton_Callback,'remove'}...
    );
uicontrol('Tag','data_panel_button_explanation',...
    'Style','text',...
    'Parent',pp1,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'HorizontalAlignment','Center',...
    'FontAngle','oblique',...
    'Position',[85 370 panel_size-150 20],...
    'String',{'Selected'}...
    );

handle_p2 = uipanel('Tag','data_panel_accumulated_panel',...
    'Parent',pp1,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10 260 panel_size 100],...
    'Title','Accumulated datasets'...
    );
uicontrol('Tag','data_panel_accumulated_listbox',...
    'Style','listbox',...
    'Parent',handle_p2,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10 10 panel_size-20 70],...
    'String','',...
    'Callback',{@accumulated_listbox_Callback}...
    );

handle_p3 = uipanel('Tag','data_panel_master_panel',...
    'Parent',pp1,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10 200 panel_size 50],...
    'Title','Master dataset'...
    );
uicontrol('Tag','data_panel_master_popupmenu',...
    'Style','popupmenu',...
    'Parent',handle_p3,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10 10 panel_size-20 20],...
    'String','Label of first dataset|Label of second dataset|Label of third dataset with a very long title because somebody was silly'...
    );

handle_p5 = uipanel('Tag','data_panel_dimensions_panel',...
    'Parent',pp1,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10 30 panel_size 160],...
    'Title','Dimensions'...
    );
uicontrol('Tag','data_panel_dimensions_x_text',...
    'Style','text',...
    'Parent',handle_p5,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[80 120 (panel_size-90)/2 25],...
    'String','x'...
    );
uicontrol('Tag','data_panel_dimensions_y_text',...
    'Style','text',...
    'Parent',handle_p5,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[80+(panel_size-90)/2 120 (panel_size-90)/2 25],...
    'String','y'...
    );
uicontrol('Tag','data_panel_dimensions_size_text',...
    'Style','text',...
    'Parent',handle_p5,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10 100 55 20],...
    'String','Size'...
    );
uicontrol('Tag','data_panel_dimensions_size_x_edit',...
    'Style','edit',...
    'Parent',handle_p5,...
    'BackgroundColor',[1 1 1],...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[80 100 (panel_size-90)/2 25],...
    'String','1',...
    'Enable','inactive'...
    );
uicontrol('Tag','data_panel_dimensions_size_y_edit',...
    'Style','edit',...
    'Parent',handle_p5,...
    'BackgroundColor',[1 1 1],...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[80+(panel_size-90)/2 100 (panel_size-90)/2 25],...
    'String','1',...
    'Enable','inactive'...
    );
uicontrol('Tag','data_panel_dimensions_min_text',...
    'Style','text',...
    'Parent',handle_p5,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10 70 55 20],...
    'String','Min'...
    );
uicontrol('Tag','data_panel_dimensions_min_x_edit',...
    'Style','edit',...
    'Parent',handle_p5,...
    'BackgroundColor',[1 1 1],...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[80 70 (panel_size-90)/2 25],...
    'String','1',...
    'Enable','inactive'...
    );
uicontrol('Tag','data_panel_dimensions_min_y_edit',...
    'Style','edit',...
    'Parent',handle_p5,...
    'BackgroundColor',[1 1 1],...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[80+(panel_size-90)/2 70 (panel_size-90)/2 25],...
    'String','1',...
    'Enable','inactive'...
    );
uicontrol('Tag','data_panel_dimensions_max_text',...
    'Style','text',...
    'Parent',handle_p5,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10 40 55 20],...
    'String','Max'...
    );
uicontrol('Tag','data_panel_dimensions_max_x_edit',...
    'Style','edit',...
    'Parent',handle_p5,...
    'BackgroundColor',[1 1 1],...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[80 40 (panel_size-90)/2 25],...
    'String','1',...
    'Enable','inactive'...
    );
uicontrol('Tag','data_panel_dimensions_max_y_edit',...
    'Style','edit',...
    'Parent',handle_p5,...
    'BackgroundColor',[1 1 1],...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[80+(panel_size-90)/2 40 (panel_size-90)/2 25],...
    'String','1',...
    'Enable','inactive'...
    );
uicontrol('Tag','data_panel_dimensions_step_text',...
    'Style','text',...
    'Parent',handle_p5,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10 10 55 20],...
    'String','Step'...
    );
uicontrol('Tag','data_panel_dimensions_step_x_edit',...
    'Style','edit',...
    'Parent',handle_p5,...
    'BackgroundColor',[1 1 1],...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[80 10 (panel_size-90)/2 25],...
    'String','1',...
    'Enable','inactive'...
    );
uicontrol('Tag','data_panel_dimensions_step_y_edit',...
    'Style','edit',...
    'Parent',handle_p5,...
    'BackgroundColor',[1 1 1],...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[80+(panel_size-90)/2 10 (panel_size-90)/2 25],...
    'String','1',...
    'Enable','inactive'...
    );

% elements for pp2
handle_p6 = uipanel('Tag','accumulation_panel',...
    'parent',pp2,...
    'Title','Accumulation method',...
    'FontUnit','Pixel','Fontsize',12,...
    'BackgroundColor',defaultBackground,...
    'Visible','on',...
    'Units','pixels',...
    'Position',[10 460 mainPanelWidth-20 50]);
uicontrol('Tag','accumulation_panel_method_popupmenu',...
    'Style','popupmenu',...
    'Parent',handle_p6,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10 10 panel_size-20 20],...
    'String','cumulative|weighted',...
    'Callback', {@accumulationmethod_popupmenu_Callback}...
    );

handle_p7 = uipanel('Tag','weighting_panel',...
    'parent',pp2,...
    'Title','Weighting',...
    'FontUnit','Pixel','Fontsize',12,...
    'BackgroundColor',defaultBackground,...
    'Visible','on',...
    'Units','pixels',...
    'Position',[10 340 panel_size 110]);
uicontrol('Tag','accumulation_panel_weighting_text',...
    'Style','text',...
    'Parent',handle_p7,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'HorizontalAlignment','Left',...
    'FontAngle','italic',...
    'Units','Pixels',...
    'Position',[10 60 panel_size-20 25],...
    'String','Weighting by S/N'...
    );
uicontrol('Tag','accumulation_panel_weights_min_text',...
    'Style','text',...
    'Parent',handle_p7,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[80 30 75 25],...
    'String','Min'...
    );
uicontrol('Tag','accumulation_panel_weights_max_text',...
    'Style','text',...
    'Parent',handle_p7,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[80+75 30 75 25],...
    'String','Max'...
    );
uicontrol('Tag','accumulation_panel_weights_text',...
    'Style','text',...
    'Parent',handle_p7,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'HorizontalAlignment','Left',...
    'Units','Pixels',...
    'Position',[10 10 65 20],...
    'String','Weights'...
    );
uicontrol('Tag','accumulation_panel_weights_min_edit',...
    'Style','edit',...
    'Parent',handle_p7,...
    'BackgroundColor',[1 1 1],...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[80 10 75 25],...
    'String','0.5',...
    'Enable','Off',...
    'Callback',{@position_edit_Callback,'weightsMin'}...
    );
uicontrol('Tag','accumulation_panel_weights_max_edit',...
    'Style','edit',...
    'Parent',handle_p7,...
    'BackgroundColor',[1 1 1],...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[80+75 10 75 25],...
    'String','2',...
    'Enable','Off',...
    'Callback',{@position_edit_Callback,'weightsMax'}...
    );

handle_p8 = uipanel('Tag','sn_panel',...
    'parent',pp2,...
    'Title','S/N determination',...
    'FontUnit','Pixel','Fontsize',12,...
    'BackgroundColor',defaultBackground,...
    'Visible','on',...
    'Units','pixels',...
    'Position',[10 130 panel_size 200]);
uicontrol('Tag','sn_panel_description_text',...
    'Style','text',...
    'Parent',handle_p8,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'HorizontalAlignment','Left',...
    'FontAngle','italic',...
    'Units','Pixels',...
    'Position',[10 130 panel_size-20 45],...
    'String','Area to determine noise amplitude from (indices of data array)'...
    );
uicontrol('Tag','sn_panel_min_text',...
    'Style','text',...
    'Parent',handle_p8,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[80 100 75 25],...
    'String','Min'...
    );
uicontrol('Tag','sn_panel_max_text',...
    'Style','text',...
    'Parent',handle_p8,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[80+75 100 75 25],...
    'String','Max'...
    );
uicontrol('Tag','sn_panel_x_text',...
    'Style','text',...
    'Parent',handle_p8,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10 80 55 20],...
    'String','x'...
    );
uicontrol('Tag','sn_panel_x_min_edit',...
    'Style','edit',...
    'Parent',handle_p8,...
    'BackgroundColor',[1 1 1],...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[80 80 (panel_size-90)/2 25],...
    'String','1',...
    'Callback',{@sn_edit_Callback,'xmin'}...
    );
uicontrol('Tag','sn_panel_x_max_edit',...
    'Style','edit',...
    'Parent',handle_p8,...
    'BackgroundColor',[1 1 1],...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[80+(panel_size-90)/2 80 (panel_size-90)/2 25],...
    'String','1',...
    'Callback',{@sn_edit_Callback,'xmax'}...
    );
uicontrol('Tag','sn_panel_y_text',...
    'Style','text',...
    'Parent',handle_p8,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10 50 55 20],...
    'String','y'...
    );
uicontrol('Tag','sn_panel_y_min_edit',...
    'Style','edit',...
    'Parent',handle_p8,...
    'BackgroundColor',[1 1 1],...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[80 50 (panel_size-90)/2 25],...
    'String','1',...
    'Callback',{@sn_edit_Callback,'ymin'}...
    );
uicontrol('Tag','sn_panel_y_max_edit',...
    'Style','edit',...
    'Parent',handle_p8,...
    'BackgroundColor',[1 1 1],...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[80+(panel_size-90)/2 50 (panel_size-90)/2 25],...
    'String','1',...
    'Callback',{@sn_edit_Callback,'ymax'}...
    );
uicontrol('Tag','sn_panel_description2_text',...
    'Style','text',...
    'Parent',handle_p8,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'HorizontalAlignment','Left',...
    'FontAngle','italic',...
    'Units','Pixels',...
    'Position',[10 10 panel_size-20 20],...
    'String','signal = max(data)-min(data)'...
    );

handle_p9 = uipanel('Tag','interpolation_panel',...
    'parent',pp2,...
    'Title','Interpolation method',...
    'FontUnit','Pixel','Fontsize',12,...
    'BackgroundColor',defaultBackground,...
    'Visible','on',...
    'Units','pixels',...
    'Position',[10 70 mainPanelWidth-20 50]);
uicontrol('Tag','interpolation_panel_method_popupmenu',...
    'Style','popupmenu',...
    'Parent',handle_p9,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10 10 panel_size-20 20],...
    'String','none|linear|spline|cubic'...
    );

% controls for pp3
handle_p10 = uipanel('Tag','results_panel_displaytype_panel',...
    'Parent',pp3,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10 460 mainPanelWidth-20 50],...
    'Title','Display type'...
    );
uicontrol('Tag','results_panel_displaytype_popupmenu',...
    'Style','popupmenu',...
    'Parent',handle_p10,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10 10 panel_size-20 20],...
    'String','2D plot|1D along x|1D along y',...
    'Callback', {@displaytype_popupmenu_Callback}...
    );

handle_p11 = uipanel('Tag','results_panel_position_panel',...
    'Parent',pp3,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10 340 panel_size 110],...
    'Title','Slider position'...
    );
uicontrol('Tag','results_panel_position_index_text',...
    'Style','text',...
    'Parent',handle_p11,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[80 60 (panel_size-90)/2 25],...
    'String','index'...
    );
uicontrol('Tag','results_panel_position_unit_text',...
    'Style','text',...
    'Parent',handle_p11,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[80+(panel_size-90)/2 60 (panel_size-90)/2 25],...
    'String','unit'...
    );
uicontrol('Tag','results_panel_position_x_text',...
    'Style','text',...
    'Parent',handle_p11,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10 40 55 20],...
    'String','x'...
    );
uicontrol('Tag','results_panel_position_x_index_edit',...
    'Style','edit',...
    'Parent',handle_p11,...
    'BackgroundColor',[1 1 1],...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[80 40 (panel_size-90)/2 25],...
    'String','1',...
    'Callback',{@position_edit_Callback,'xindex'}...
    );
uicontrol('Tag','results_panel_position_x_unit_edit',...
    'Style','edit',...
    'Parent',handle_p11,...
    'BackgroundColor',[1 1 1],...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[80+(panel_size-90)/2 40 (panel_size-90)/2 25],...
    'String','1',...
    'Callback',{@position_edit_Callback,'xunit'}...
    );
uicontrol('Tag','results_panel_position_y_text',...
    'Style','text',...
    'Parent',handle_p11,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10 10 55 20],...
    'String','y'...
    );
uicontrol('Tag','results_panel_position_y_index_edit',...
    'Style','edit',...
    'Parent',handle_p11,...
    'BackgroundColor',[1 1 1],...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[80 10 (panel_size-90)/2 25],...
    'String','1',...
    'Callback',{@position_edit_Callback,'yindex'}...
    );
uicontrol('Tag','results_panel_position_y_unit_edit',...
    'Style','edit',...
    'Parent',handle_p11,...
    'BackgroundColor',[1 1 1],...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[80+(panel_size-90)/2 10 (panel_size-90)/2 25],...
    'String','1',...
    'Callback',{@position_edit_Callback,'yunit'}...
    );

handle_p12 = uipanel('Tag','results_panel_dimensions_panel',...
    'Parent',pp3,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10 170 panel_size 160],...
    'Title','Dimensions'...
    );
uicontrol('Tag','results_panel_dimensions_x_text',...
    'Style','text',...
    'Parent',handle_p12,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[80 120 (panel_size-90)/2 25],...
    'String','x'...
    );
uicontrol('Tag','results_panel_dimensions_y_text',...
    'Style','text',...
    'Parent',handle_p12,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[80+(panel_size-90)/2 120 (panel_size-90)/2 25],...
    'String','y'...
    );
uicontrol('Tag','results_panel_dimensions_size_text',...
    'Style','text',...
    'Parent',handle_p12,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10 100 55 20],...
    'String','Size'...
    );
uicontrol('Tag','results_panel_dimensions_size_x_edit',...
    'Style','edit',...
    'Parent',handle_p12,...
    'BackgroundColor',[1 1 1],...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[80 100 (panel_size-90)/2 25],...
    'String','1',...
    'Enable','inactive'...
    );
uicontrol('Tag','results_panel_dimensions_size_y_edit',...
    'Style','edit',...
    'Parent',handle_p12,...
    'BackgroundColor',[1 1 1],...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[80+(panel_size-90)/2 100 (panel_size-90)/2 25],...
    'String','1',...
    'Enable','inactive'...
    );
uicontrol('Tag','results_panel_dimensions_min_text',...
    'Style','text',...
    'Parent',handle_p12,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10 70 55 20],...
    'String','Min'...
    );
uicontrol('Tag','results_panel_dimensions_min_x_edit',...
    'Style','edit',...
    'Parent',handle_p12,...
    'BackgroundColor',[1 1 1],...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[80 70 (panel_size-90)/2 25],...
    'String','1',...
    'Enable','inactive'...
    );
uicontrol('Tag','results_panel_dimensions_min_y_edit',...
    'Style','edit',...
    'Parent',handle_p12,...
    'BackgroundColor',[1 1 1],...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[80+(panel_size-90)/2 70 (panel_size-90)/2 25],...
    'String','1',...
    'Enable','inactive'...
    );
uicontrol('Tag','results_panel_dimensions_max_text',...
    'Style','text',...
    'Parent',handle_p12,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10 40 55 20],...
    'String','Max'...
    );
uicontrol('Tag','results_panel_dimensions_max_x_edit',...
    'Style','edit',...
    'Parent',handle_p12,...
    'BackgroundColor',[1 1 1],...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[80 40 (panel_size-90)/2 25],...
    'String','1',...
    'Enable','inactive'...
    );
uicontrol('Tag','results_panel_dimensions_max_y_edit',...
    'Style','edit',...
    'Parent',handle_p12,...
    'BackgroundColor',[1 1 1],...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[80+(panel_size-90)/2 40 (panel_size-90)/2 25],...
    'String','1',...
    'Enable','inactive'...
    );
uicontrol('Tag','results_panel_dimensions_step_text',...
    'Style','text',...
    'Parent',handle_p12,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10 10 55 20],...
    'String','Step'...
    );
uicontrol('Tag','results_panel_dimensions_step_x_edit',...
    'Style','edit',...
    'Parent',handle_p12,...
    'BackgroundColor',[1 1 1],...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[80 10 (panel_size-90)/2 25],...
    'String','1',...
    'Enable','inactive'...
    );
uicontrol('Tag','results_panel_dimensions_step_y_edit',...
    'Style','edit',...
    'Parent',handle_p12,...
    'BackgroundColor',[1 1 1],...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[80+(panel_size-90)/2 10 (panel_size-90)/2 25],...
    'String','1',...
    'Enable','inactive'...
    );

handle_p13 = uipanel('Tag','results_panel_label_panel',...
    'Parent',pp3,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10 100 panel_size 60],...
    'Title','Label for new dataset'...
    );
uicontrol('Tag','results_panel_label_edit',...
    'Style','edit',...
    'Parent',handle_p13,...
    'BackgroundColor',[1 1 1],...
    'FontUnit','Pixel','Fontsize',12,...
    'HorizontalAlignment','Left',...
    'Units','Pixels',...
    'Position',[10 10 panel_size-20 25],...
    'String','Labelstring'...
    );

handle_p14 = uipanel('Tag','results_panel_report_panel',...
    'Parent',pp3,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'Units','Pixels',...
    'Position',[10 30 panel_size 60],...
    'Title','Report'...
    );
uicontrol('Tag','results_panel_report_text',...
    'Style','text',...
    'Parent',handle_p14,...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'HorizontalAlignment','left',...
    'FontAngle','italic',...
    'Units','Pixels',...
    'Position',[10 10 (panel_size-20)/3*2 20],...
    'String','For text see left'...
    );
uicontrol('Tag','results_panel_report_save_pushbutton',...
    'Style','pushbutton',...
	'Parent',handle_p14, ...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'String','Save',...
    'TooltipString','Save report shown on the left to text file',...
    'pos',[((panel_size-20)/3*2)+10 10 (panel_size-20)/3 30],...
    'Enable','on',...
    'Callback',{@report_save_pushbutton_Callback}...
    );

reportPanelSize = get(pp4,'Position');
uicontrol('Tag','summary_panel_edit',...
    'Style','edit',...
    'Parent',pp4,...
    'BackgroundColor',[1 1 1],...
    'Units','Pixels',...
    'FontUnit','Pixel','Fontsize',12,...
    'FontName','FixedWidth',...
    'HorizontalAlignment','Left',...
    'Position',[10 10 reportPanelSize(3)-20 reportPanelSize(4)-40],...
    'Enable','inactive',...
    'Max',2,'Min',0,...
    'String','Nothing to report yet...');

uicontrol('Tag','help_pushbutton',...
    'Style','pushbutton',...
	'Parent', hMainFigure, ...
    'BackgroundColor',defaultBackground,...
    'ForegroundColor',[0 0 1],...
    'FontUnit','Pixel','Fontsize',12,...
    'FontWeight','bold',...
    'String','?',...
    'TooltipString','Display help for how to operate the accumulation GUI',...
    'pos',[panel_size*2+5 200 25 25],...
    'Enable','on',...
    'Callback',@trEPRgui_ACC_helpwindow...
    );

uicontrol('Tag','apply_pushbutton',...
    'Style','pushbutton',...
	'Parent', hMainFigure, ...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'String','Apply',...
    'TooltipString','Apply current settings (perform actual accumulation)',...
    'pos',[guiSize(1)-mainPanelWidth-20 20 (mainPanelWidth)/3 40],...
    'Enable','on',...
    'Callback',{@pushbutton_Callback,'Apply'}...
    );
uicontrol('Tag','discard_pushbutton',...
    'Style','pushbutton',...
	'Parent', hMainFigure, ...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'String','Discard',...
    'TooltipString','Discard last performed accumulation',...
    'pos',[guiSize(1)-((mainPanelWidth)/3*2)-20 20 (mainPanelWidth)/3 40],...
    'Enable','on',...
    'Callback',{@pushbutton_Callback,'Discard'}...
    );
uicontrol('Tag','close_pushbutton',...
    'Style','pushbutton',...
	'Parent', hMainFigure, ...
    'BackgroundColor',defaultBackground,...
    'FontUnit','Pixel','Fontsize',12,...
    'String','Close',...
    'TooltipString','Close ACC GUI (and transfer accumulated dataset to main GUI, if any)',...
    'pos',[guiSize(1)-((mainPanelWidth)/3)-20 20 (mainPanelWidth)/3 40],...
    'Enable','on',...
    'Callback',{@pushbutton_Callback,'Close'}...
    );

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%  Initialization tasks
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% Store handles in guidata
guidata(hMainFigure,guihandles);

% Create appdata structure
ad = struct();
% data - empty cell array
ad.data = cell(0);
% origdata - empty cell array
ad.origdata = cell(0);
% configuration - struct
ad.configuration = struct();
ad.configuration.fit.area.left = 10;
ad.configuration.fit.area.right = 10;
ad.configuration.fit.area.back = 10;
ad.configuration.fit.point(1).active = false;
ad.configuration.fit.point(1).position = [];
ad.configuration.fit.point(2).active = false;
ad.configuration.fit.point(2).position = [];
% control - struct
ad.control = struct();
% control.status - empty struct
ad.control.status = cell(0);
% control.spectra - struct
ad.control.spectra = struct();
ad.control.spectra.active = 0;
ad.control.spectra.notaccumulated = [];
ad.control.spectra.accumulated = [];
ad.control.spectra.modified = [];
ad.control.spectra.missing = [];
% control.axis - struct
ad.control.axis = struct();
ad.control.axis.grid = struct();
ad.control.axis.grid.zero = true;
ad.control.axis.limits = struct();
ad.control.axis.limits.auto = true;
ad.control.axis.limits.x = struct();
ad.control.axis.limits.x.min = 0;
ad.control.axis.limits.x.max = 1;
ad.control.axis.limits.y = struct();
ad.control.axis.limits.y.min = 0;
ad.control.axis.limits.y.max = 1;
ad.control.axis.limits.z = struct();
ad.control.axis.limits.z.min = 0;
ad.control.axis.limits.z.max = 1;
ad.control.axis.normalisation = 'none';
ad.control.axis.displayType = '2D plot';
% acc - struct
ad.acc = struct();
ad.acc.datasets = [];
ad.acc.master = [];
ad.acc.method = '';
ad.acc.weights.min = 1;
ad.acc.weights.max = 1;
ad.acc.noise.x.min = 1;
ad.acc.noise.x.max = 1;
ad.acc.noise.y.min = 1;
ad.acc.noise.y.max = 1;
ad.acc.interpolation = '';
ad.acc.label = '';

setappdata(hMainFigure,'data',ad.data);
setappdata(hMainFigure,'origdata',ad.origdata);
setappdata(hMainFigure,'configuration',ad.configuration);
setappdata(hMainFigure,'control',ad.control);
setappdata(hMainFigure,'acc',ad.acc);

% Make the GUI visible.
set(hMainFigure,'Visible','on');

% Load data from Main GUI
mainGuiWindow = findobj('Tag','trepr_gui_mainwindow');
if (mainGuiWindow)
    admain = getappdata(mainGuiWindow);
    % Check for availability of necessary fields in appdata
    if (isfield(admain,'data') ~= 0)
        ad.data = admain.data;
        setappdata(hMainFigure,'data',ad.data);
        ad.origdata = admain.data;
        setappdata(hMainFigure,'origdata',ad.origdata);
    end
    if (isfield(admain,'control') ~= 0)
        ad.control = admain.control;
        % Move (in)visible -> (not)accumulated
        ad.control.spectra.accumulated = admain.control.spectra.visible;
        ad.control.spectra.notaccumulated = admain.control.spectra.invisible;
        ad.control.spectra = rmfield(ad.control.spectra,'visible');
        ad.control.spectra = rmfield(ad.control.spectra,'invisible');
        setappdata(hMainFigure,'control',ad.control);
    end
    
    % Apply scaling and displacement to spectra
    % TODO: - Scaling
    %       - Frequency correction when displacing along the field axis...!
    for k=1:length(ad.data)
        % Handle displacement along all three axes
        if (ad.data{k}.display.displacement.x ~= 0)
            % Get axis stepping
            xStep = ad.data{k}.axes.x.values(2)-ad.data{k}.axes.x.values(1);
            % Set new axes values
            ad.data{k}.axes.x.values = ad.data{k}.axes.x.values + ...
                (xStep*ad.data{k}.display.displacement.x);
        end
        if (ad.data{k}.display.displacement.y ~= 0)
            % Get axis stepping
            yStep = ad.data{k}.axes.y.values(2)-ad.data{k}.axes.y.values(1);
            % Set new axes values
            ad.data{k}.axes.y.values = ad.data{k}.axes.y.values + ...
                (yStep*ad.data{k}.display.displacement.y);
        end
        if (ad.data{k}.display.displacement.z ~= 0)
            ad.data{k}.data = ...
                ad.data{k}.data + ad.data{k}.display.displacement.z;
        end
        % Handle scaling along all three axes
        if (ad.data{k}.display.scaling.x ~= 0)
        end
        if (ad.data{k}.display.scaling.y ~= 0)
        end
        if (ad.data{k}.display.scaling.z ~= 0)
        end
        % set appdata
        setappdata(hMainFigure,'data',ad.data);
    end
    
    updateSpectra();
    updateDimensionPanel('Datasets');
%     update_position_display();
end

%updateAxes();

if (nargout == 1)
    varargout{1} = hMainFigure;
end
    
% Display splash
try
    set(hMainFigure,'CurrentAxes',hPlotAxes);
    splash = imread(fullfile(trEPRtoolboxdir,...
        'GUI','private','splashes','ACCGUISplash.png'),'png');
    image(splash);
    axis off          % Remove axis ticks and numbers
catch exception
    % If this happens, something probably more serious went wrong...
    throw(exception);
end

% Add keypress function to every element that can have one...
handles = findall(...
    allchild(hMainFigure),'style','pushbutton',...
    '-or','style','togglebutton',...
    '-or','style','edit',...
    '-or','style','listbox',...
    '-or','style','popupmenu');
for k=1:length(handles)
    set(handles(k),'KeyPressFcn',@keypress_Callback);
end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%  Callbacks
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

function tbg_Callback(source,~)
    try 
        switchPanel(get(get(source,'SelectedObject'),'String'));
    catch exception
        try
            msgStr = ['An exception occurred. '...
                'The bug reporter should have been opened'];
            add2status(msgStr);
        catch exception2
            exception = addCause(exception2, exception);
            disp(msgStr);
        end
        try
            trEPRgui_bugreportwindow(exception);
        catch exception3
            % If even displaying the bug report window fails...
            exception = addCause(exception3, exception);
            throw(exception);
        end
    end
end

function slider_Callback(source,~)
    try
        % Get appdata of main window
        mainWindow = guiGetWindowHandle('trEPRgui_ACC');
        ad = getappdata(mainWindow);
        
        % Depending on display type settings
        switch ad.control.axis.displayType
            case '1D along x'
                ad.acc.data.display.position.y = ...
                    int16(get(source,'Value'));
            case '1D along y'
                ad.acc.data.display.position.x = ...
                    int16(get(source,'Value'));
            otherwise
                msg = sprintf('Display type %s currently unsupported',displayType);
                add2status(msg);
        end
        
        % Update appdata of main window
        setappdata(mainWindow,'acc',ad.acc);
        
        % Update slider panel
        updateSliderPanel()
        
        %Update main axis
        updateAxes();
    catch exception
        try
            msgStr = ['An exception occurred. '...
                'The bug reporter should have been opened'];
            add2status(msgStr);
        catch exception2
            exception = addCause(exception2, exception);
            disp(msgStr);
        end
        try
            trEPRgui_bugreportwindow(exception);
        catch exception3
            % If even displaying the bug report window fails...
            exception = addCause(exception3, exception);
            throw(exception);
        end
    end
end

function accumulated_listbox_Callback(source,~)
    try
        % Get appdata of main window
        mainWindow = guiGetWindowHandle('trEPRgui_ACC');
        ad = getappdata(mainWindow);
        
        % Get handles of main window
        gh = guihandles(mainWindow);
        
        ad.control.spectra.active = ad.control.spectra.accumulated(...
            get(gh.data_panel_accumulated_listbox,'Value')...
            );
        
        % Update appdata of main window
        setappdata(mainWindow,'control',ad.control);
        
        % Update datasets dimension panel
        updateDimensionPanel('Datasets');
    catch exception
        try
            msgStr = ['An exception occurred. '...
                'The bug reporter should have been opened'];
            add2status(msgStr);
        catch exception2
            exception = addCause(exception2, exception);
            disp(msgStr);
        end
        try
            trEPRgui_bugreportwindow(exception);
        catch exception3
            % If even displaying the bug report window fails...
            exception = addCause(exception3, exception);
            throw(exception);
        end
    end
end

function position_edit_Callback(source,~,position)
    try
        if isempty(position) || ~isfield(ad.acc,'data') || ...
                isempty(ad.acc.data)
            return;
        end
        
        % If value is empty or NaN after conversion to numeric, restore
        % previous entry and return
        if (isempty(get(source,'String')) || isnan(str2double(get(source,'String'))))
            % Update slider panel
            updateSliderPanel();
            return;
        end
        
        % Get appdata of ACC GUI
        mainWindow = guiGetWindowHandle('trEPRgui_ACC');
        ad = getappdata(mainWindow);
        
        % Be as robust as possible: if there is no axes, default is indices
        [y,x] = size(ad.data{ad.control.spectra.active}.data);
        x = linspace(1,x,x);
        y = linspace(1,y,y);
        if (isfield(ad.acc.data,'axes') ...
                && isfield(ad.acc.data.axes,'x') ...
                && isfield(ad.acc.data.axes.x,'values') ...
                && not (isempty(ad.acc.data.axes.x.values)))
            x = ad.acc.data.axes.x.values;
        end
        if (isfield(ad.acc.data,'axes') ...
                && isfield(ad.acc.data.axes,'y') ...
                && isfield(ad.acc.data.axes.y,'values') ...
                && not (isempty(ad.acc.data.axes.y.values)))
            y = ad.acc.data.axes.y.values;
        end
        
        switch position
            case 'xindex'
                value = round(str2double(get(source,'String')));
                if (value > length(x)) value = length(x); end
                if (value < 1) value = 1; end
                ad.acc.data.display.position.x = ...
                    value;
            case 'xunit'
                value = str2double(get(source,'String'));
                if (value < x(1)) value = x(1); end
                if (value > x(end)) value = x(end); end
                ad.acc.data.display.position.x = ...
                    interp1(...
                    x,[1:length(x)],...
                    value,...
                    'nearest'...
                    );
            case 'yindex'
                value = round(str2double(get(source,'String')));
                if (value > length(y)) value = length(y); end
                if (value < 1) value = 1; end
                ad.acc.data.display.position.y = ...
                    value;
            case 'yunit'
                value = str2double(get(source,'String'));
                if (value < y(1)) value = y(1); end
                if (value > y(end)) value = y(end); end
                ad.acc.data.display.position.y = ...
                    interp1(...
                    y,[1:length(y)],...
                    value,...
                    'nearest'...
                    );
            otherwise
                return;
        end
        
        % Update appdata of main window
        setappdata(mainWindow,'acc',ad.acc);
        
        % Update slider panel
        updateSliderPanel();
        
        %Update main axis
        updateAxes();
    catch exception
        try
            msgStr = ['An exception occurred. '...
                'The bug reporter should have been opened'];
            add2status(msgStr);
        catch exception2
            exception = addCause(exception2, exception);
            disp(msgStr);
        end
        try
            trEPRgui_bugreportwindow(exception);
        catch exception3
            % If even displaying the bug report window fails...
            exception = addCause(exception3, exception);
            throw(exception);
        end
    end
end

function sn_edit_Callback(~,~,position)
    try
        if isempty(position)
            return;
        end
        
        % Get appdata of main window
        mainWindow = guiGetWindowHandle('trEPRgui_ACC');
        ad = getappdata(mainWindow);
        
        % Get handles of main window
        gh = guihandles(mainWindow);

        % IDEA: If user types "end", replace that with the maximum index in
        % the respective dimension - would be a very convenient way for the
        % user to specify that one axis should be used from beginning to
        % end without needing to know how long this axis really is in terms
        % of indices.
        return;
    catch exception
        try
            msgStr = ['An exception occurred. '...
                'The bug reporter should have been opened'];
            add2status(msgStr);
        catch exception2
            exception = addCause(exception2, exception);
            disp(msgStr);
        end
        try
            trEPRgui_bugreportwindow(exception);
        catch exception3
            % If even displaying the bug report window fails...
            exception = addCause(exception3, exception);
            throw(exception);
        end
    end
end

function pushbutton_Callback(~,~,action)
    try
        if isempty(action)
            return;
        end
        
        switch action
            case 'Apply'
                setAccParameters();

                % Get appdata of main window
                mainWindow = guiGetWindowHandle('trEPRgui_ACC');
                ad = getappdata(mainWindow);
        
                % Get handles of main window
                gh = guihandles(mainWindow);
                
                accDatasets = cell(length(ad.control.spectra.accumulated),1);
                for k=1:length(ad.control.spectra.accumulated)
                    accDatasets{k} = ...
                        ad.data{ad.control.spectra.accumulated(k)};
                end
                
                [accData,accReport] = trEPRACC(accDatasets,ad.acc);
                
                if ~isempty(accData)
                    % Add note to accReport if accumulation was successful
                    accReport = [...
                        accReport{1:2}...
                        {...
                        'PLEASE NOTE: Your accumulated data will be written'...
                        'to the main GUI when you close this window, NOT BEFORE.'...
                        ' '...
                        }...
                        accReport{3:end}...
                        ];
                    ad.acc.data = accData;
                else
                    ad.acc.data = [];
                end
                setappdata(mainWindow,'acc',ad.acc);
                
                set(gh.summary_panel_edit,'String',accReport);
                
                % Plot accumulated dataset
                updateAxes();
                
                % Update slider panel
                updateSliderPanel()
                
                % Update results panel dimension panel
                updateDimensionPanel('Results');
                
                return;
            case 'Discard'
                % Get appdata of main window
                mainWindow = guiGetWindowHandle('trEPRgui_ACC');
                ad = getappdata(mainWindow);
                
                % Get handles of main window
                gh = guihandles(mainWindow);
                
                ad.acc.data = [];
                setappdata(mainWindow,'acc',ad.acc);
                
                set(gh.summary_panel_edit,'String',...
                    'Accumulated data discarded');
                
                % Update main axes
                updateAxes();

                % Update slider panel
                updateSliderPanel()
                
                % Update Dimensions Panel
                updateDimensionPanel('Results');

                return;
            case 'Close'
                % Get appdata of main window
                mainWindow = guiGetWindowHandle('trEPRgui_ACC');
                ad = getappdata(mainWindow);

                % TODO: Add accData to main GUI
                if isfield(ad.acc,'data') && ~isempty(ad.acc.data)
                    % Add accData to main GUI
                    status = appendDatasetToMainGUI(...
                        ad.acc.data,'modified',true);
                    if status
                        disp('Hmm... some problems with appending accumulated dataset to main GUI.');
                    end
                end

                % Look for ACC GUI Help window and if its there, close as
                % well
                hHelpWindow = findobj('Tag','trEPRgui_ACC_helpwindow');
                if ishandle(hHelpWindow)
                    delete(hHelpWindow);
                end
                delete(findobj('Tag','trepr_gui_ACCwindow'));
            otherwise
                return;
        end
    catch exception
        try
            msgStr = ['An exception occurred. '...
                'The bug reporter should have been opened'];
            add2status(msgStr);
        catch exception2
            exception = addCause(exception2, exception);
            disp(msgStr);
        end
        try
            trEPRgui_bugreportwindow(exception);
        catch exception3
            % If even displaying the bug report window fails...
            exception = addCause(exception3, exception);
            throw(exception);
        end
    end
end

function displaytype_popupmenu_Callback(source,~)
    try
        % Get appdata of main window
        ad = getappdata(hMainFigure);

        % Get handles of main window
        gh = guihandles(hMainFigure);
        
        displayTypes = cellstr(get(source,'String'));
        ad.control.axis.displayType = displayTypes{get(source,'Value')};
        
        % Get appdata of main window
        setappdata(hMainFigure,'control',ad.control);

        switch ad.control.axis.displayType
            case '2D plot'
                set(gh.slider,'Enable','Off');
                updateAxes()
            case '1D along x'
                set(gh.slider,'Enable','On');
                updateAxes()
            case '1D along y'
                set(gh.slider,'Enable','On');
                updateAxes()
            otherwise
                % unknown
                return;
        end
    catch exception
        try
            msgStr = ['An exception occurred. '...
                'The bug reporter should have been opened'];
            add2status(msgStr);
        catch exception2
            exception = addCause(exception2, exception);
            disp(msgStr);
        end
        try
            trEPRgui_bugreportwindow(exception);
        catch exception3
            % If even displaying the bug report window fails...
            exception = addCause(exception3, exception);
            throw(exception);
        end
    end
end

function data_pushbutton_Callback(~,~,action)
    try
        if isempty(action)
            return;
        end
        
        mainWindow = findobj('Tag','trepr_gui_ACCwindow');
        % Get appdata from ACC GUI
        ad = getappdata(mainWindow);
        
        % Get handles of main window
        gh = guihandles(mainWindow);
        
        switch action
            case 'add'
                if isempty(ad.control.spectra.notaccumulated)
                    return;
                end
                selected = get(gh.data_panel_notaccumulated_listbox,'Value');
                ad.control.spectra.accumulated(end+1) = ...
                    ad.control.spectra.notaccumulated(selected);
                ad.control.spectra.notaccumulated(selected) = [];
                % Set appdata
                setappdata(mainWindow,'control',ad.control);
                updateSpectra();
                updateDimensionPanel('Datasets');
            case 'remove'
                if isempty(ad.control.spectra.accumulated)
                    return;
                end
                selected = get(gh.data_panel_accumulated_listbox,'Value');
                ad.control.spectra.notaccumulated(end+1) = ...
                    ad.control.spectra.accumulated(selected);
                ad.control.spectra.accumulated(selected) = [];
                % Set appdata
                setappdata(mainWindow,'control',ad.control);
                updateSpectra();
                updateDimensionPanel('Datasets');
            otherwise
                % unknown action
                return;
        end
    catch exception
        try
            msgStr = ['An exception occurred. '...
                'The bug reporter should have been opened'];
            add2status(msgStr);
        catch exception2
            exception = addCause(exception2, exception);
            disp(msgStr);
        end
        try
            trEPRgui_bugreportwindow(exception);
        catch exception3
            % If even displaying the bug report window fails...
            exception = addCause(exception3, exception);
            throw(exception);
        end
    end
end

function accumulationmethod_popupmenu_Callback(source,~)
    try
        % Get handles of main window
        gh = guihandles(hMainFigure);
        
        accumulationMethods = cellstr(get(source,'String'));
        accumulationMethod = accumulationMethods{get(source,'Value')};
        
        switch accumulationMethod
            case 'weighted'
                set(gh.accumulation_panel_weights_min_edit,'Enable','On');
                set(gh.accumulation_panel_weights_max_edit,'Enable','On');
            otherwise
                set(gh.accumulation_panel_weights_min_edit,'Enable','Off');
                set(gh.accumulation_panel_weights_max_edit,'Enable','Off');                
        end
    catch exception
        try
            msgStr = ['An exception occurred. '...
                'The bug reporter should have been opened'];
            add2status(msgStr);
        catch exception2
            exception = addCause(exception2, exception);
            disp(msgStr);
        end
        try
            trEPRgui_bugreportwindow(exception);
        catch exception3
            % If even displaying the bug report window fails...
            exception = addCause(exception3, exception);
            throw(exception);
        end
    end
end

function keypress_Callback(src,evt)
    try
        if isempty(evt.Character) && isempty(evt.Key)
            % In case "Character" is the empty string, i.e. only modifier key
            % was pressed...
            return;
        end
        if ~isempty(evt.Modifier)
            if (strcmpi(evt.Modifier{1},'command')) || ...
                    (strcmpi(evt.Modifier{1},'control'))
                switch evt.Key
                    case 'w'
                        pushbutton_Callback(src,evt,'Close')
                        return;
                    case '1'
                        switchPanel('Datasets');
                        return;
                    case '2'
                        switchPanel('Settings');
                        return;
                    case '3'
                        switchPanel('Results');
                        return;
                end
            end
        end
        switch evt.Key
            case 'f1'
                trEPRgui_ACC_helpwindow();
                return;
            otherwise
%                 disp(evt);
%                 fprintf('       Caller: %i\n\n',src);
                return;
        end
    catch exception
        try
            msgStr = ['An exception occurred. '...
                'The bug reporter should have been opened'];
            add2status(msgStr);
        catch exception2
            exception = addCause(exception2, exception);
            disp(msgStr);
        end
        try
            trEPRgui_bugreportwindow(exception);
        catch exception3
            % If even displaying the bug report window fails...
            exception = addCause(exception3, exception);
            throw(exception);
        end
    end
end

function report_save_pushbutton_Callback(~,~)
    try
        % Get appdata of main window
        ad = getappdata(hMainFigure);

        % Get handles of main window
        gh = guihandles(hMainFigure);
        
        % If we don't have the necessary parameters, silently return
        if ~isfield(ad.acc,'data') || isempty(ad.acc.data)
            return;
        end
        
        % Set default filename
        defaultFileName = sprintf('%s-%s.txt',...
            strrep(ad.acc.data.label,' ','_'),...
            datestr(now,30));
        % Open file selection dialogue
        [FileName,PathName] = uiputfile(...
            '*.txt','Select file to save the accumulation report to',...
            defaultFileName);
        % Check whether user hit "Cancel" and if so, return
        if isequal(FileName,0) || isequal(PathName,0)
            return;
        end
        % Save to text file
        fid = fopen(fullfile(PathName,FileName),'w+');
        if (fid == -1)
            msgText = [...
                'Error while trying to save accumulation report. '...
                'Cannot write to file '...
                fullfile(PathName,FileName)...
                ];
            msgbox(msgText,'Cannot write file','error');
            return;
        end
        report = get(gh.summary_panel_edit,'String');
        % Remove message about the acc dataset getting written to the main
        % GUI only when pressing the "Close" button
        report(3:5) = [];
        for k=1:length(report)
            fprintf(fid,'%s\n',report{k});
        end
        fclose(fid);
    catch exception
        try
            msgStr = ['An exception occurred. '...
                'The bug reporter should have been opened'];
            add2status(msgStr);
        catch exception2
            exception = addCause(exception2, exception);
            disp(msgStr);
        end
        try
            trEPRgui_bugreportwindow(exception);
        catch exception3
            % If even displaying the bug report window fails...
            exception = addCause(exception3, exception);
            throw(exception);
        end
    end
end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%  Utility functions
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

function switchPanel(panelName)
    try
        panels = [pp1 pp2 pp3];
        buttons = [tb1 tb2 tb3];
        switch panelName
            case 'Datasets'
                set(panels,'Visible','off');
                set(buttons,'Value',0);
                set(pp1,'Visible','on');
                set(tb1,'Value',1);
            case 'Settings'
                set(panels,'Visible','off');
                set(buttons,'Value',0);
                set(pp2,'Visible','on');
                set(tb2,'Value',1);
            case 'Results'
                set(panels,'Visible','off');
                set(buttons,'Value',0);
                set(pp3,'Visible','on');
                set(tb3,'Value',1);
            otherwise
        end
    catch exception
        try
            msgStr = ['An exception occurred. '...
                'The bug reporter should have been opened'];
            add2status(msgStr);
        catch exception2
            exception = addCause(exception2, exception);
            disp(msgStr);
        end
        try
            trEPRgui_bugreportwindow(exception);
        catch exception3
            % If even displaying the bug report window fails...
            exception = addCause(exception3, exception);
            throw(exception);
        end
    end 
end

function updateDimensionPanel(panel)
    try
        if isempty(panel)
            return;
        end
        
        mainWindow = findobj('Tag','trepr_gui_ACCwindow');
        % Get appdata from ACC GUI
        ad = getappdata(mainWindow);

        % Get handles from main window
        gh = guidata(mainWindow);
        
        if isempty(ad.data)
            return;
        end
        
        switch panel
            case 'Datasets'
                if isempty(ad.control.spectra.active) || ...
                        (ad.control.spectra.active == 0)
                    set(findall(...
                        allchild(gh.data_panel_dimensions_panel),...
                        'Style','Edit'),'String','1');
                else
                    [ydim,xdim] = size(ad.data{ad.control.spectra.active}.data);
                    set(gh.data_panel_dimensions_size_x_edit,'String',...
                        num2str(xdim));
                    set(gh.data_panel_dimensions_size_y_edit,'String',...
                        num2str(ydim));
                    set(gh.data_panel_dimensions_min_x_edit,'String',...
                        num2str(ad.data{ad.control.spectra.active}.axes.x.values(1)));
                    set(gh.data_panel_dimensions_min_y_edit,'String',...
                        num2str(ad.data{ad.control.spectra.active}.axes.y.values(1)));
                    set(gh.data_panel_dimensions_max_x_edit,'String',...
                        num2str(ad.data{ad.control.spectra.active}.axes.x.values(end)));
                    set(gh.data_panel_dimensions_max_y_edit,'String',...
                        num2str(ad.data{ad.control.spectra.active}.axes.y.values(end)));
                    set(gh.data_panel_dimensions_step_x_edit,'String',...
                        num2str(ad.data{ad.control.spectra.active}.axes.x.values(2)-...
                        ad.data{ad.control.spectra.active}.axes.x.values(1)));
                    set(gh.data_panel_dimensions_step_y_edit,'String',...
                        num2str(ad.data{ad.control.spectra.active}.axes.y.values(2)-...
                        ad.data{ad.control.spectra.active}.axes.y.values(1)));
                end
                return
            case 'Results'
                if isempty(ad.acc.data)
                    set(findall(...
                        allchild(gh.results_panel_dimensions_panel),...
                        'Style','Edit'),'String','1');
                else
                    [ydim,xdim] = size(ad.acc.data.data);
                    set(gh.results_panel_dimensions_size_x_edit,'String',...
                        num2str(xdim));
                    set(gh.results_panel_dimensions_size_y_edit,'String',...
                        num2str(ydim));
                    set(gh.results_panel_dimensions_min_x_edit,'String',...
                        num2str(ad.acc.data.axes.x.values(1)));
                    set(gh.results_panel_dimensions_min_y_edit,'String',...
                        num2str(ad.acc.data.axes.y.values(1)));
                    set(gh.results_panel_dimensions_max_x_edit,'String',...
                        num2str(ad.acc.data.axes.x.values(end)));
                    set(gh.results_panel_dimensions_max_y_edit,'String',...
                        num2str(ad.acc.data.axes.y.values(end)));
                    set(gh.results_panel_dimensions_step_x_edit,'String',...
                        num2str(ad.acc.data.axes.x.values(2)-...
                        ad.acc.data.axes.x.values(1)));
                    set(gh.results_panel_dimensions_step_y_edit,'String',...
                        num2str(ad.acc.data.axes.y.values(2)-...
                        ad.acc.data.axes.y.values(1)));
                end
            otherwise
                % Default
        end
    catch exception
        try
            msgStr = ['An exception occurred. '...
                'The bug reporter should have been opened'];
            add2status(msgStr);
        catch exception2
            exception = addCause(exception2, exception);
            disp(msgStr);
        end
        try
            trEPRgui_bugreportwindow(exception);
        catch exception3
            % If even displaying the bug report window fails...
            exception = addCause(exception3, exception);
            throw(exception);
        end
    end 
end

function updateSpectra()
    try
        mainWindow = findobj('Tag','trepr_gui_ACCwindow');
        % Get appdata from ACC GUI
        ad = getappdata(mainWindow);
        
        if isempty(ad.data)
            return;
        end
        
        % Get handle for (not) accumulated spectra listbox
        gh = guidata(mainWindow);
        naccLbox = gh.data_panel_notaccumulated_listbox;
        accLbox = gh.data_panel_accumulated_listbox;
        
        % Get indices of (in)visible spectra
        acc = ad.control.spectra.accumulated;
        nacc = ad.control.spectra.notaccumulated;
        
        % Get names for display in listbox
        if length(acc)>0
            set(accLbox,'Enable','on');
            accLabels = cell(0);
            for k=1:length(acc)
                accLabels{k} = ad.data{acc(k)}.label;
            end
            % Update status display
            set(accLbox,'String',accLabels);
            if (get(accLbox,'Value')>length(acc))
                set(accLbox,'Value',length(acc));
            end
            if ((get(accLbox,'Value')==0) && (length(acc)>0))
                set(accLbox,'Value',1);
            end
            ad.control.spectra.active = acc(get(accLbox,'Value'));
            % Set string for "master dataset" popupmenu
            masterDatasetString = accLabels{1};
            if length(acc)>1
                for k=2:(length(acc))
                    masterDatasetString = sprintf(...
                        '%s|%s',...
                        masterDatasetString,...
                        accLabels{k}...
                        );
                end
            end
            set(gh.data_panel_master_popupmenu,'String',masterDatasetString);
            set(gh.data_panel_master_popupmenu,...
                'Value',find(acc==ad.control.spectra.active));
            set(gh.data_panel_master_popupmenu,'Enable','on');
            % Set label for accumulated data
            set(gh.results_panel_label_edit,'String',sprintf('%s (ACC)',...
                ad.data{ad.control.spectra.active}.label));
        else
            set(accLbox,'String','');
            set(accLbox,'Enable','off');
            ad.control.spectra.active = [];
            set(gh.data_panel_master_popupmenu,'String','none');
            set(gh.data_panel_master_popupmenu,'Value',1);
            set(gh.data_panel_master_popupmenu,'Enable','off');
        end
        if length(nacc)>0
            set(naccLbox,'Enable','on');
            naccLabels = cell(0);
            for k=1:length(nacc)
                naccLabels{k} = ad.data{nacc(k)}.label;
            end
            % Update status display
            set(naccLbox,'String',naccLabels);
            if (get(naccLbox,'Value')>length(nacc))
                set(naccLbox,'Value',length(nacc));
            end
            if ((get(naccLbox,'Value')==0) && (length(nacc)>0))
                set(naccLbox,'Value',1);
            end
        else
            set(naccLbox,'String','');
            set(naccLbox,'Enable','off');
        end
        
        % Highlight currently active
        if ad.control.spectra.active
            set(accLbox,'Value',find(acc==ad.control.spectra.active));
        end
        
        % Enable add/remove buttons
        if (length(acc)>0)
            set(gh.data_panel_remove_pushbutton,'Enable','on');
        else
            set(gh.data_panel_remove_pushbutton,'Enable','off');
        end
        if (length(nacc)>0)
            set(gh.data_panel_add_pushbutton,'Enable','on');
        else
            set(gh.data_panel_add_pushbutton,'Enable','off');
        end
        
        % Set appdata of ACC GUI
        setappdata(mainWindow,'control',ad.control);

    catch exception
        try
            msgStr = ['An exception occurred. '...
                'The bug reporter should have been opened'];
            add2status(msgStr);
        catch exception2
            exception = addCause(exception2, exception);
            disp(msgStr);
        end
        try
            trEPRgui_bugreportwindow(exception);
        catch exception3
            % If even displaying the bug report window fails...
            exception = addCause(exception3, exception);
            throw(exception);
        end
    end 
end

function updateSliderPanel()
    try
        mainWindow = findobj('Tag','trepr_gui_ACCwindow');
        % Get appdata from ACC GUI
        ad = getappdata(mainWindow);
        
        % Get handles of main window
        gh = guihandles(mainWindow);
        
        if isempty(ad.acc.data)
            set(findall(...
                allchild(gh.results_panel_position_panel),...
                'Style','Edit'),'String','1');
            return;
        end

        % Get dimensions and axes of current dataset
        [y,x] = size(ad.data{ad.control.spectra.active}.data);
        x = linspace(1,x,x);
        y = linspace(1,y,y);
        if (isfield(ad.data{ad.control.spectra.active},'axes') ...
                && isfield(ad.data{ad.control.spectra.active}.axes,'x') ...
                && isfield(ad.data{ad.control.spectra.active}.axes.x,'values') ...
                && not (isempty(ad.data{ad.control.spectra.active}.axes.x.values)))
            x = ad.data{ad.control.spectra.active}.axes.x.values;
        end
        if (isfield(ad.data{ad.control.spectra.active},'axes') ...
                && isfield(ad.data{ad.control.spectra.active}.axes,'y') ...
                && isfield(ad.data{ad.control.spectra.active}.axes.y,'values') ...
                && not (isempty(ad.data{ad.control.spectra.active}.axes.y.values)))
            y = ad.data{ad.control.spectra.active}.axes.y.values;
        end
        % In case that we loaded 1D data...
        if isscalar(x)
            x = [x x+1];
        end
        if isscalar(y)
            y = [y y+1];
        end
        
        % update position panel
        set(...
            gh.results_panel_position_x_index_edit,...
            'string',...
            ad.acc.data.display.position.x...
            );
        set(...
            gh.results_panel_position_x_unit_edit,...
            'string',...
            x(ad.acc.data.display.position.x)...
            );
        set(...
            gh.results_panel_position_y_index_edit,...
            'string',...
            ad.acc.data.display.position.y...
            );
        set(...
            gh.results_panel_position_y_unit_edit,...
            'string',...
            y(ad.acc.data.display.position.y)...
            );
    catch exception
        try
            msgstr = ['an exception occurred. '...
                'the bug reporter should have been opened'];
            add2status(msgstr);
        catch exception2
            exception = addcause(exception2, exception);
            disp(msgstr);
        end
        try
            trEPRgui_bugreportwindow(exception);
        catch exception3
            % if even displaying the bug report window fails...
            exception = addcause(exception3, exception);
            throw(exception);
        end
    end
end

function updateAxes()
    try
        mainWindow = findobj('Tag','trepr_gui_ACCwindow');
        % Get appdata from ACC GUI
        ad = getappdata(mainWindow);
        
        % Get handles from main window
        gh = guidata(mainWindow);
        
        if isempty(ad.acc.data)
            % Display splash
            set(mainWindow,'CurrentAxes',gh.mainAxis);
            splash = imread(fullfile(trEPRtoolboxdir,...
                'GUI','private','splashes','ACCGUISplash.png'),'png');
            image(splash);
            axis off          % Remove axis ticks and numbers
            return;
        end
        
        % Be as robust as possible: if there is no axes, default is indices
        [y,x] = size(ad.acc.data.data);
        x = linspace(1,x,x);
        y = linspace(1,y,y);
        if (isfield(ad.acc.data,'axes') ...
                && isfield(ad.acc.data.axes,'x') ...
                && isfield(ad.acc.data.axes.x,'values') ...
                && not (isempty(ad.acc.data.axes.x.values)))
            x = ad.acc.data.axes.x.values;
        end
        if (isfield(ad.acc.data,'axes') ...
                && isfield(ad.acc.data.axes,'y') ...
                && isfield(ad.acc.data.axes.y,'values') ...
                && not (isempty(ad.acc.data.axes.y.values)))
            y = ad.acc.data.axes.y.values;
        end
                
        switch ad.control.axis.displayType
            case '2D plot'
                imagesc(...
                    x,...
                    y,...
                    ad.data{ad.control.spectra.active}.data...
                    );
                set(gca,'YDir','normal');
                % Plot axis labels
                % TODO: Check whether it is save to rely on measure/unit
                %       from the accumulated dataset
                xlabel(gca,...
                    sprintf('{\\it %s} / %s',...
                    ad.acc.data.axes.x.measure,...
                    ad.acc.data.axes.x.unit));
                ylabel(gca,...
                    sprintf('{\\it %s} / %s',...
                    ad.acc.data.axes.y.measure,...
                    ad.acc.data.axes.y.unit));
            case '1D along x'
                % Enable position slider only if second axis has more than one value
                if (length(y)>1)
                    set(gh.slider,...
                        'Enable','on',...
                        'Min',1,'Max',length(y),...
                        'SliderStep',[1/(length(y)) 10/(length(y))],...
                        'Value',ad.acc.data.display.position.y...
                        );
                else
                    set(gh.slider,...
                        'Enable','off'...
                        );
                end
                % Do the actual plotting
                cla reset;
                [y,x] = size(ad.acc.data.data);
                x = linspace(1,x,x);
                if (isfield(ad.acc.data,'axes') ...
                        && isfield(ad.acc.data.axes,'x') ...
                        && isfield(ad.acc.data.axes.x,'values') ...
                        && not (isempty(ad.acc.data.axes.x.values)))
                    x = ad.acc.data.axes.x.values;
                end
                y = ad.acc.data.data(...
                    ad.acc.data.display.position.y,...
                    :);
                % In case that we loaded 1D data...
                if isscalar(x)
                    x = [x x+1];
                end
                if isscalar(y)
                    y = [y y+1];
                end
                plot(...
                    x,...
                    y,...
                    'Color',ad.acc.data.line.color,...
                    'LineStyle',ad.acc.data.line.style,...
                    'Marker',ad.acc.data.line.marker,...
                    'LineWidth',ad.acc.data.line.width...
                    );
                if (ad.control.axis.grid.zero)
                    line(...
                        [ad.control.axis.limits.x.min ad.control.axis.limits.x.max],...
                        [0 0],...
                        'Color',[0.5 0.5 0.5],'LineStyle','--',...
                        'Parent',gca);
                end
                % Set limits of axis
                set(gca,...
                    'XLim',[min(x) max(x)],...
                    'YLim',[min(min(ad.acc.data.data))*1.025 ...
                    max(max(ad.acc.data.data))*1.025]...
                    );
                % Plot axis labels
                xlabel(gca,...
                    sprintf('{\\it %s} / %s',...
                    ad.control.axis.labels.x.measure,...
                    ad.control.axis.labels.x.unit));
                ylabel(gca,...
                    sprintf('{\\it %s} / %s',...
                    ad.control.axis.labels.z.measure,...
                    ad.control.axis.labels.z.unit));
            case '1D along y'
                % Enable position slider only if second axis has more than one value
                if (length(x)>1)
                    set(gh.slider,...
                        'Enable','on',...
                        'Min',1,'Max',length(x),...
                        'SliderStep',[1/(length(x)) 10/(length(x))],...
                        'Value',ad.acc.data.display.position.x...
                        );
                else
                    set(gh.slider,...
                        'Enable','off'...
                        );
                end
                % Do the actual plotting
                cla reset;
                [y,x] = size(ad.data{k}.data);
                y = linspace(1,y,y);
                if (isfield(ad.acc.data,'axes') ...
                        && isfield(ad.acc.data.axes,'y') ...
                        && isfield(ad.acc.data.axes.y,'values') ...
                        && not (isempty(ad.acc.data.axes.y.values)))
                    y = ad.acc.data.axes.y.values;
                end
                x = ad.acc.data.data(...
                    :,...
                    ad.acc.data.display.position.x...
                    );
                % In case that we loaded 1D data...
                if isscalar(x)
                    x = [x x+1];
                end
                if isscalar(y)
                    y = [y y+1];
                end
                plot(...
                    y,...
                    x,...
                    'Color',ad.acc.data.line.color,...
                    'LineStyle',ad.acc.data.line.style,...
                    'Marker',ad.acc.data.line.marker,...
                    'LineWidth',ad.acc.data.line.width...
                    );
                if (ad.control.axis.grid.zero)
                    line(...
                        [ad.control.axis.limits.y.min ad.control.axis.limits.y.max],...
                        [0 0],...
                        'Color',[0.5 0.5 0.5],'LineStyle','--',...
                        'Parent',gca);
                end
                set(gca,...
                    'XLim',[min(y) max(y)],...
                    'YLim',[min(min(ad.acc.data.data))*1.025 ...
                    max(max(ad.acc.data.data))*1.025]...
                    );
                % Plot axis labels
                xlabel(gca,...
                    sprintf('{\\it %s} / %s',...
                    ad.control.axis.labels.y.measure,...
                    ad.control.axis.labels.y.unit));
                ylabel(gca,...
                    sprintf('{\\it %s} / %s',...
                    ad.control.axis.labels.z.measure,...
                    ad.control.axis.labels.z.unit));
            otherwise
                % unknown
        end
        
    catch exception
        try
            msgStr = ['An exception occurred. '...
                'The bug reporter should have been opened'];
            add2status(msgStr);
        catch exception2
            exception = addCause(exception2, exception);
            disp(msgStr);
        end
        try
            trEPRgui_bugreportwindow(exception);
        catch exception3
            % If even displaying the bug report window fails...
            exception = addCause(exception3, exception);
            throw(exception);
        end
    end
end

function setAccParameters()
    try
        % Get appdata of main window
        mainWindow = guiGetWindowHandle('trEPRgui_ACC');
        ad = getappdata(mainWindow);
        
        if isempty(ad.control.spectra.accumulated)
            return;
        end
        
        % Get handles of main window
        gh = guihandles(mainWindow);
        
        % Ids of datasets to accumulate
        ad.acc.datasets = ad.control.spectra.accumulated;
        
        % Id of master dataset
        ad.acc.master = ad.control.spectra.accumulated(...
            get(gh.data_panel_master_popupmenu,'Value'));
        
        % Accumulation method
        accMethods = ...
            cellstr(get(gh.accumulation_panel_method_popupmenu,'String'));
        ad.acc.method = ...
            accMethods{get(gh.accumulation_panel_method_popupmenu,'Value')};
        
        % Interpolation method
        interpolationMethods = ...
            cellstr(get(gh.interpolation_panel_method_popupmenu,'String'));
        ad.acc.interpolation = ...
            interpolationMethods{...
            get(gh.interpolation_panel_method_popupmenu,'Value')};
        
        % Weights
        ad.acc.weights.min = ...
            str2double(get(gh.accumulation_panel_weights_min_edit,'String'));
        ad.acc.weights.max = ...
            str2double(get(gh.accumulation_panel_weights_max_edit,'String'));
        
        % Noise determination area
        % TODO: Fix handling of "end" - eventually don't get the string
        % here but set ad.acc.noise in the callback of the respective edits
        ad.acc.noise.x.min = ...
            str2double(get(gh.sn_panel_x_min_edit,'String'));
        ad.acc.noise.x.max = ...
            str2double(get(gh.sn_panel_x_max_edit,'String'));
        ad.acc.noise.y.min = ...
            str2double(get(gh.sn_panel_y_min_edit,'String'));
        ad.acc.noise.y.max = ...
            str2double(get(gh.sn_panel_y_max_edit,'String'));

        % Label of accumulated dataset
        ad.acc.label = get(gh.results_panel_label_edit,'String');
        
        % Set appdata of ACC GUI
        setappdata(mainWindow,'acc',ad.acc);
    catch exception
        try
            msgStr = ['An exception occurred. '...
                'The bug reporter should have been opened'];
            add2status(msgStr);
        catch exception2
            exception = addCause(exception2, exception);
            disp(msgStr);
        end
        try
            trEPRgui_bugreportwindow(exception);
        catch exception3
            % If even displaying the bug report window fails...
            exception = addCause(exception3, exception);
            throw(exception);
        end
    end
end

end