% Copyright (C) 2007 Till Biskup
%
% This file ist free software.
%
%****f* global_scripts/trEPR_read.m
%
% AUTHOR
%	Till Biskup <till.biskup@physik.fu-berlin.de>
% MAINTAINER
%	Till Biskup <till.biskup@physik.fu-berlin.de>
% COPYRIGHT
%	(c) 2007 Till Biskup
%	This file is free software
% CREATION DATE
%	2007/09/27
% VERSION
%	$Revision: 587 $
% MODIFICATION DATE
%	$Date: 2008-03-12 18:56:11 +0000 (Mi, 12 MÃ¤r 2008) $
% KEYWORDS
%	trEPR, data files, file format, read
%
% SYNOPSIS
%	[ data ] = trEPR_read ( fileName )
%   [ data ] = trEPR_read ( fileName, fileFormat )
%   [ data, parameters ] = trEPR_read ( fileName )
%   [ data, parameters ] = trEPR_read ( fileName, fileFormat )
%   [ data, parameters, fileFormat ] = trEPR_read ( fileName )
%
% DESCRIPTION
%	global read function that is able to read different types of data files
%	the trEPR toolbox has to deal with
%
%	The idea behind this generalized read function is to make it much easier to
%	handle different kinds of input files, such as fsc2 files and ASCII files
%	written with the ascii_save_* functions of the trEPR toolbox.
%
% INPUT PARAMETERS
%   input_filename (STRING)
%		string containing the filename of the file to be read in
%
%   file_format (STRING, optional)
%		string defining the format of the input file
%
%		Can be one of the following:
%
% OUTPUT PARAMETERS
%   data (MATRIX)
%		matrix with the data read from the input file
%
%   parameters (STRUCT, optional)
%		in case there are some parameters in the input file together with the
%		data, they are returned in a structure "parameters"
%
%   file_format (STRING, optional)
%   		format of the input file
%
% EXAMPLE
%	
%
%
% SOURCE

function [data, varargout] = trEPR_read ( input_filename, varargin )

	fprintf('\n% FUNCTION CALL: $Id: trEPR_read.m 587 2008-03-12 18:56:11Z till $\n% \n');

	% check for the right number of input and output parameters

	if ( nargin < 1 ) || ( nargin > 2 )

		error('\n\tThe function is called with the wrong number (%i) of input arguments.\n\tPlease use "help trEPR_read" to get help.',nargin);

	end

	if ( nargout < 1 ) || ( nargout > 3 )

		error('\n\tThe function is called with the wrong number (%i) of output arguments.\n\tPlease use "help trEPR_read" to get help.',nargout);

	end


	% check for correct format of the input parameters
	
	% INPUT_FILENAME
	
	if ~isstr(input_filename)
	
		error('\n\tThe function is called with the wrong format for the input argument %s.\n\tPlease use "help trEPR_read" to get help.','input_filename');
			% get error if function is called with the wrong format of the
			% input parameter 'input_filename'
	
	elseif length(input_filename) == 0

		error('\n\tThe function is called with an empty string as the filename %s.\n\tPlease use "help trEPR_read" to get help.','input_filename');
			% get error if function is called with an empty 'input_filename'

	end

	if ( nargin > 1 )
	
	  file_format = varargin{1};
	
	  % FILE_FORMAT
	
	  if ~isstr(file_format)
	
		error('\n\tThe function is called with the wrong format for the input argument %s.\n\tPlease use "help trEPR_read" to get help.','file_format');
			% get error if function is called with the wrong format of the
			% input parameter 'file_format'
	
	  elseif length(file_format) == 0

		error('\n\tThe function is called with an empty string as the %s.\n\tPlease use "help trEPR_read" to get help.','file_format');
			% get error if function is called with an empty 'file_format'

	  end

	end

	% ...and here the 'real' stuff goes in

	% Define a global variable "status" that is set by the routines now called
	% according to their exit status.
	%
	% The exit status of all functions is zero if everything went well. Otherwise
	% the variable "status" contains a value <> 0. Thus it is possible to query the
	% status in a simple if construct as
	%
	%	if (status)
	%		...
	%	end
		
	global status;
	
	% switch off warnings for the wrong file format generated by the trEPR toolbox
	
	warning off trEPR:WrongFileFormat;
	
	% First, try to read the file as if it were a fsc2 file
	% Therefore, use the non-interactive routine read_fsc2_data
	
	[ data, freq, fp, sp, tp ] = read_fsc2_data ( input_filename );

	if (status)
	
		% error('An error has appeared...');
		
	else
	
		parameters = struct('field_start',fp(1),'field_stop',fp(2),'field_stepwidth',fp(3),...
							'sensitivity',sp(1),'time_base',sp(2),'averages',sp(3),...
							'points',tp(1),'trig_pos',tp(2),'length_ts',tp(3),...
							'frequency',freq);
							
		varargout{1} = parameters;
		varargout{2} = 'fsc2 file';
		
		return;
	
	end
	
	[ data, fp, tp, freq ] = ascii_read_2Dspectrum ( input_filename );

	if (status)
	
		% error('An error has appeared...');
		
	else
	
		parameters = struct('field_start',fp(1),'field_stop',fp(2),'field_stepwidth',fp(3),...
							'points',tp(1),'trig_pos',tp(2),'length_ts',tp(3),...
							'frequency',freq);
							
		varargout{1} = parameters;
		varargout{2} = 'trEPR ASCII 2Dspec file';
		
		return;
	
	end
	
	[ sp, ba, fp, tp, freq ] = ascii_read_spectrum ( input_filename );

	if (status)
	
		% error('An error has appeared...');
		
	else
	
		data = [ sp ba ];
	
		parameters = struct('field_start',fp(1),'field_stop',fp(2),'field_stepwidth',fp(3),...
							'points',tp(1),'trig_pos',tp(2),'length_ts',tp(3),...
							'frequency',freq);
							
		varargout{1} = parameters;
		varargout{2} = 'trEPR ASCII 1Dspec file';
		
		return;
	
	end
	
	[ ts, ta, fp, tp, freq ] = ascii_read_timeslice ( input_filename );

	if (status)
	
		% error('An error has appeared...');
		
	else
	
		data = [ ts ta ];
	
		parameters = struct('field_start',fp(1),'field_stop',fp(2),'field_stepwidth',fp(3),...
							'points',tp(1),'trig_pos',tp(2),'length_ts',tp(3),...
							'frequency',freq);
							
		varargout{1} = parameters;
		varargout{2} = 'trEPR ASCII 1Dtimetrace file';
		
		return;
	
	end

	% switch on again warnings for the wrong file format generated by the trEPR toolbox
	
	warning on trEPR:WrongFileFormat;


%	field_params
%		a 3x1 vector containing of three values, the "field parameters"
%
%		These field parameters are:
%
%			start_field
%				the start position of the field sweep given in Gauss (G)
%			end_field
%				the stop position of the field sweep given in Gauss (G)
%			field_step_width
%				the step width by which the field is swept given in Gauss (G)
%
%	scope_params
%		a 3x1 vector containing of three values, the "scope parameters"
%
%		These field parameters are:
%
%			sensitivity
%				the sensitivity of the scope (normally in mV)
%			time_base
%				the time base of the scope (normally in us)
%			averages
%				the number of averages that were collected for each time slice
%
%	time_params
%		a 3x1 vector containing of three values, the "time parameters"
%	
%		These time parameters are:
%
%			no_points
%				number of points of the time slice
%			trig_pos
%				position of the trigger pulse
%			length_ts
%				length of the time slice in microseconds



%******
